[
    {
        "content": "Build AI agent teams that work together to tackle complex tasks",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Introduction",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI is a lean, lightning-fast Python framework built entirely from scratch—completely independent of LangChain or other agent frameworks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI empowers developers with both high-level simplicity and precise low-level control, ideal for creating autonomous AI agents tailored to any scenario:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "With over 100,000 developers certified through our community courses, CrewAI is rapidly becoming the standard for enterprise-ready AI automation.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Just like a company has departments (Sales, Engineering, Marketing) working together under leadership to achieve business goals, CrewAI helps you create an organization of AI agents with specialized roles collaborating to accomplish complex tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Create specialized agents with defined roles, expertise, and goals - from researchers to analysts to writers",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Role-Based Agents",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Equip agents with custom tools and APIs to interact with external services and data sources",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Flexible Tools",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Agents work together, sharing insights and coordinating tasks to achieve complex objectives",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Intelligent Collaboration",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Define sequential or parallel workflows, with agents automatically handling task dependencies",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Task Management",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "While Crews excel at autonomous collaboration, Flows provide structured automations, offering granular control over workflow execution. Flows ensure tasks are executed reliably, securely, and efficiently, handling conditional logic, loops, and dynamic state management with precision. Flows integrate seamlessly with Crews, enabling you to balance high autonomy with exacting control.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Define precise execution paths responding dynamically to events",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Event-Driven Orchestration",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Manage workflow states and conditional execution securely and efficiently",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Fine-Grained Control",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Effortlessly combine with Crews for enhanced autonomy and intelligence",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Native Crew Integration",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Ensure predictable outcomes with explicit control flow and error handling",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Deterministic Execution",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Understanding when to use Crews versus Flows is key to maximizing the potential of CrewAI in your applications.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "​What is CrewAI?",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Step-by-step tutorial to create a collaborative AI team that works together to solve complex problems.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Build Your First Crew",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Learn how to create structured, event-driven workflows with precise control over execution.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Build Your First Flow",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Get started with CrewAI in your development environment.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Install CrewAI",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Follow our quickstart guide to create your first CrewAI agent and get hands-on experience.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Quick Start",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Connect with other developers, get help, and share your CrewAI experiences.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com",
            "topic": "Join the Community",
            "page_number": 1,
            "type": "paragraph"
        }
    },
    {
        "content": "Learn how to use Weights & Biases (W&B) Weave to track, experiment with, evaluate, and improve your CrewAI applications.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Weave Integration",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "Weights & Biases (W&B) Weave is a framework for tracking, experimenting with, evaluating, deploying, and improving LLM-based applications.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "Weave provides comprehensive support for every stage of your CrewAI application development:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "Weave automatically captures traces for your CrewAI applications, enabling you to monitor and analyze your agents’ performance, interactions, and execution flow. This helps you build better evaluation datasets and optimize your agent workflows.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n crewai weave\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "pip install crewai weave",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "Sign up for a Weights & Biases account if you haven’t already. You’ll need this to view your traces and metrics.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "Initialize Weave in Your Application",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "Add the following code to your application:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n weave\\n\n\n\\n# Initialize Weave with your project name\\n\n\\nweave\\n.\\ninit\\n(\\nproject_name\\n=\\n\"crewai_demo\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "import weave\n\n# Initialize Weave with your project name\nweave.init(project_name=\"crewai_demo\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "After initialization, Weave will provide a URL where you can view your traces and metrics.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n,\\n LLM\\n,\\n Process\\n\n\n\\n# Create an LLM with a temperature of 0 to ensure deterministic outputs\\n\n\\nllm \\n=\\n LLM\\n(\\nmodel\\n=\\n\"gpt-4o\"\\n,\\n temperature\\n=\\n0\\n)\\n\n\n\\n# Create agents\\n\n\\nresearcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n'Research Analyst'\\n,\\n\n\\n    goal\\n=\\n'Find and analyze the best investment opportunities'\\n,\\n\n\\n    backstory\\n=\\n'Expert in financial analysis and market research'\\n,\\n\n\\n    llm\\n=\\nllm\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    allow_delegation\\n=\\nFalse\\n,\\n\n\\n)\\n\n\n\\nwriter \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n'Report Writer'\\n,\\n\n\\n    goal\\n=\\n'Write clear and concise investment reports'\\n,\\n\n\\n    backstory\\n=\\n'Experienced in creating detailed financial reports'\\n,\\n\n\\n    llm\\n=\\nllm\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    allow_delegation\\n=\\nFalse\\n,\\n\n\\n)\\n\n\n\\n# Create tasks\\n\n\\nresearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Deep research on the {topic}'\\n,\\n\n\\n    expected_output\\n=\\n'Comprehensive market data including key players, market size, and growth trends.'\\n,\\n\n\\n    agent\\n=\\nresearcher\\n\n\\n)\\n\n\n\\nwriting_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Write a detailed report based on the research'\\n,\\n\n\\n    expected_output\\n=\\n'The report should be easy to read and understand. Use bullet points where applicable.'\\n,\\n\n\\n    agent\\n=\\nwriter\\n\n\\n)\\n\n\n\\n# Create a crew\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nresearcher\\n,\\n writer\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\nresearch_task\\n,\\n writing_task\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n)\\n\n\n\\n# Run the crew\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n\"topic\"\\n:\\n \\n\"AI in material science\"\\n}\\n)\\n\n\\nprint\\n(\\nresult\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew, LLM, Process\n\n# Create an LLM with a temperature of 0 to ensure deterministic outputs\nllm = LLM(model=\"gpt-4o\", temperature=0)\n\n# Create agents\nresearcher = Agent(\n    role='Research Analyst',\n    goal='Find and analyze the best investment opportunities',\n    backstory='Expert in financial analysis and market research',\n    llm=llm,\n    verbose=True,\n    allow_delegation=False,\n)\n\nwriter = Agent(\n    role='Report Writer',\n    goal='Write clear and concise investment reports',\n    backstory='Experienced in creating detailed financial reports',\n    llm=llm,\n    verbose=True,\n    allow_delegation=False,\n)\n\n# Create tasks\nresearch_task = Task(\n    description='Deep research on the {topic}',\n    expected_output='Comprehensive market data including key players, market size, and growth trends.',\n    agent=researcher\n)\n\nwriting_task = Task(\n    description='Write a detailed report based on the research',\n    expected_output='The report should be easy to read and understand. Use bullet points where applicable.',\n    agent=writer\n)\n\n# Create a crew\ncrew = Crew(\n    agents=[researcher, writer],\n    tasks=[research_task, writing_task],\n    verbose=True,\n    process=Process.sequential,\n)\n\n# Run the crew\nresult = crew.kickoff(inputs={\"topic\": \"AI in material science\"})\nprint(result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "Code Example on Weave Integration - CrewAI",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "After running your CrewAI application, visit the Weave URL provided during initialization to view:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "kickoff_for_each()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "kickoff_async()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "kickoff_for_each_async()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@start",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@listen",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@router",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@or_",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@and_",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "Task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "@weave.op()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Weave Overview",
            "page_number": 2,
            "type": "code_block"
        }
    },
    {
        "content": "For detailed information on what’s supported, visit the Weave CrewAI documentation .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/weave-integration",
            "topic": "​Features",
            "page_number": 2,
            "type": "paragraph"
        }
    },
    {
        "content": "A comprehensive guide to understanding and applying the hierarchical process within your CrewAI projects, updated to reflect the latest coding practices and functionalities.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "Hierarchical Process",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.\nThis systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "The hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,\nwhere a ‘manager’ agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either\nautomatically created by CrewAI or explicitly set by the user.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Hierarchical Process Overview",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "To utilize the hierarchical process, it’s essential to explicitly set the process attribute to Process.hierarchical , as the default behavior is Process.sequential .\nDefine a crew with a designated manager and establish a clear chain of command.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Implementing the Hierarchical Process",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "Process.hierarchical",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "Process.sequential",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "Assign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager’s guidance.\nTools can also be specified at the task level for precise control over tool availability during task execution.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "Configuring the manager_llm parameter is crucial for the hierarchical process.\nThe system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "manager_llm",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Process\\n,\\n Agent\\n\n\\n\n\\n# Agents are defined with attributes for backstory, cache, and verbose mode\\n\n\\nresearcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n'Researcher'\\n,\\n\n\\n    goal\\n=\\n'Conduct in-depth analysis'\\n,\\n\n\\n    backstory\\n=\\n'Experienced data analyst with a knack for uncovering hidden trends.'\\n,\\n\n\\n)\\n\n\\nwriter \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n'Writer'\\n,\\n\n\\n    goal\\n=\\n'Create engaging content'\\n,\\n\n\\n    backstory\\n=\\n'Creative writer passionate about storytelling in technical domains.'\\n,\\n\n\\n)\\n\n\\n\n\\n# Establishing the crew with a hierarchical process and additional configurations\\n\n\\nproject_crew \\n=\\n Crew\\n(\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n  \\n# Tasks to be delegated and executed under the manager's supervision\\n\n\\n    agents\\n=\\n[\\nresearcher\\n,\\n writer\\n]\\n,\\n\n\\n    manager_llm\\n=\\n\"gpt-4o\"\\n,\\n  \\n# Specify which LLM the manager should use\\n\n\\n    process\\n=\\nProcess\\n.\\nhierarchical\\n,\\n  \\n\n\\n    planning\\n=\\nTrue\\n,\\n \\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Process, Agent\n \n# Agents are defined with attributes for backstory, cache, and verbose mode\nresearcher = Agent(\n    role='Researcher',\n    goal='Conduct in-depth analysis',\n    backstory='Experienced data analyst with a knack for uncovering hidden trends.',\n)\nwriter = Agent(\n    role='Writer',\n    goal='Create engaging content',\n    backstory='Creative writer passionate about storytelling in technical domains.',\n)\n \n# Establishing the crew with a hierarchical process and additional configurations\nproject_crew = Crew(\n    tasks=[...],  # Tasks to be delegated and executed under the manager's supervision\n    agents=[researcher, writer],\n    manager_llm=\"gpt-4o\",  # Specify which LLM the manager should use\n    process=Process.hierarchical,  \n    planning=True, \n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "Alternatively, you can create a custom manager agent with specific attributes tailored to your project’s management needs. This gives you more control over the manager’s behavior and capabilities.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Using a Custom Manager Agent",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "# Define a custom manager agent\\n\n\\nmanager \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Project Manager\"\\n,\\n\n\\n    goal\\n=\\n\"Efficiently manage the crew and ensure high-quality task completion\"\\n,\\n\n\\n    backstory\\n=\\n\"You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success.\"\\n,\\n\n\\n    allow_delegation\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\n\n\\n# Use the custom manager in your crew\\n\n\\nproject_crew \\n=\\n Crew\\n(\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    agents\\n=\\n[\\nresearcher\\n,\\n writer\\n]\\n,\\n\n\\n    manager_agent\\n=\\nmanager\\n,\\n  \\n# Use your custom manager agent\\n\n\\n    process\\n=\\nProcess\\n.\\nhierarchical\\n,\\n\n\\n    planning\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "# Define a custom manager agent\nmanager = Agent(\n    role=\"Project Manager\",\n    goal=\"Efficiently manage the crew and ensure high-quality task completion\",\n    backstory=\"You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success.\",\n    allow_delegation=True,\n)\n \n# Use the custom manager in your crew\nproject_crew = Crew(\n    tasks=[...],\n    agents=[researcher, writer],\n    manager_agent=manager,  # Use your custom manager agent\n    process=Process.hierarchical,\n    planning=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "code_block"
        }
    },
    {
        "content": "For more details on creating and customizing a manager agent, check out the Custom Manager Agent documentation .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Introduction",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system’s capabilities, facilitates an organized and efficient approach to project management.\nUtilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/hierarchical-process",
            "topic": "​Conclusion",
            "page_number": 3,
            "type": "paragraph"
        }
    },
    {
        "content": "Understanding the telemetry data collected by CrewAI and how it contributes to the enhancement of the library.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "By default, we collect no data that would be considered personal information under GDPR and other privacy regulations.\nWe do collect Tool’s names and Agent’s roles, so be advised not to include any personal information in the tool’s names or the Agent’s roles.\nBecause no personal information is collected, it’s not necessary to worry about data residency.\nWhen share_crew is enabled, additional data is collected which may contain personal information if included by the user.\nUsers should exercise caution when enabling this feature to ensure compliance with privacy regulations.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.\nOur focus is on improving and developing the features, integrations, and tools most utilized by our users.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "It’s pivotal to understand that by default, NO personal data is collected concerning prompts, task descriptions, agents’ backstories or goals,\nusage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.\nWhen the share_crew feature is enabled, detailed data including task descriptions, agents’ backstories or goals, and other specific attributes are collected\nto provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.\nUsers should carefully consider the content of their crews and tasks before enabling share_crew .\nUsers can disable telemetry by setting the environment variable CREWAI_DISABLE_TELEMETRY to true or by setting OTEL_SDK_DISABLED to true (note that the latter disables all OpenTelemetry instrumentation globally).",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "CREWAI_DISABLE_TELEMETRY",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "true",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "OTEL_SDK_DISABLED",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "true",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "# Disable CrewAI telemetry only\\n\n\\nos\\n.\\nenviron\\n[\\n'CREWAI_DISABLE_TELEMETRY'\\n]\\n \\n=\\n \\n'true'\\n\n\n\\n# Disable all OpenTelemetry (including CrewAI)\\n\n\\nos\\n.\\nenviron\\n[\\n'OTEL_SDK_DISABLED'\\n]\\n \\n=\\n \\n'true'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "# Disable CrewAI telemetry only\nos.environ['CREWAI_DISABLE_TELEMETRY'] = 'true'\n\n# Disable all OpenTelemetry (including CrewAI)\nos.environ['OTEL_SDK_DISABLED'] = 'true'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "“No” in the “Defaulted” column indicates that this data is only collected when share_crew is set to true .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "true",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "Users can choose to share their complete telemetry data by enabling the share_crew attribute to True in their crew configurations.\nEnabling share_crew results in the collection of detailed crew and task execution data, including goal , backstory , context , and output of tasks.\nThis enables a deeper insight into usage patterns.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Opt-In Further Telemetry Sharing",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "goal",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "backstory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "output",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "If you enable share_crew , the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs.\nUsers should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "paragraph"
        }
    },
    {
        "content": "share_crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/telemetry",
            "topic": "​Telemetry",
            "page_number": 4,
            "type": "code_block"
        }
    },
    {
        "content": "The Patronus evaluation tools enable CrewAI agents to evaluate and score model inputs and outputs using the Patronus AI platform.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "Patronus Evaluation Tools",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "Patronus Evaluation Tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The Patronus evaluation tools are designed to enable CrewAI agents to evaluate and score model inputs and outputs using the Patronus AI platform. These tools provide different levels of control over the evaluation process, from allowing agents to select the most appropriate evaluator and criteria to using predefined criteria or custom local evaluators.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Description",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "There are three main Patronus evaluation tools:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Description",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "To use these tools, you need to install the Patronus package:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Installation",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "uv \\nadd\\n patronus\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "uv add patronus",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "You’ll also need to set up your Patronus API key as an environment variable:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Installation",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "export\\n \\nPATRONUS_API_KEY\\n=\\n\"your_patronus_api_key\"\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "export PATRONUS_API_KEY=\"your_patronus_api_key\"",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "To effectively use the Patronus evaluation tools, follow these steps:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Steps to Get Started",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "The following example demonstrates how to use the PatronusEvalTool , which allows agents to select the most appropriate evaluator and criteria:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Using PatronusEvalTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n PatronusEvalTool\\n\n\\n\n\\n# Initialize the tool\\n\n\\npatronus_eval_tool \\n=\\n PatronusEvalTool\\n(\\n)\\n\n\\n\n\\n# Define an agent that uses the tool\\n\n\\ncoding_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Coding Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Generate high quality code and verify that the output is code\"\\n,\\n\n\\n    backstory\\n=\\n\"An experienced coder who can generate high quality python code.\"\\n,\\n\n\\n    tools\\n=\\n[\\npatronus_eval_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\n\n\\n# Example task to generate and evaluate code\\n\n\\ngenerate_code_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Create a simple program to generate the first N numbers in the Fibonacci sequence. Select the most appropriate evaluator and criteria for evaluating your output.\"\\n,\\n\n\\n    expected_output\\n=\\n\"Program that generates the first N numbers in the Fibonacci sequence.\"\\n,\\n\n\\n    agent\\n=\\ncoding_agent\\n,\\n\n\\n)\\n\n\\n\n\\n# Create and run the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\ncoding_agent\\n]\\n,\\n tasks\\n=\\n[\\ngenerate_code_task\\n]\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import PatronusEvalTool\n \n# Initialize the tool\npatronus_eval_tool = PatronusEvalTool()\n \n# Define an agent that uses the tool\ncoding_agent = Agent(\n    role=\"Coding Agent\",\n    goal=\"Generate high quality code and verify that the output is code\",\n    backstory=\"An experienced coder who can generate high quality python code.\",\n    tools=[patronus_eval_tool],\n    verbose=True,\n)\n \n# Example task to generate and evaluate code\ngenerate_code_task = Task(\n    description=\"Create a simple program to generate the first N numbers in the Fibonacci sequence. Select the most appropriate evaluator and criteria for evaluating your output.\",\n    expected_output=\"Program that generates the first N numbers in the Fibonacci sequence.\",\n    agent=coding_agent,\n)\n \n# Create and run the crew\ncrew = Crew(agents=[coding_agent], tasks=[generate_code_task])\nresult = crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to use the PatronusPredefinedCriteriaEvalTool , which uses predefined evaluator and criteria:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Using PatronusPredefinedCriteriaEvalTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusPredefinedCriteriaEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n PatronusPredefinedCriteriaEvalTool\\n\n\\n\n\\n# Initialize the tool with predefined criteria\\n\n\\npatronus_eval_tool \\n=\\n PatronusPredefinedCriteriaEvalTool\\n(\\n\n\\n    evaluators\\n=\\n[\\n{\\n\"evaluator\"\\n:\\n \\n\"judge\"\\n,\\n \\n\"criteria\"\\n:\\n \\n\"contains-code\"\\n}\\n]\\n\n\\n)\\n\n\\n\n\\n# Define an agent that uses the tool\\n\n\\ncoding_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Coding Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Generate high quality code\"\\n,\\n\n\\n    backstory\\n=\\n\"An experienced coder who can generate high quality python code.\"\\n,\\n\n\\n    tools\\n=\\n[\\npatronus_eval_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\n\n\\n# Example task to generate code\\n\n\\ngenerate_code_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Create a simple program to generate the first N numbers in the Fibonacci sequence.\"\\n,\\n\n\\n    expected_output\\n=\\n\"Program that generates the first N numbers in the Fibonacci sequence.\"\\n,\\n\n\\n    agent\\n=\\ncoding_agent\\n,\\n\n\\n)\\n\n\\n\n\\n# Create and run the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\ncoding_agent\\n]\\n,\\n tasks\\n=\\n[\\ngenerate_code_task\\n]\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import PatronusPredefinedCriteriaEvalTool\n \n# Initialize the tool with predefined criteria\npatronus_eval_tool = PatronusPredefinedCriteriaEvalTool(\n    evaluators=[{\"evaluator\": \"judge\", \"criteria\": \"contains-code\"}]\n)\n \n# Define an agent that uses the tool\ncoding_agent = Agent(\n    role=\"Coding Agent\",\n    goal=\"Generate high quality code\",\n    backstory=\"An experienced coder who can generate high quality python code.\",\n    tools=[patronus_eval_tool],\n    verbose=True,\n)\n \n# Example task to generate code\ngenerate_code_task = Task(\n    description=\"Create a simple program to generate the first N numbers in the Fibonacci sequence.\",\n    expected_output=\"Program that generates the first N numbers in the Fibonacci sequence.\",\n    agent=coding_agent,\n)\n \n# Create and run the crew\ncrew = Crew(agents=[coding_agent], tasks=[generate_code_task])\nresult = crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to use the PatronusLocalEvaluatorTool , which uses custom function evaluators:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Using PatronusLocalEvaluatorTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusLocalEvaluatorTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n PatronusLocalEvaluatorTool\\n\n\\nfrom\\n patronus \\nimport\\n Client\\n,\\n EvaluationResult\\n\n\\nimport\\n random\\n\n\\n\n\\n# Initialize the Patronus client\\n\n\\nclient \\n=\\n Client\\n(\\n)\\n\n\\n\n\\n# Register a custom evaluator\\n\n\\n@client\\n.\\nregister_local_evaluator\\n(\\n\"random_evaluator\"\\n)\\n\n\\ndef\\n \\nrandom_evaluator\\n(\\n**\\nkwargs\\n)\\n:\\n\n\\n    score \\n=\\n random\\n.\\nrandom\\n(\\n)\\n\n\\n    \\nreturn\\n EvaluationResult\\n(\\n\n\\n        score_raw\\n=\\nscore\\n,\\n\n\\n        pass_\\n=\\nscore \\n>=\\n \\n0.5\\n,\\n\n\\n        explanation\\n=\\n\"example explanation\"\\n,\\n\n\\n    \\n)\\n\n\\n\n\\n# Initialize the tool with the custom evaluator\\n\n\\npatronus_eval_tool \\n=\\n PatronusLocalEvaluatorTool\\n(\\n\n\\n    patronus_client\\n=\\nclient\\n,\\n\n\\n    evaluator\\n=\\n\"random_evaluator\"\\n,\\n\n\\n    evaluated_model_gold_answer\\n=\\n\"example label\"\\n,\\n\n\\n)\\n\n\\n\n\\n# Define an agent that uses the tool\\n\n\\ncoding_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Coding Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Generate high quality code\"\\n,\\n\n\\n    backstory\\n=\\n\"An experienced coder who can generate high quality python code.\"\\n,\\n\n\\n    tools\\n=\\n[\\npatronus_eval_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\n\n\\n# Example task to generate code\\n\n\\ngenerate_code_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Create a simple program to generate the first N numbers in the Fibonacci sequence.\"\\n,\\n\n\\n    expected_output\\n=\\n\"Program that generates the first N numbers in the Fibonacci sequence.\"\\n,\\n\n\\n    agent\\n=\\ncoding_agent\\n,\\n\n\\n)\\n\n\\n\n\\n# Create and run the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\ncoding_agent\\n]\\n,\\n tasks\\n=\\n[\\ngenerate_code_task\\n]\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import PatronusLocalEvaluatorTool\nfrom patronus import Client, EvaluationResult\nimport random\n \n# Initialize the Patronus client\nclient = Client()\n \n# Register a custom evaluator\n@client.register_local_evaluator(\"random_evaluator\")\ndef random_evaluator(**kwargs):\n    score = random.random()\n    return EvaluationResult(\n        score_raw=score,\n        pass_=score >= 0.5,\n        explanation=\"example explanation\",\n    )\n \n# Initialize the tool with the custom evaluator\npatronus_eval_tool = PatronusLocalEvaluatorTool(\n    patronus_client=client,\n    evaluator=\"random_evaluator\",\n    evaluated_model_gold_answer=\"example label\",\n)\n \n# Define an agent that uses the tool\ncoding_agent = Agent(\n    role=\"Coding Agent\",\n    goal=\"Generate high quality code\",\n    backstory=\"An experienced coder who can generate high quality python code.\",\n    tools=[patronus_eval_tool],\n    verbose=True,\n)\n \n# Example task to generate code\ngenerate_code_task = Task(\n    description=\"Create a simple program to generate the first N numbers in the Fibonacci sequence.\",\n    expected_output=\"Program that generates the first N numbers in the Fibonacci sequence.\",\n    agent=coding_agent,\n)\n \n# Create and run the crew\ncrew = Crew(agents=[coding_agent], tasks=[generate_code_task])\nresult = crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The PatronusEvalTool does not require any parameters during initialization. It automatically fetches available evaluators and criteria from the Patronus API.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​PatronusEvalTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The PatronusPredefinedCriteriaEvalTool accepts the following parameters during initialization:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​PatronusPredefinedCriteriaEvalTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusPredefinedCriteriaEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "[{\"evaluator\": \"judge\", \"criteria\": \"contains-code\"}]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The PatronusLocalEvaluatorTool accepts the following parameters during initialization:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​PatronusLocalEvaluatorTool",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusLocalEvaluatorTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "When using the Patronus evaluation tools, you provide the model input, output, and context, and the tool returns the evaluation results from the Patronus API.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Usage",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "For the PatronusEvalTool and PatronusPredefinedCriteriaEvalTool , the following parameters are required when calling the tool:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Usage",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "PatronusPredefinedCriteriaEvalTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "For the PatronusLocalEvaluatorTool , the same parameters are required, but the evaluator and gold answer are specified during initialization.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Usage",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "PatronusLocalEvaluatorTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Patronus Evaluation Tools",
            "page_number": 5,
            "type": "code_block"
        }
    },
    {
        "content": "The Patronus evaluation tools provide a powerful way to evaluate and score model inputs and outputs using the Patronus AI platform. By enabling agents to evaluate their own outputs or the outputs of other agents, these tools can help improve the quality and reliability of CrewAI workflows.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/patronustools",
            "topic": "​Conclusion",
            "page_number": 5,
            "type": "paragraph"
        }
    },
    {
        "content": "Learn how to create structured, event-driven workflows with precise control over execution.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "Build Your First Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI Flows represent the next level in AI orchestration - combining the collaborative power of AI agent crews with the precision and flexibility of procedural programming. While crews excel at agent collaboration, flows give you fine-grained control over exactly how and when different components of your AI system interact.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "In this guide, we’ll walk through creating a powerful CrewAI Flow that generates a comprehensive learning guide on any topic. This tutorial will demonstrate how Flows provide structured, event-driven control over your AI workflows by combining regular code, direct LLM calls, and crew-based processing.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "By the end of this guide, you’ll have:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​What You’ll Build and Learn",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "This guide creator flow demonstrates fundamental patterns that can be applied to create much more advanced applications, such as:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​What You’ll Build and Learn",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Let’s dive in and build your first flow!",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​What You’ll Build and Learn",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Before starting, make sure you have:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Prerequisites",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "First, let’s create a new CrewAI Flow project using the CLI. This command sets up a scaffolded project with all the necessary directories and template files for your flow.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 1: Create a New CrewAI Flow Project",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai create flow guide_creator_flow\\n\n\\ncd\\n guide_creator_flow\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai create flow guide_creator_flow\ncd guide_creator_flow",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This will generate a project with the basic structure needed for your flow.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 1: Create a New CrewAI Flow Project",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "The generated project has the following structure. Take a moment to familiarize yourself with it, as understanding this structure will help you create more complex flows in the future.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 2: Understanding the Project Structure",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "guide_creator_flow/\\n\n\\n├── .gitignore\\n\n\\n├── pyproject.toml\\n\n\\n├── README.md\\n\n\\n├── .env\\n\n\\n├── main.py\\n\n\\n├── crews/\\n\n\\n│   └── poem_crew/\\n\n\\n│       ├── config/\\n\n\\n│       │   ├── agents.yaml\\n\n\\n│       │   └── tasks.yaml\\n\n\\n│       └── poem_crew.py\\n\n\\n└── tools/\\n\n\\n    └── custom_tool.py\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "guide_creator_flow/\n├── .gitignore\n├── pyproject.toml\n├── README.md\n├── .env\n├── main.py\n├── crews/\n│   └── poem_crew/\n│       ├── config/\n│       │   ├── agents.yaml\n│       │   └── tasks.yaml\n│       └── poem_crew.py\n└── tools/\n    └── custom_tool.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This structure provides a clear separation between different components of your flow:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 2: Understanding the Project Structure",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "main.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crews",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "We’ll modify this structure to create our guide creator flow, which will orchestrate the process of generating comprehensive learning guides.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 2: Understanding the Project Structure",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Our flow will need a specialized crew to handle the content creation process. Let’s use the CrewAI CLI to add a content writer crew:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 3: Add a Content Writer Crew",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai flow add-crew content-crew\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai flow add-crew content-crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This command automatically creates the necessary directories and template files for your crew. The content writer crew will be responsible for writing and reviewing sections of our guide, working within the overall flow orchestrated by our main application.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 3: Add a Content Writer Crew",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Now, let’s modify the generated files for the content writer crew. We’ll set up two specialized agents - a writer and a reviewer - that will collaborate to create high-quality content for our guide.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 4: Configure the Content Writer Crew",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "First, update the agents configuration file to define our content creation team:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Remember to set llm to the provider you are using.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "llm",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/config/agents.yaml\\n\n\\ncontent_writer\\n:\\n\n\\n  \\nrole\\n:\\n \\n>\\n\n\\n    Educational Content Writer\\n\n\\n  \\ngoal\\n:\\n \\n>\\n\n\\n    Create engaging\\n,\\n informative content that thoroughly explains the assigned topic\\n\n\\n    and provides valuable insights to the reader\\n\n\\n  \\nbackstory\\n:\\n \\n>\\n\n\\n    You are a talented educational writer with expertise in creating clear\\n,\\n engaging\\n\n\\n    content. You have a gift for explaining complex concepts in accessible language\\n\n\\n    and organizing information in a way that helps readers build their understanding.\\n\n\\n  \\nllm\\n:\\n provider/model\\n-\\nid  \\n# e.g. openai/gpt-4o, google/gemini-2.0-flash, anthropic/claude...\\n\n\n\\ncontent_reviewer\\n:\\n\n\\n  \\nrole\\n:\\n \\n>\\n\n\\n    Educational Content Reviewer and Editor\\n\n\\n  \\ngoal\\n:\\n \\n>\\n\n\\n    Ensure content is accurate\\n,\\n comprehensive\\n,\\n well\\n-\\nstructured\\n,\\n and maintains\\n\n\\n    consistency with previously written sections\\n\n\\n  \\nbackstory\\n:\\n \\n>\\n\n\\n    You are a meticulous editor with years of experience reviewing educational\\n\n\\n    content. You have an eye for detail\\n,\\n clarity\\n,\\n and coherence. You excel at\\n\n\\n    improving content while maintaining the original author's voice and ensuring\\n\n\\n    consistent quality across multiple sections.\\n\n\\n  \\nllm\\n:\\n provider/model\\n-\\nid  \\n# e.g. openai/gpt-4o, google/gemini-2.0-flash, anthropic/claude...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/config/agents.yaml\ncontent_writer:\n  role: >\n    Educational Content Writer\n  goal: >\n    Create engaging, informative content that thoroughly explains the assigned topic\n    and provides valuable insights to the reader\n  backstory: >\n    You are a talented educational writer with expertise in creating clear, engaging\n    content. You have a gift for explaining complex concepts in accessible language\n    and organizing information in a way that helps readers build their understanding.\n  llm: provider/model-id  # e.g. openai/gpt-4o, google/gemini-2.0-flash, anthropic/claude...\n\ncontent_reviewer:\n  role: >\n    Educational Content Reviewer and Editor\n  goal: >\n    Ensure content is accurate, comprehensive, well-structured, and maintains\n    consistency with previously written sections\n  backstory: >\n    You are a meticulous editor with years of experience reviewing educational\n    content. You have an eye for detail, clarity, and coherence. You excel at\n    improving content while maintaining the original author's voice and ensuring\n    consistent quality across multiple sections.\n  llm: provider/model-id  # e.g. openai/gpt-4o, google/gemini-2.0-flash, anthropic/claude...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "These agent definitions establish the specialized roles and perspectives that will shape how our AI agents approach content creation. Notice how each agent has a distinct purpose and expertise.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 4: Configure the Content Writer Crew",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/config/tasks.yaml\\n\n\\nwrite_section_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    \\nWrite a comprehensive section on the topic\\n:\\n \\n\"{section_title}\"\\n\n\n\\n    \\nSection description\\n:\\n \\n{\\nsection_description\\n}\\n\n\\n    \\nTarget audience\\n:\\n \\n{\\naudience_level\\n}\\n level learners\\n\n\n\\n    Your content should\\n:\\n\n\\n    1. Begin with a brief introduction to the section topic\\n\n\\n    2. Explain all key concepts clearly with examples\\n\n\\n    3. Include practical applications or exercises where appropriate\\n\n\\n    4. End with a summary of key points\\n\n\\n    5. Be approximately 500\\n-\\n800 words in length\\n\n\n\\n    Format your content in Markdown with appropriate headings\\n,\\n lists\\n,\\n and emphasis.\\n\n\n\\n    Previously written sections\\n:\\n\n\\n    \\n{\\nprevious_sections\\n}\\n\n\n\\n    Make sure your content maintains consistency with previously written sections\\n\n\\n    and builds upon concepts that have already been explained.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    A well\\n-\\nstructured\\n,\\n comprehensive section in Markdown format that thoroughly\\n\n\\n    explains the topic and is appropriate for the target audience.\\n\n\\n  \\nagent\\n:\\n content_writer\\n\n\n\\nreview_section_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    Review and improve the following section on \"\\n{\\nsection_title\\n}\\n\"\\n:\\n\n\n\\n    \\n{\\ndraft_content\\n}\\n\n\n\\n    \\nTarget audience\\n:\\n \\n{\\naudience_level\\n}\\n level learners\\n\n\n\\n    Previously written sections\\n:\\n\n\\n    \\n{\\nprevious_sections\\n}\\n\n\n\\n    Your review should\\n:\\n\n\\n    1. Fix any grammatical or spelling errors\\n\n\\n    2. Improve clarity and readability\\n\n\\n    3. Ensure content is comprehensive and accurate\\n\n\\n    4. Verify consistency with previously written sections\\n\n\\n    5. Enhance the structure and flow\\n\n\\n    6. Add any missing key information\\n\n\n\\n    Provide the improved version of the section in Markdown format.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    An improved\\n,\\n polished version of the section that maintains the original\\n\n\\n    structure but enhances clarity\\n,\\n accuracy\\n,\\n and consistency.\\n\n\\n  \\nagent\\n:\\n content_reviewer\\n\n\\n  context\\n:\\n\n\\n    \\n-\\n write_section_task\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/config/tasks.yaml\nwrite_section_task:\n  description: >\n    Write a comprehensive section on the topic: \"{section_title}\"\n\n    Section description: {section_description}\n    Target audience: {audience_level} level learners\n\n    Your content should:\n    1. Begin with a brief introduction to the section topic\n    2. Explain all key concepts clearly with examples\n    3. Include practical applications or exercises where appropriate\n    4. End with a summary of key points\n    5. Be approximately 500-800 words in length\n\n    Format your content in Markdown with appropriate headings, lists, and emphasis.\n\n    Previously written sections:\n    {previous_sections}\n\n    Make sure your content maintains consistency with previously written sections\n    and builds upon concepts that have already been explained.\n  expected_output: >\n    A well-structured, comprehensive section in Markdown format that thoroughly\n    explains the topic and is appropriate for the target audience.\n  agent: content_writer\n\nreview_section_task:\n  description: >\n    Review and improve the following section on \"{section_title}\":\n\n    {draft_content}\n\n    Target audience: {audience_level} level learners\n\n    Previously written sections:\n    {previous_sections}\n\n    Your review should:\n    1. Fix any grammatical or spelling errors\n    2. Improve clarity and readability\n    3. Ensure content is comprehensive and accurate\n    4. Verify consistency with previously written sections\n    5. Enhance the structure and flow\n    6. Add any missing key information\n\n    Provide the improved version of the section in Markdown format.\n  expected_output: >\n    An improved, polished version of the section that maintains the original\n    structure but enhances clarity, accuracy, and consistency.\n  agent: content_reviewer\n  context:\n    - write_section_task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "These task definitions provide detailed instructions to our agents, ensuring they produce content that meets our quality standards. Note how the context parameter in the review task creates a workflow where the reviewer has access to the writer’s output.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/content_crew.py\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nproject \\nimport\\n CrewBase\\n,\\n agent\\n,\\n crew\\n,\\n task\\n\n\\nfrom\\n crewai\\n.\\nagents\\n.\\nagent_builder\\n.\\nbase_agent \\nimport\\n BaseAgent\\n\n\\nfrom\\n typing \\nimport\\n List\\n\n\n\\n@CrewBase\\n\n\\nclass\\n \\nContentCrew\\n(\\n)\\n:\\n\n\\n    \\n\"\"\"Content writing crew\"\"\"\\n\n\n\\n    agents\\n:\\n List\\n[\\nBaseAgent\\n]\\n\n\\n    tasks\\n:\\n List\\n[\\nTask\\n]\\n\n\n\\n    \\n@agent\\n\n\\n    \\ndef\\n \\ncontent_writer\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n        \\nreturn\\n Agent\\n(\\n\n\\n            config\\n=\\nself\\n.\\nagents_config\\n[\\n'content_writer'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n            verbose\\n=\\nTrue\\n\n\\n        \\n)\\n\n\n\\n    \\n@agent\\n\n\\n    \\ndef\\n \\ncontent_reviewer\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n        \\nreturn\\n Agent\\n(\\n\n\\n            config\\n=\\nself\\n.\\nagents_config\\n[\\n'content_reviewer'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n            verbose\\n=\\nTrue\\n\n\\n        \\n)\\n\n\n\\n    \\n@task\\n\n\\n    \\ndef\\n \\nwrite_section_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n        \\nreturn\\n Task\\n(\\n\n\\n            config\\n=\\nself\\n.\\ntasks_config\\n[\\n'write_section_task'\\n]\\n \\n# type: ignore[index]\\n\n\\n        \\n)\\n\n\n\\n    \\n@task\\n\n\\n    \\ndef\\n \\nreview_section_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n        \\nreturn\\n Task\\n(\\n\n\\n            config\\n=\\nself\\n.\\ntasks_config\\n[\\n'review_section_task'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n            context\\n=\\n[\\nself\\n.\\nwrite_section_task\\n(\\n)\\n]\\n\n\\n        \\n)\\n\n\n\\n    \\n@crew\\n\n\\n    \\ndef\\n \\ncrew\\n(\\nself\\n)\\n \\n-\\n>\\n Crew\\n:\\n\n\\n        \\n\"\"\"Creates the content writing crew\"\"\"\\n\n\\n        \\nreturn\\n Crew\\n(\\n\n\\n            agents\\n=\\nself\\n.\\nagents\\n,\\n\n\\n            tasks\\n=\\nself\\n.\\ntasks\\n,\\n\n\\n            process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n            verbose\\n=\\nTrue\\n,\\n\n\\n        \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "# src/guide_creator_flow/crews/content_crew/content_crew.py\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\nfrom crewai.agents.agent_builder.base_agent import BaseAgent\nfrom typing import List\n\n@CrewBase\nclass ContentCrew():\n    \"\"\"Content writing crew\"\"\"\n\n    agents: List[BaseAgent]\n    tasks: List[Task]\n\n    @agent\n    def content_writer(self) -> Agent:\n        return Agent(\n            config=self.agents_config['content_writer'], # type: ignore[index]\n            verbose=True\n        )\n\n    @agent\n    def content_reviewer(self) -> Agent:\n        return Agent(\n            config=self.agents_config['content_reviewer'], # type: ignore[index]\n            verbose=True\n        )\n\n    @task\n    def write_section_task(self) -> Task:\n        return Task(\n            config=self.tasks_config['write_section_task'] # type: ignore[index]\n        )\n\n    @task\n    def review_section_task(self) -> Task:\n        return Task(\n            config=self.tasks_config['review_section_task'], # type: ignore[index]\n            context=[self.write_section_task()]\n        )\n\n    @crew\n    def crew(self) -> Crew:\n        \"\"\"Creates the content writing crew\"\"\"\n        return Crew(\n            agents=self.agents,\n            tasks=self.tasks,\n            process=Process.sequential,\n            verbose=True,\n        )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This crew definition establishes the relationship between our agents and tasks, setting up a sequential process where the content writer creates a draft and then the reviewer improves it. While this crew can function independently, in our flow it will be orchestrated as part of a larger system.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Now comes the exciting part - creating the flow that will orchestrate the entire guide creation process. This is where we’ll combine regular Python code, direct LLM calls, and our content creation crew into a cohesive system.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 5: Create the Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Let’s create our flow in the main.py file:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 5: Create the Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "main.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "#!/usr/bin/env python\\n\n\\nimport\\n json\\n\n\\nimport\\n os\\n\n\\nfrom\\n typing \\nimport\\n List\\n,\\n Dict\\n\n\\nfrom\\n pydantic \\nimport\\n BaseModel\\n,\\n Field\\n\n\\nfrom\\n crewai \\nimport\\n LLM\\n\n\\nfrom\\n crewai\\n.\\nflow\\n.\\nflow \\nimport\\n Flow\\n,\\n listen\\n,\\n start\\n\n\\nfrom\\n guide_creator_flow\\n.\\ncrews\\n.\\ncontent_crew\\n.\\ncontent_crew \\nimport\\n ContentCrew\\n\n\n\\n# Define our models for structured data\\n\n\\nclass\\n \\nSection\\n(\\nBaseModel\\n)\\n:\\n\n\\n    title\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Title of the section\"\\n)\\n\n\\n    description\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Brief description of what the section should cover\"\\n)\\n\n\n\\nclass\\n \\nGuideOutline\\n(\\nBaseModel\\n)\\n:\\n\n\\n    title\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Title of the guide\"\\n)\\n\n\\n    introduction\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Introduction to the topic\"\\n)\\n\n\\n    target_audience\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Description of the target audience\"\\n)\\n\n\\n    sections\\n:\\n List\\n[\\nSection\\n]\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"List of sections in the guide\"\\n)\\n\n\\n    conclusion\\n:\\n \\nstr\\n \\n=\\n Field\\n(\\ndescription\\n=\\n\"Conclusion or summary of the guide\"\\n)\\n\n\n\\n# Define our flow state\\n\n\\nclass\\n \\nGuideCreatorState\\n(\\nBaseModel\\n)\\n:\\n\n\\n    topic\\n:\\n \\nstr\\n \\n=\\n \\n\"\"\\n\n\\n    audience_level\\n:\\n \\nstr\\n \\n=\\n \\n\"\"\\n\n\\n    guide_outline\\n:\\n GuideOutline \\n=\\n \\nNone\\n\n\\n    sections_content\\n:\\n Dict\\n[\\nstr\\n,\\n \\nstr\\n]\\n \\n=\\n \\n{\\n}\\n\n\n\\nclass\\n \\nGuideCreatorFlow\\n(\\nFlow\\n[\\nGuideCreatorState\\n]\\n)\\n:\\n\n\\n    \\n\"\"\"Flow for creating a comprehensive guide on any topic\"\"\"\\n\n\n\\n    \\n@start\\n(\\n)\\n\n\\n    \\ndef\\n \\nget_user_input\\n(\\nself\\n)\\n:\\n\n\\n        \\n\"\"\"Get input from the user about the guide topic and audience\"\"\"\\n\n\\n        \\nprint\\n(\\n\"\\n=== Create Your Comprehensive Guide ===\\n\"\\n)\\n\n\n\\n        \\n# Get user input\\n\n\\n        self\\n.\\nstate\\n.\\ntopic \\n=\\n \\ninput\\n(\\n\"What topic would you like to create a guide for? \"\\n)\\n\n\n\\n        \\n# Get audience level with validation\\n\n\\n        \\nwhile\\n \\nTrue\\n:\\n\n\\n            audience \\n=\\n \\ninput\\n(\\n\"Who is your target audience? (beginner/intermediate/advanced) \"\\n)\\n.\\nlower\\n(\\n)\\n\n\\n            \\nif\\n audience \\nin\\n \\n[\\n\"beginner\"\\n,\\n \\n\"intermediate\"\\n,\\n \\n\"advanced\"\\n]\\n:\\n\n\\n                self\\n.\\nstate\\n.\\naudience_level \\n=\\n audience\\n\n\\n                \\nbreak\\n\n\\n            \\nprint\\n(\\n\"Please enter 'beginner', 'intermediate', or 'advanced'\"\\n)\\n\n\n\\n        \\nprint\\n(\\nf\"\\nCreating a guide on \\n{\\nself\\n.\\nstate\\n.\\ntopic\\n}\\n for \\n{\\nself\\n.\\nstate\\n.\\naudience_level\\n}\\n audience...\\n\"\\n)\\n\n\\n        \\nreturn\\n self\\n.\\nstate\\n\n\n\\n    \\n@listen\\n(\\nget_user_input\\n)\\n\n\\n    \\ndef\\n \\ncreate_guide_outline\\n(\\nself\\n,\\n state\\n)\\n:\\n\n\\n        \\n\"\"\"Create a structured outline for the guide using a direct LLM call\"\"\"\\n\n\\n        \\nprint\\n(\\n\"Creating guide outline...\"\\n)\\n\n\n\\n        \\n# Initialize the LLM\\n\n\\n        llm \\n=\\n LLM\\n(\\nmodel\\n=\\n\"openai/gpt-4o-mini\"\\n,\\n response_format\\n=\\nGuideOutline\\n)\\n\n\n\\n        \\n# Create the messages for the outline\\n\n\\n        messages \\n=\\n \\n[\\n\n\\n            \\n{\\n\"role\"\\n:\\n \\n\"system\"\\n,\\n \\n\"content\"\\n:\\n \\n\"You are a helpful assistant designed to output JSON.\"\\n}\\n,\\n\n\\n            \\n{\\n\"role\"\\n:\\n \\n\"user\"\\n,\\n \\n\"content\"\\n:\\n \\nf\"\"\\n\"\\n\n\\n            Create a detailed outline \\nfor\\n a comprehensive guide on \\n\"{state.topic}\"\\n \\nfor\\n \\n{\\nstate\\n.\\naudience_level\\n}\\n level learners\\n.\\n\n\n\\n            The outline should include\\n:\\n\n\\n            \\n1.\\n A compelling title \\nfor\\n the guide\\n\n\\n            \\n2.\\n An introduction to the topic\\n\n\\n            \\n3.\\n \\n4\\n-\\n6\\n main sections that cover the most important aspects of the topic\\n\n\\n            \\n4.\\n A conclusion \\nor\\n summary\\n\n\n\\n            For each section\\n,\\n provide a clear title \\nand\\n a brief description of what it should cover\\n.\\n\n\\n            \\n\"\"\\n\"\\n}\\n\n\\n        \\n]\\n\n\n\\n        \\n# Make the LLM call with JSON response format\\n\n\\n        response \\n=\\n llm\\n.\\ncall\\n(\\nmessages\\n=\\nmessages\\n)\\n\n\n\\n        \\n# Parse the JSON response\\n\n\\n        outline_dict \\n=\\n json\\n.\\nloads\\n(\\nresponse\\n)\\n\n\\n        self\\n.\\nstate\\n.\\nguide_outline \\n=\\n GuideOutline\\n(\\n**\\noutline_dict\\n)\\n\n\n\\n        \\n# Ensure output directory exists before saving\\n\n\\n        os\\n.\\nmakedirs\\n(\\n\"output\"\\n,\\n exist_ok\\n=\\nTrue\\n)\\n\n\n\\n        \\n# Save the outline to a file\\n\n\\n        \\nwith\\n \\nopen\\n(\\n\"output/guide_outline.json\"\\n,\\n \\n\"w\"\\n)\\n \\nas\\n f\\n:\\n\n\\n            json\\n.\\ndump\\n(\\noutline_dict\\n,\\n f\\n,\\n indent\\n=\\n2\\n)\\n\n\n\\n        \\nprint\\n(\\nf\"Guide outline created with \\n{\\nlen\\n(\\nself\\n.\\nstate\\n.\\nguide_outline\\n.\\nsections\\n)\\n}\\n sections\"\\n)\\n\n\\n        \\nreturn\\n self\\n.\\nstate\\n.\\nguide_outline\\n\n\n\\n    \\n@listen\\n(\\ncreate_guide_outline\\n)\\n\n\\n    \\ndef\\n \\nwrite_and_compile_guide\\n(\\nself\\n,\\n outline\\n)\\n:\\n\n\\n        \\n\"\"\"Write all sections and compile the guide\"\"\"\\n\n\\n        \\nprint\\n(\\n\"Writing guide sections and compiling...\"\\n)\\n\n\\n        completed_sections \\n=\\n \\n[\\n]\\n\n\n\\n        \\n# Process sections one by one to maintain context flow\\n\n\\n        \\nfor\\n section \\nin\\n outline\\n.\\nsections\\n:\\n\n\\n            \\nprint\\n(\\nf\"Processing section: \\n{\\nsection\\n.\\ntitle\\n}\\n\"\\n)\\n\n\n\\n            \\n# Build context from previous sections\\n\n\\n            previous_sections_text \\n=\\n \\n\"\"\\n\n\\n            \\nif\\n completed_sections\\n:\\n\n\\n                previous_sections_text \\n=\\n \\n\"# Previously Written Sections\\n\\n\"\\n\n\\n                \\nfor\\n title \\nin\\n completed_sections\\n:\\n\n\\n                    previous_sections_text \\n+=\\n \\nf\"## \\n{\\ntitle\\n}\\n\\n\\n\"\\n\n\\n                    previous_sections_text \\n+=\\n self\\n.\\nstate\\n.\\nsections_content\\n.\\nget\\n(\\ntitle\\n,\\n \\n\"\"\\n)\\n \\n+\\n \\n\"\\n\\n\"\\n\n\\n            \\nelse\\n:\\n\n\\n                previous_sections_text \\n=\\n \\n\"No previous sections written yet.\"\\n\n\n\\n            \\n# Run the content crew for this section\\n\n\\n            result \\n=\\n ContentCrew\\n(\\n)\\n.\\ncrew\\n(\\n)\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n\n\\n                \\n\"section_title\"\\n:\\n section\\n.\\ntitle\\n,\\n\n\\n                \\n\"section_description\"\\n:\\n section\\n.\\ndescription\\n,\\n\n\\n                \\n\"audience_level\"\\n:\\n self\\n.\\nstate\\n.\\naudience_level\\n,\\n\n\\n                \\n\"previous_sections\"\\n:\\n previous_sections_text\\n,\\n\n\\n                \\n\"draft_content\"\\n:\\n \\n\"\"\\n\n\\n            \\n}\\n)\\n\n\n\\n            \\n# Store the content\\n\n\\n            self\\n.\\nstate\\n.\\nsections_content\\n[\\nsection\\n.\\ntitle\\n]\\n \\n=\\n result\\n.\\nraw\\n\n\\n            completed_sections\\n.\\nappend\\n(\\nsection\\n.\\ntitle\\n)\\n\n\\n            \\nprint\\n(\\nf\"Section completed: \\n{\\nsection\\n.\\ntitle\\n}\\n\"\\n)\\n\n\n\\n        \\n# Compile the final guide\\n\n\\n        guide_content \\n=\\n \\nf\"# \\n{\\noutline\\n.\\ntitle\\n}\\n\\n\\n\"\\n\n\\n        guide_content \\n+=\\n \\nf\"## Introduction\\n\\n\\n{\\noutline\\n.\\nintroduction\\n}\\n\\n\\n\"\\n\n\n\\n        \\n# Add each section in order\\n\n\\n        \\nfor\\n section \\nin\\n outline\\n.\\nsections\\n:\\n\n\\n            section_content \\n=\\n self\\n.\\nstate\\n.\\nsections_content\\n.\\nget\\n(\\nsection\\n.\\ntitle\\n,\\n \\n\"\"\\n)\\n\n\\n            guide_content \\n+=\\n \\nf\"\\n\\n\\n{\\nsection_content\\n}\\n\\n\\n\"\\n\n\n\\n        \\n# Add conclusion\\n\n\\n        guide_content \\n+=\\n \\nf\"## Conclusion\\n\\n\\n{\\noutline\\n.\\nconclusion\\n}\\n\\n\\n\"\\n\n\n\\n        \\n# Save the guide\\n\n\\n        \\nwith\\n \\nopen\\n(\\n\"output/complete_guide.md\"\\n,\\n \\n\"w\"\\n)\\n \\nas\\n f\\n:\\n\n\\n            f\\n.\\nwrite\\n(\\nguide_content\\n)\\n\n\n\\n        \\nprint\\n(\\n\"\\nComplete guide compiled and saved to output/complete_guide.md\"\\n)\\n\n\\n        \\nreturn\\n \\n\"Guide creation completed successfully\"\\n\n\n\\ndef\\n \\nkickoff\\n(\\n)\\n:\\n\n\\n    \\n\"\"\"Run the guide creator flow\"\"\"\\n\n\\n    GuideCreatorFlow\\n(\\n)\\n.\\nkickoff\\n(\\n)\\n\n\\n    \\nprint\\n(\\n\"\\n=== Flow Complete ===\"\\n)\\n\n\\n    \\nprint\\n(\\n\"Your comprehensive guide is ready in the output directory.\"\\n)\\n\n\\n    \\nprint\\n(\\n\"Open output/complete_guide.md to view it.\"\\n)\\n\n\n\\ndef\\n \\nplot\\n(\\n)\\n:\\n\n\\n    \\n\"\"\"Generate a visualization of the flow\"\"\"\\n\n\\n    flow \\n=\\n GuideCreatorFlow\\n(\\n)\\n\n\\n    flow\\n.\\nplot\\n(\\n\"guide_creator_flow\"\\n)\\n\n\\n    \\nprint\\n(\\n\"Flow visualization saved to guide_creator_flow.html\"\\n)\\n\n\n\\nif\\n __name__ \\n==\\n \\n\"__main__\"\\n:\\n\n\\n    kickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "#!/usr/bin/env python\nimport json\nimport os\nfrom typing import List, Dict\nfrom pydantic import BaseModel, Field\nfrom crewai import LLM\nfrom crewai.flow.flow import Flow, listen, start\nfrom guide_creator_flow.crews.content_crew.content_crew import ContentCrew\n\n# Define our models for structured data\nclass Section(BaseModel):\n    title: str = Field(description=\"Title of the section\")\n    description: str = Field(description=\"Brief description of what the section should cover\")\n\nclass GuideOutline(BaseModel):\n    title: str = Field(description=\"Title of the guide\")\n    introduction: str = Field(description=\"Introduction to the topic\")\n    target_audience: str = Field(description=\"Description of the target audience\")\n    sections: List[Section] = Field(description=\"List of sections in the guide\")\n    conclusion: str = Field(description=\"Conclusion or summary of the guide\")\n\n# Define our flow state\nclass GuideCreatorState(BaseModel):\n    topic: str = \"\"\n    audience_level: str = \"\"\n    guide_outline: GuideOutline = None\n    sections_content: Dict[str, str] = {}\n\nclass GuideCreatorFlow(Flow[GuideCreatorState]):\n    \"\"\"Flow for creating a comprehensive guide on any topic\"\"\"\n\n    @start()\n    def get_user_input(self):\n        \"\"\"Get input from the user about the guide topic and audience\"\"\"\n        print(\"\\n=== Create Your Comprehensive Guide ===\\n\")\n\n        # Get user input\n        self.state.topic = input(\"What topic would you like to create a guide for? \")\n\n        # Get audience level with validation\n        while True:\n            audience = input(\"Who is your target audience? (beginner/intermediate/advanced) \").lower()\n            if audience in [\"beginner\", \"intermediate\", \"advanced\"]:\n                self.state.audience_level = audience\n                break\n            print(\"Please enter 'beginner', 'intermediate', or 'advanced'\")\n\n        print(f\"\\nCreating a guide on {self.state.topic} for {self.state.audience_level} audience...\\n\")\n        return self.state\n\n    @listen(get_user_input)\n    def create_guide_outline(self, state):\n        \"\"\"Create a structured outline for the guide using a direct LLM call\"\"\"\n        print(\"Creating guide outline...\")\n\n        # Initialize the LLM\n        llm = LLM(model=\"openai/gpt-4o-mini\", response_format=GuideOutline)\n\n        # Create the messages for the outline\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},\n            {\"role\": \"user\", \"content\": f\"\"\"\n            Create a detailed outline for a comprehensive guide on \"{state.topic}\" for {state.audience_level} level learners.\n\n            The outline should include:\n            1. A compelling title for the guide\n            2. An introduction to the topic\n            3. 4-6 main sections that cover the most important aspects of the topic\n            4. A conclusion or summary\n\n            For each section, provide a clear title and a brief description of what it should cover.\n            \"\"\"}\n        ]\n\n        # Make the LLM call with JSON response format\n        response = llm.call(messages=messages)\n\n        # Parse the JSON response\n        outline_dict = json.loads(response)\n        self.state.guide_outline = GuideOutline(**outline_dict)\n\n        # Ensure output directory exists before saving\n        os.makedirs(\"output\", exist_ok=True)\n\n        # Save the outline to a file\n        with open(\"output/guide_outline.json\", \"w\") as f:\n            json.dump(outline_dict, f, indent=2)\n\n        print(f\"Guide outline created with {len(self.state.guide_outline.sections)} sections\")\n        return self.state.guide_outline\n\n    @listen(create_guide_outline)\n    def write_and_compile_guide(self, outline):\n        \"\"\"Write all sections and compile the guide\"\"\"\n        print(\"Writing guide sections and compiling...\")\n        completed_sections = []\n\n        # Process sections one by one to maintain context flow\n        for section in outline.sections:\n            print(f\"Processing section: {section.title}\")\n\n            # Build context from previous sections\n            previous_sections_text = \"\"\n            if completed_sections:\n                previous_sections_text = \"# Previously Written Sections\\n\\n\"\n                for title in completed_sections:\n                    previous_sections_text += f\"## {title}\\n\\n\"\n                    previous_sections_text += self.state.sections_content.get(title, \"\") + \"\\n\\n\"\n            else:\n                previous_sections_text = \"No previous sections written yet.\"\n\n            # Run the content crew for this section\n            result = ContentCrew().crew().kickoff(inputs={\n                \"section_title\": section.title,\n                \"section_description\": section.description,\n                \"audience_level\": self.state.audience_level,\n                \"previous_sections\": previous_sections_text,\n                \"draft_content\": \"\"\n            })\n\n            # Store the content\n            self.state.sections_content[section.title] = result.raw\n            completed_sections.append(section.title)\n            print(f\"Section completed: {section.title}\")\n\n        # Compile the final guide\n        guide_content = f\"# {outline.title}\\n\\n\"\n        guide_content += f\"## Introduction\\n\\n{outline.introduction}\\n\\n\"\n\n        # Add each section in order\n        for section in outline.sections:\n            section_content = self.state.sections_content.get(section.title, \"\")\n            guide_content += f\"\\n\\n{section_content}\\n\\n\"\n\n        # Add conclusion\n        guide_content += f\"## Conclusion\\n\\n{outline.conclusion}\\n\\n\"\n\n        # Save the guide\n        with open(\"output/complete_guide.md\", \"w\") as f:\n            f.write(guide_content)\n\n        print(\"\\nComplete guide compiled and saved to output/complete_guide.md\")\n        return \"Guide creation completed successfully\"\n\ndef kickoff():\n    \"\"\"Run the guide creator flow\"\"\"\n    GuideCreatorFlow().kickoff()\n    print(\"\\n=== Flow Complete ===\")\n    print(\"Your comprehensive guide is ready in the output directory.\")\n    print(\"Open output/complete_guide.md to view it.\")\n\ndef plot():\n    \"\"\"Generate a visualization of the flow\"\"\"\n    flow = GuideCreatorFlow()\n    flow.plot(\"guide_creator_flow\")\n    print(\"Flow visualization saved to guide_creator_flow.html\")\n\nif __name__ == \"__main__\":\n    kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "Let’s analyze what’s happening in this flow:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "@start()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "@listen()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This is the power of flows - combining different types of processing (user interaction, direct LLM calls, crew-based tasks) into a coherent, event-driven system.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Create a .env file in your project root with your API keys. See the LLM setup\nguide for details on configuring a provider.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 6: Set Up Your Environment Variables",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": ".env",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "OPENAI_API_KEY\\n=\\nyour_openai_api_key\\n\n\\n# or\\n\n\\nGEMINI_API_KEY\\n=\\nyour_gemini_api_key\\n\n\\n# or\\n\n\\nANTHROPIC_API_KEY\\n=\\nyour_anthropic_api_key\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "OPENAI_API_KEY=your_openai_api_key\n# or\nGEMINI_API_KEY=your_gemini_api_key\n# or\nANTHROPIC_API_KEY=your_anthropic_api_key",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai \\ninstall\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai install",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "Now it’s time to see your flow in action! Run it using the CrewAI CLI:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 8: Run Your Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai flow kickoff\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai flow kickoff",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "When you run this command, you’ll see your flow spring to life:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 8: Run Your Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "This demonstrates the power of flows to orchestrate complex processes involving multiple components, both AI and non-AI.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 8: Run Your Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "One of the powerful features of flows is the ability to visualize their structure:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 9: Visualize Your Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai flow plot\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "crewai flow plot",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This will create an HTML file that shows the structure of your flow, including the relationships between different steps and the data that flows between them. This visualization can be invaluable for understanding and debugging complex flows.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 9: Visualize Your Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Once the flow completes, you’ll find two files in the output directory:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 10: Review the Output",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "output",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "guide_outline.json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "complete_guide.md",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "Take a moment to review these files and appreciate what you’ve built - a system that combines user input, direct AI interactions, and collaborative agent work to produce a complex, high-quality output.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Step 10: Review the Output",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "What you’ve learned in this guide provides a foundation for creating much more sophisticated AI systems. Here are some ways you could extend this basic flow:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​The Art of the Possible: Beyond Your First Flow",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "You could create more interactive flows with:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Enhancing User Interaction",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "You could expand your flow with additional steps for:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Adding More Processing Steps",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "You could implement more sophisticated flow patterns:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Creating More Complex Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "The same patterns can be applied to create flows for:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Applying to Different Domains",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "This guide creator flow demonstrates several powerful features of CrewAI:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Key Features Demonstrated",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "@listen",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "Let’s break down the key components of flows to help you understand how to build your own:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Understanding the Flow Structure",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Flows allow you to make direct calls to language models when you need simple, structured responses:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​1. Direct LLM Calls",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "llm \\n=\\n LLM\\n(\\n\n\\n    model\\n=\\n\"model-id-here\"\\n,\\n  \\n# gpt-4o, gemini-2.0-flash, anthropic/claude...\\n\n\\n    response_format\\n=\\nGuideOutline\\n\n\\n)\\n\n\\nresponse \\n=\\n llm\\n.\\ncall\\n(\\nmessages\\n=\\nmessages\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "llm = LLM(\n    model=\"model-id-here\",  # gpt-4o, gemini-2.0-flash, anthropic/claude...\n    response_format=GuideOutline\n)\nresponse = llm.call(messages=messages)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This is more efficient than using a crew when you need a specific, structured output.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​1. Direct LLM Calls",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Flows use decorators to establish relationships between components:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​2. Event-Driven Architecture",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "@start\\n(\\n)\\n\n\\ndef\\n \\nget_user_input\\n(\\nself\\n)\\n:\\n\n\\n    \\n# First step in the flow\\n\n\\n    \\n# ...\\n\n\n\\n@listen\\n(\\nget_user_input\\n)\\n\n\\ndef\\n \\ncreate_guide_outline\\n(\\nself\\n,\\n state\\n)\\n:\\n\n\\n    \\n# This runs when get_user_input completes\\n\n\\n    \\n# ...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "@start()\ndef get_user_input(self):\n    # First step in the flow\n    # ...\n\n@listen(get_user_input)\ndef create_guide_outline(self, state):\n    # This runs when get_user_input completes\n    # ...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This creates a clear, declarative structure for your application.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​2. Event-Driven Architecture",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Flows maintain state across steps, making it easy to share data:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​3. State Management",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "class\\n \\nGuideCreatorState\\n(\\nBaseModel\\n)\\n:\\n\n\\n    topic\\n:\\n \\nstr\\n \\n=\\n \\n\"\"\\n\n\\n    audience_level\\n:\\n \\nstr\\n \\n=\\n \\n\"\"\\n\n\\n    guide_outline\\n:\\n GuideOutline \\n=\\n \\nNone\\n\n\\n    sections_content\\n:\\n Dict\\n[\\nstr\\n,\\n \\nstr\\n]\\n \\n=\\n \\n{\\n}\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "class GuideCreatorState(BaseModel):\n    topic: str = \"\"\n    audience_level: str = \"\"\n    guide_outline: GuideOutline = None\n    sections_content: Dict[str, str] = {}",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This provides a type-safe way to track and transform data throughout your flow.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​3. State Management",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Flows can seamlessly integrate with crews for complex collaborative tasks:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​4. Crew Integration",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "result \\n=\\n ContentCrew\\n(\\n)\\n.\\ncrew\\n(\\n)\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n\n\\n    \\n\"section_title\"\\n:\\n section\\n.\\ntitle\\n,\\n\n\\n    \\n# ...\\n\n\\n}\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "result = ContentCrew().crew().kickoff(inputs={\n    \"section_title\": section.title,\n    # ...\n})",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "This allows you to use the right tool for each part of your application - direct LLM calls for simple tasks and crews for complex collaboration.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​4. Crew Integration",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Now that you’ve built your first flow, you can:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Next Steps",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "@router()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "and_",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "or_",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "code_block"
        }
    },
    {
        "content": "Congratulations! You’ve successfully built your first CrewAI Flow that combines regular code, direct LLM calls, and crew-based processing to create a comprehensive guide. These foundational skills enable you to create increasingly sophisticated AI applications that can tackle complex, multi-stage problems through a combination of procedural control and collaborative intelligence.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/guides/flows/first-flow",
            "topic": "​Taking Control of AI Workflows with Flows",
            "page_number": 6,
            "type": "paragraph"
        }
    },
    {
        "content": "Composio provides 250+ production-ready tools for AI agents with flexible authentication management.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "Composio Tool",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "ComposioToolSet",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "Composio is an integration platform that allows you to connect your AI agents to 250+ tools. Key features include:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​Description",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "To incorporate Composio tools into your project, follow the instructions below:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​Installation",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n composio-crewai\\n\n\\npip \\ninstall\\n crewai\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "pip install composio-crewai\npip install crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "After the installation is complete, either run composio login or export your composio API key as COMPOSIO_API_KEY . Get your Composio API key from here",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​Installation",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "composio login",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "COMPOSIO_API_KEY",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to initialize the tool and execute a github action:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​Example",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n composio_crewai \\nimport\\n ComposioToolSet\\n,\\n App\\n,\\n Action\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\n\\ntoolset \\n=\\n ComposioToolSet\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "from composio_crewai import ComposioToolSet, App, Action\nfrom crewai import Agent, Task, Crew\n\ntoolset = ComposioToolSet()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "composio \\nadd\\n github\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "composio add github",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "Code Example on Composio Tool - CrewAI",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tools \\n=\\n toolset\\n.\\nget_tools\\n(\\napps\\n=\\n[\\nApp\\n.\\nGITHUB\\n]\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tools = toolset.get_tools(apps=[App.GITHUB])",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tag \\n=\\n \\n\"users\"\\n\n\n\\nfiltered_action_enums \\n=\\n toolset\\n.\\nfind_actions_by_tags\\n(\\n\n\\n    App\\n.\\nGITHUB\\n,\\n\n\\n    tags\\n=\\n[\\ntag\\n]\\n,\\n \\n\n\\n)\\n\n\n\\ntools \\n=\\n toolset\\n.\\nget_tools\\n(\\nactions\\n=\\nfiltered_action_enums\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tag = \"users\"\n\nfiltered_action_enums = toolset.find_actions_by_tags(\n    App.GITHUB,\n    tags=[tag], \n)\n\ntools = toolset.get_tools(actions=filtered_action_enums)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "use_case \\n=\\n \\n\"Star a repository on GitHub\"\\n\n\n\\nfiltered_action_enums \\n=\\n toolset\\n.\\nfind_actions_by_use_case\\n(\\n\n\\n    App\\n.\\nGITHUB\\n,\\n use_case\\n=\\nuse_case\\n,\\n advanced\\n=\\nFalse\\n\n\\n)\\n\n\n\\ntools \\n=\\n toolset\\n.\\nget_tools\\n(\\nactions\\n=\\nfiltered_action_enums\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "use_case = \"Star a repository on GitHub\"\n\nfiltered_action_enums = toolset.find_actions_by_use_case(\n    App.GITHUB, use_case=use_case, advanced=False\n)\n\ntools = toolset.get_tools(actions=filtered_action_enums)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "advanced",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "In this demo, we will use the GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER action from the GitHub app.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tools \\n=\\n toolset\\n.\\nget_tools\\n(\\n\n\\n    actions\\n=\\n[\\nAction\\n.\\nGITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER\\n]\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "tools = toolset.get_tools(\n    actions=[Action.GITHUB_STAR_A_REPOSITORY_FOR_THE_AUTHENTICATED_USER]\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "Learn more about filtering actions here",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"GitHub Agent\"\\n,\\n\n\\n    goal\\n=\\n\"You take action on GitHub using GitHub APIs\"\\n,\\n\n\\n    backstory\\n=\\n\"You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs\"\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    tools\\n=\\ntools\\n,\\n\n\\n    llm\\n=\\n \\n# pass an llm\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "crewai_agent = Agent(\n    role=\"GitHub Agent\",\n    goal=\"You take action on GitHub using GitHub APIs\",\n    backstory=\"You are AI agent that is responsible for taking actions on GitHub on behalf of users using GitHub APIs\",\n    verbose=True,\n    tools=tools,\n    llm= # pass an llm\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Star a repo composiohq/composio on GitHub\"\\n,\\n\n\\n    agent\\n=\\ncrewai_agent\\n,\\n\n\\n    expected_output\\n=\\n\"Status of the operation\"\\n,\\n\n\\n)\\n\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\ncrewai_agent\\n]\\n,\\n tasks\\n=\\n[\\ntask\\n]\\n)\\n\n\n\\ncrew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "task = Task(\n    description=\"Star a repo composiohq/composio on GitHub\",\n    agent=crewai_agent,\n    expected_output=\"Status of the operation\",\n)\n\ncrew = Crew(agents=[crewai_agent], tasks=[task])\n\ncrew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/composiotool",
            "topic": "​ComposioToolSet",
            "page_number": 7,
            "type": "code_block"
        }
    },
    {
        "content": "Understanding and logging your agent performance with AgentOps.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "AgentOps Integration",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,\nhow their agents are interacting with users, and how their agents use external tools and APIs.\nAgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Introduction",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "AgentOps provides session replays, metrics, and monitoring for agents.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​AgentOps",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.\nFor more info, check out the AgentOps Repo .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​AgentOps",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "AgentOps provides monitoring for agents in development and production.\nIt provides a dashboard for tracking agent performance, session replays, and custom reporting.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Overview",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.\nThis feature is useful for debugging and understanding how agents interact with users as well as other agents.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Overview",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Create a user API key here: Create API Key",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Introduction",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Add your API key to your environment variables:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Introduction",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "AGENTOPS_API_KEY\\n=\\n<\\nYOUR_AGENTOPS_API_KEY\\n>\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "AGENTOPS_API_KEY=<YOUR_AGENTOPS_API_KEY>",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[agentops]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[agentops]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "pip \\ninstall\\n agentops\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "pip install agentops",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "Before using Crew in your script, include these lines:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Introduction",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "import\\n agentops\\n\n\\nagentops\\n.\\ninit\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "import agentops\nagentops.init()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Code Example on AgentOps Integration - CrewAI",
            "page_number": 8,
            "type": "code_block"
        }
    },
    {
        "content": "This will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems,\ncheck out the AgentOps documentation or join the Discord .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Introduction",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Example of a Crew agent that generates job posts.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Job Posting",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Example of a Crew agent that validates Markdown files.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Markdown Validator",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Example of a Crew agent that generates Instagram posts.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "Instagram Post",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "To get started, create an AgentOps account .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Further Information",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/agentops-observability",
            "topic": "​Further Information",
            "page_number": 8,
            "type": "paragraph"
        }
    },
    {
        "content": "Detailed guide on managing and creating tasks within the CrewAI framework.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "Tasks",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "In the CrewAI framework, a Task is a specific assignment completed by an Agent .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Agent",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Tasks provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew’s process, enhancing teamwork and efficiency.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI Enterprise includes a Visual Task Builder in Crew Studio that simplifies complex task creation and chaining. Design your task flows visually and test them in real-time without writing code.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "The Visual Task Builder enables:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Tasks can be executed in two ways:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Execution Flow",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "The execution flow is defined when creating the crew:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Execution Flow",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nagent1\\n,\\n agent2\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask1\\n,\\n task2\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential  \\n# or Process.hierarchical\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "crew = Crew(\n    agents=[agent1, agent2],\n    tasks=[task1, task2],\n    process=Process.sequential  # or Process.hierarchical\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "description",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "str",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "expected_output",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "str",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "name",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[str]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "agent",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[BaseAgent]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "List[BaseTool]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[List[\"Task\"]]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "async_execution",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[bool]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "human_input",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[bool]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "config",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[Dict[str, Any]]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_file",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[str]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[Type[BaseModel]]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[Type[BaseModel]]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "callback",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[Any]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "There are two ways to create tasks in CrewAI: using YAML configuration (recommended) or defining them directly in code .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Creating Tasks",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Using YAML configuration provides a cleaner, more maintainable way to define tasks. We strongly recommend using this approach to define tasks in your CrewAI projects.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​YAML Configuration (Recommended)",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "After creating your CrewAI project as outlined in the Installation section, navigate to the src/latest_ai_development/config/tasks.yaml file and modify the template to match your specific task requirements.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​YAML Configuration (Recommended)",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "src/latest_ai_development/config/tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Variables in your YAML files (like {topic} ) will be replaced with values from your inputs when running the crew:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "{topic}",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "crew\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n'topic'\\n:\\n \\n'AI Agents'\\n}\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "Code Example on Tasks - CrewAI",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "crew.kickoff(inputs={'topic': 'AI Agents'})",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "Code Example on Tasks - CrewAI",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s an example of how to configure tasks using YAML:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​YAML Configuration (Recommended)",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "research_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    Conduct a thorough research about \\n{\\ntopic\\n}\\n\n\\n    Make sure you find any interesting and relevant information given\\n\n\\n    the current year is 2025.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    A list with 10 bullet points of the most relevant information about \\n{\\ntopic\\n}\\n\n\\n  \\nagent\\n:\\n researcher\\n\n\n\\nreporting_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    Review the context you got and expand each topic into a full section for a report.\\n\n\\n    Make sure the report is detailed and contains any and all relevant information.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    A fully fledge reports with the mains topics\\n,\\n each with a full section of information.\\n\n\\n    Formatted as markdown without '```'\\n\n\\n  \\nagent\\n:\\n reporting_analyst\\n\n\\n  \\noutput_file\\n:\\n report.md\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "research_task:\n  description: >\n    Conduct a thorough research about {topic}\n    Make sure you find any interesting and relevant information given\n    the current year is 2025.\n  expected_output: >\n    A list with 10 bullet points of the most relevant information about {topic}\n  agent: researcher\n\nreporting_task:\n  description: >\n    Review the context you got and expand each topic into a full section for a report.\n    Make sure the report is detailed and contains any and all relevant information.\n  expected_output: >\n    A fully fledge reports with the mains topics, each with a full section of information.\n    Formatted as markdown without '```'\n  agent: reporting_analyst\n  output_file: report.md",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "To use this YAML configuration in your code, create a crew class that inherits from CrewBase :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewBase",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\\n\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nproject \\nimport\\n CrewBase\\n,\\n agent\\n,\\n crew\\n,\\n task\\n\n\\nfrom\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\n@CrewBase\\n\n\\nclass\\n \\nLatestAiDevelopmentCrew\\n(\\n)\\n:\\n\n\\n  \\n\"\"\"LatestAiDevelopment crew\"\"\"\\n\n\n\\n  \\n@agent\\n\n\\n  \\ndef\\n \\nresearcher\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n      config\\n=\\nself\\n.\\nagents_config\\n[\\n'researcher'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n      verbose\\n=\\nTrue\\n,\\n\n\\n      tools\\n=\\n[\\nSerperDevTool\\n(\\n)\\n]\\n\n\\n    \\n)\\n\n\n\\n  \\n@agent\\n\n\\n  \\ndef\\n \\nreporting_analyst\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n      config\\n=\\nself\\n.\\nagents_config\\n[\\n'reporting_analyst'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n      verbose\\n=\\nTrue\\n\n\\n    \\n)\\n\n\n\\n  \\n@task\\n\n\\n  \\ndef\\n \\nresearch_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n    \\nreturn\\n Task\\n(\\n\n\\n      config\\n=\\nself\\n.\\ntasks_config\\n[\\n'research_task'\\n]\\n \\n# type: ignore[index]\\n\n\\n    \\n)\\n\n\n\\n  \\n@task\\n\n\\n  \\ndef\\n \\nreporting_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n    \\nreturn\\n Task\\n(\\n\n\\n      config\\n=\\nself\\n.\\ntasks_config\\n[\\n'reporting_task'\\n]\\n \\n# type: ignore[index]\\n\n\\n    \\n)\\n\n\n\\n  \\n@crew\\n\n\\n  \\ndef\\n \\ncrew\\n(\\nself\\n)\\n \\n-\\n>\\n Crew\\n:\\n\n\\n    \\nreturn\\n Crew\\n(\\n\n\\n      agents\\n=\\n[\\n\n\\n        self\\n.\\nresearcher\\n(\\n)\\n,\\n\n\\n        self\\n.\\nreporting_analyst\\n(\\n)\\n\n\\n      \\n]\\n,\\n\n\\n      tasks\\n=\\n[\\n\n\\n        self\\n.\\nresearch_task\\n(\\n)\\n,\\n\n\\n        self\\n.\\nreporting_task\\n(\\n)\\n\n\\n      \\n]\\n,\\n\n\\n      process\\n=\\nProcess\\n.\\nsequential\\n\n\\n    \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\n\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\nfrom crewai_tools import SerperDevTool\n\n@CrewBase\nclass LatestAiDevelopmentCrew():\n  \"\"\"LatestAiDevelopment crew\"\"\"\n\n  @agent\n  def researcher(self) -> Agent:\n    return Agent(\n      config=self.agents_config['researcher'], # type: ignore[index]\n      verbose=True,\n      tools=[SerperDevTool()]\n    )\n\n  @agent\n  def reporting_analyst(self) -> Agent:\n    return Agent(\n      config=self.agents_config['reporting_analyst'], # type: ignore[index]\n      verbose=True\n    )\n\n  @task\n  def research_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['research_task'] # type: ignore[index]\n    )\n\n  @task\n  def reporting_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['reporting_task'] # type: ignore[index]\n    )\n\n  @crew\n  def crew(self) -> Crew:\n    return Crew(\n      agents=[\n        self.researcher(),\n        self.reporting_analyst()\n      ],\n      tasks=[\n        self.research_task(),\n        self.reporting_task()\n      ],\n      process=Process.sequential\n    )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The names you use in your YAML files ( agents.yaml and tasks.yaml ) should match the method names in your Python code.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Alternatively, you can define tasks directly in your code without using YAML configuration:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Direct Code Definition (Alternative)",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Task\\n\n\n\\nresearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"\\n\n\\n        Conduct a thorough research about AI Agents\\n.\\n\n\\n        Make sure you find \\nany\\n interesting \\nand\\n relevant information given\\n\n\\n        the current year \\nis\\n \\n2025.\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"\"\\n\"\\n\n\\n        A \\nlist\\n \\nwith\\n \\n10\\n bullet points of the most relevant information about AI Agents\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    agent\\n=\\nresearcher\\n\n\\n)\\n\n\n\\nreporting_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"\\n\n\\n        Review the context you got \\nand\\n expand each topic into a full section \\nfor\\n a report\\n.\\n\n\\n        Make sure the report \\nis\\n detailed \\nand\\n contains \\nany\\n \\nand\\n \\nall\\n relevant information\\n.\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"\"\\n\"\\n\n\\n        A fully fledge reports \\nwith\\n the mains topics\\n,\\n each \\nwith\\n a full section of information\\n.\\n\n\\n        Formatted \\nas\\n markdown without \\n'```'\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    agent\\n=\\nreporting_analyst\\n,\\n\n\\n    output_file\\n=\\n\"report.md\"\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Task\n\nresearch_task = Task(\n    description=\"\"\"\n        Conduct a thorough research about AI Agents.\n        Make sure you find any interesting and relevant information given\n        the current year is 2025.\n    \"\"\",\n    expected_output=\"\"\"\n        A list with 10 bullet points of the most relevant information about AI Agents\n    \"\"\",\n    agent=researcher\n)\n\nreporting_task = Task(\n    description=\"\"\"\n        Review the context you got and expand each topic into a full section for a report.\n        Make sure the report is detailed and contains any and all relevant information.\n    \"\"\",\n    expected_output=\"\"\"\n        A fully fledge reports with the mains topics, each with a full section of information.\n        Formatted as markdown without '```'\n    \"\"\",\n    agent=reporting_analyst,\n    output_file=\"report.md\"\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Directly specify an agent for assignment or let the hierarchical CrewAI’s process decide based on roles, availability, etc.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "agent",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "hierarchical",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Understanding task outputs is crucial for building effective AI workflows. CrewAI provides a structured way to handle task results through the TaskOutput class, which supports multiple output formats and can be easily passed between tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Output",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "TaskOutput",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The output of a task in CrewAI framework is encapsulated within the TaskOutput class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Output",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "TaskOutput",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "By default, the TaskOutput will only include the raw output. A TaskOutput will only include the pydantic or json_dict output if the original Task object was configured with output_pydantic or output_json , respectively.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Output",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "TaskOutput",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "raw",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "TaskOutput",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "json_dict",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "description",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "str",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "summary",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[str]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "raw",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "str",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[BaseModel]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "json_dict",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Optional[Dict[str, Any]]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "agent",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "str",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_format",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "OutputFormat",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Once a task has been executed, its output can be accessed through the output attribute of the Task object. The TaskOutput class provides various ways to interact with and present this output.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Accessing Task Outputs",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "TaskOutput",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# Example task\\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Find and summarize the latest AI news'\\n,\\n\n\\n    expected_output\\n=\\n'A bullet list summary of the top 5 most important AI news'\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n\n\\n)\\n\n\n\\n# Execute the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nresearch_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\n# Accessing the task output\\n\n\\ntask_output \\n=\\n task\\n.\\noutput\\n\n\n\\nprint\\n(\\nf\"Task Description: \\n{\\ntask_output\\n.\\ndescription\\n}\\n\"\\n)\\n\n\\nprint\\n(\\nf\"Task Summary: \\n{\\ntask_output\\n.\\nsummary\\n}\\n\"\\n)\\n\n\\nprint\\n(\\nf\"Raw Output: \\n{\\ntask_output\\n.\\nraw\\n}\\n\"\\n)\\n\n\\nif\\n task_output\\n.\\njson_dict\\n:\\n\n\\n    \\nprint\\n(\\nf\"JSON Output: \\n{\\njson\\n.\\ndumps\\n(\\ntask_output\\n.\\njson_dict\\n,\\n indent\\n=\\n2\\n)\\n}\\n\"\\n)\\n\n\\nif\\n task_output\\n.\\npydantic\\n:\\n\n\\n    \\nprint\\n(\\nf\"Pydantic Output: \\n{\\ntask_output\\n.\\npydantic\\n}\\n\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# Example task\ntask = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool]\n)\n\n# Execute the crew\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task],\n    verbose=True\n)\n\nresult = crew.kickoff()\n\n# Accessing the task output\ntask_output = task.output\n\nprint(f\"Task Description: {task_output.description}\")\nprint(f\"Task Summary: {task_output.summary}\")\nprint(f\"Raw Output: {task_output.raw}\")\nif task_output.json_dict:\n    print(f\"JSON Output: {json.dumps(task_output.json_dict, indent=2)}\")\nif task_output.pydantic:\n    print(f\"Pydantic Output: {task_output.pydantic}\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Tasks can depend on the output of other tasks using the context attribute. For example:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Dependencies and Context",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "research_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Research the latest developments in AI\"\\n,\\n\n\\n    expected_output\\n=\\n\"A list of recent AI developments\"\\n,\\n\n\\n    agent\\n=\\nresearcher\\n\n\\n)\\n\n\n\\nanalysis_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Analyze the research findings and identify key trends\"\\n,\\n\n\\n    expected_output\\n=\\n\"Analysis report of AI trends\"\\n,\\n\n\\n    agent\\n=\\nanalyst\\n,\\n\n\\n    context\\n=\\n[\\nresearch_task\\n]\\n  \\n# This task will wait for research_task to complete\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "research_task = Task(\n    description=\"Research the latest developments in AI\",\n    expected_output=\"A list of recent AI developments\",\n    agent=researcher\n)\n\nanalysis_task = Task(\n    description=\"Analyze the research findings and identify key trends\",\n    expected_output=\"Analysis report of AI trends\",\n    agent=analyst,\n    context=[research_task]  # This task will wait for research_task to complete\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Task guardrails provide a way to validate and transform task outputs before they\nare passed to the next task. This feature helps ensure data quality and provides\nfeedback to agents when their output doesn’t meet specific criteria.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Guardrails",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "To add a guardrail to a task, provide a validation function through the guardrail parameter:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Using Task Guardrails",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "guardrail",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n typing \\nimport\\n Tuple\\n,\\n Union\\n,\\n Dict\\n,\\n Any\\n\n\\nfrom\\n crewai \\nimport\\n TaskOutput\\n\n\n\\ndef\\n \\nvalidate_blog_content\\n(\\nresult\\n:\\n TaskOutput\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Any\\n]\\n:\\n\n\\n    \\n\"\"\"Validate blog content meets requirements.\"\"\"\\n\n\\n    \\ntry\\n:\\n\n\\n        \\n# Check word count\\n\n\\n        word_count \\n=\\n \\nlen\\n(\\nresult\\n.\\nsplit\\n(\\n)\\n)\\n\n\\n        \\nif\\n word_count \\n>\\n \\n200\\n:\\n\n\\n            \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Blog content exceeds 200 words\"\\n)\\n\n\n\\n        \\n# Additional validation logic here\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n result\\n.\\nstrip\\n(\\n)\\n)\\n\n\\n    \\nexcept\\n Exception \\nas\\n e\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Unexpected error during validation\"\\n)\\n\n\n\\nblog_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Write a blog post about AI\"\\n,\\n\n\\n    expected_output\\n=\\n\"A blog post under 200 words\"\\n,\\n\n\\n    agent\\n=\\nblog_agent\\n,\\n\n\\n    guardrail\\n=\\nvalidate_blog_content  \\n# Add the guardrail function\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from typing import Tuple, Union, Dict, Any\nfrom crewai import TaskOutput\n\ndef validate_blog_content(result: TaskOutput) -> Tuple[bool, Any]:\n    \"\"\"Validate blog content meets requirements.\"\"\"\n    try:\n        # Check word count\n        word_count = len(result.split())\n        if word_count > 200:\n            return (False, \"Blog content exceeds 200 words\")\n\n        # Additional validation logic here\n        return (True, result.strip())\n    except Exception as e:\n        return (False, \"Unexpected error during validation\")\n\nblog_task = Task(\n    description=\"Write a blog post about AI\",\n    expected_output=\"A blog post under 200 words\",\n    agent=blog_agent,\n    guardrail=validate_blog_content  # Add the guardrail function\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(bool, Any)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(bool, Any)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(True, validated_result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(bool, str)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(False, \"Error message explain the failure\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The LLMGuardrail class offers a robust mechanism for validating task outputs.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​LLMGuardrail",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "LLMGuardrail",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n TaskOutput\\n\n\n\\ndef\\n \\nvalidate_with_context\\n(\\nresult\\n:\\n TaskOutput\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Any\\n]\\n:\\n\n\\n    \\ntry\\n:\\n\n\\n        \\n# Main validation logic\\n\n\\n        validated_data \\n=\\n perform_validation\\n(\\nresult\\n)\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n validated_data\\n)\\n\n\\n    \\nexcept\\n ValidationError \\nas\\n e\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\nf\"VALIDATION_ERROR: \\n{\\nstr\\n(\\ne\\n)\\n}\\n\"\\n)\\n\n\\n    \\nexcept\\n Exception \\nas\\n e\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\nstr\\n(\\ne\\n)\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import TaskOutput\n\ndef validate_with_context(result: TaskOutput) -> Tuple[bool, Any]:\n    try:\n        # Main validation logic\n        validated_data = perform_validation(result)\n        return (True, validated_data)\n    except ValidationError as e:\n        return (False, f\"VALIDATION_ERROR: {str(e)}\")\n    except Exception as e:\n        return (False, str(e))",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n typing \\nimport\\n Any\\n,\\n Dict\\n,\\n List\\n,\\n Tuple\\n,\\n Union\\n\n\\nfrom\\n crewai \\nimport\\n TaskOutput\\n\n\n\\ndef\\n \\ncomplex_validation\\n(\\nresult\\n:\\n TaskOutput\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Any\\n]\\n:\\n\n\\n    \\n\"\"\"Chain multiple validation steps.\"\"\"\\n\n\\n    \\n# Step 1: Basic validation\\n\n\\n    \\nif\\n \\nnot\\n result\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Empty result\"\\n)\\n\n\n\\n    \\n# Step 2: Content validation\\n\n\\n    \\ntry\\n:\\n\n\\n        validated \\n=\\n validate_content\\n(\\nresult\\n)\\n\n\\n        \\nif\\n \\nnot\\n validated\\n:\\n\n\\n            \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Invalid content\"\\n)\\n\n\n\\n        \\n# Step 3: Format validation\\n\n\\n        formatted \\n=\\n format_output\\n(\\nvalidated\\n)\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n formatted\\n)\\n\n\\n    \\nexcept\\n Exception \\nas\\n e\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\nstr\\n(\\ne\\n)\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from typing import Any, Dict, List, Tuple, Union\nfrom crewai import TaskOutput\n\ndef complex_validation(result: TaskOutput) -> Tuple[bool, Any]:\n    \"\"\"Chain multiple validation steps.\"\"\"\n    # Step 1: Basic validation\n    if not result:\n        return (False, \"Empty result\")\n\n    # Step 2: Content validation\n    try:\n        validated = validate_content(result)\n        if not validated:\n            return (False, \"Invalid content\")\n\n        # Step 3: Format validation\n        formatted = format_output(validated)\n        return (True, formatted)\n    except Exception as e:\n        return (False, str(e))",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "When a guardrail returns (False, error) :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Handling Guardrail Results",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "(False, error)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(True, result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n typing \\nimport\\n Optional\\n,\\n Tuple\\n,\\n Union\\n\n\\nfrom\\n crewai \\nimport\\n TaskOutput\\n,\\n Task\\n\n\n\\ndef\\n \\nvalidate_json_output\\n(\\nresult\\n:\\n TaskOutput\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Any\\n]\\n:\\n\n\\n    \\n\"\"\"Validate and parse JSON output.\"\"\"\\n\n\\n    \\ntry\\n:\\n\n\\n        \\n# Try to parse as JSON\\n\n\\n        data \\n=\\n json\\n.\\nloads\\n(\\nresult\\n)\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n data\\n)\\n\n\\n    \\nexcept\\n json\\n.\\nJSONDecodeError \\nas\\n e\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Invalid JSON format\"\\n)\\n\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Generate a JSON report\"\\n,\\n\n\\n    expected_output\\n=\\n\"A valid JSON object\"\\n,\\n\n\\n    agent\\n=\\nanalyst\\n,\\n\n\\n    guardrail\\n=\\nvalidate_json_output\\n,\\n\n\\n    max_retries\\n=\\n3\\n  \\n# Limit retry attempts\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from typing import Optional, Tuple, Union\nfrom crewai import TaskOutput, Task\n\ndef validate_json_output(result: TaskOutput) -> Tuple[bool, Any]:\n    \"\"\"Validate and parse JSON output.\"\"\"\n    try:\n        # Try to parse as JSON\n        data = json.loads(result)\n        return (True, data)\n    except json.JSONDecodeError as e:\n        return (False, \"Invalid JSON format\")\n\ntask = Task(\n    description=\"Generate a JSON report\",\n    expected_output=\"A valid JSON object\",\n    agent=analyst,\n    guardrail=validate_json_output,\n    max_retries=3  # Limit retry attempts\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "It’s also important to note that the output of the final task of a crew becomes the final output of the actual crew itself.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output_pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The output_pydantic property allows you to define a Pydantic model that the task output should conform to. This ensures that the output is not only structured but also validated according to the Pydantic model.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Usingoutput_pydantic",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output_pydantic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s an example demonstrating how to use output_pydantic:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Usingoutput_pydantic",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n json\\n\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n pydantic \\nimport\\n BaseModel\\n\n\n\n\\nclass\\n \\nBlog\\n(\\nBaseModel\\n)\\n:\\n\n\\n    title\\n:\\n \\nstr\\n\n\\n    content\\n:\\n \\nstr\\n\n\n\n\\nblog_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Blog Content Generator Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Generate a blog title and content\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\"You are an expert content creator, skilled in crafting engaging and informative blog posts.\"\"\"\\n,\\n\n\\n    verbose\\n=\\nFalse\\n,\\n\n\\n    allow_delegation\\n=\\nFalse\\n,\\n\n\\n    llm\\n=\\n\"gpt-4o\"\\n,\\n\n\\n)\\n\n\n\\ntask1 \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\"Create a blog title and content on a given topic. Make sure the content is under 200 words.\"\"\"\\n,\\n\n\\n    expected_output\\n=\\n\"A compelling blog title and well-written content.\"\\n,\\n\n\\n    agent\\n=\\nblog_agent\\n,\\n\n\\n    output_pydantic\\n=\\nBlog\\n,\\n\n\\n)\\n\n\n\\n# Instantiate your crew with a sequential process\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nblog_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask1\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n)\\n\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 1\"\\n)\\n\n\\ntitle \\n=\\n result\\n[\\n\"title\"\\n]\\n\n\\ncontent \\n=\\n result\\n[\\n\"content\"\\n]\\n\n\\nprint\\n(\\n\"Title:\"\\n,\\n title\\n)\\n\n\\nprint\\n(\\n\"Content:\"\\n,\\n content\\n)\\n\n\n\\n# Option 2: Accessing Properties Directly from the Pydantic Model\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 2\"\\n)\\n\n\\ntitle \\n=\\n result\\n.\\npydantic\\n.\\ntitle\\n\n\\ncontent \\n=\\n result\\n.\\npydantic\\n.\\ncontent\\n\n\\nprint\\n(\\n\"Title:\"\\n,\\n title\\n)\\n\n\\nprint\\n(\\n\"Content:\"\\n,\\n content\\n)\\n\n\n\\n# Option 3: Accessing Properties Using the to_dict() Method\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 3\"\\n)\\n\n\\noutput_dict \\n=\\n result\\n.\\nto_dict\\n(\\n)\\n\n\\ntitle \\n=\\n output_dict\\n[\\n\"title\"\\n]\\n\n\\ncontent \\n=\\n output_dict\\n[\\n\"content\"\\n]\\n\n\\nprint\\n(\\n\"Title:\"\\n,\\n title\\n)\\n\n\\nprint\\n(\\n\"Content:\"\\n,\\n content\\n)\\n\n\n\\n# Option 4: Printing the Entire Blog Object\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 5\"\\n)\\n\n\\nprint\\n(\\n\"Blog:\"\\n,\\n result\\n)\\n\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "import json\n\nfrom crewai import Agent, Crew, Process, Task\nfrom pydantic import BaseModel\n\n\nclass Blog(BaseModel):\n    title: str\n    content: str\n\n\nblog_agent = Agent(\n    role=\"Blog Content Generator Agent\",\n    goal=\"Generate a blog title and content\",\n    backstory=\"\"\"You are an expert content creator, skilled in crafting engaging and informative blog posts.\"\"\",\n    verbose=False,\n    allow_delegation=False,\n    llm=\"gpt-4o\",\n)\n\ntask1 = Task(\n    description=\"\"\"Create a blog title and content on a given topic. Make sure the content is under 200 words.\"\"\",\n    expected_output=\"A compelling blog title and well-written content.\",\n    agent=blog_agent,\n    output_pydantic=Blog,\n)\n\n# Instantiate your crew with a sequential process\ncrew = Crew(\n    agents=[blog_agent],\n    tasks=[task1],\n    verbose=True,\n    process=Process.sequential,\n)\n\nresult = crew.kickoff()\n\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\nprint(\"Accessing Properties - Option 1\")\ntitle = result[\"title\"]\ncontent = result[\"content\"]\nprint(\"Title:\", title)\nprint(\"Content:\", content)\n\n# Option 2: Accessing Properties Directly from the Pydantic Model\nprint(\"Accessing Properties - Option 2\")\ntitle = result.pydantic.title\ncontent = result.pydantic.content\nprint(\"Title:\", title)\nprint(\"Content:\", content)\n\n# Option 3: Accessing Properties Using the to_dict() Method\nprint(\"Accessing Properties - Option 3\")\noutput_dict = result.to_dict()\ntitle = output_dict[\"title\"]\ncontent = output_dict[\"content\"]\nprint(\"Title:\", title)\nprint(\"Content:\", content)\n\n# Option 4: Printing the Entire Blog Object\nprint(\"Accessing Properties - Option 5\")\nprint(\"Blog:\", result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "output_json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The output_json property allows you to define the expected output in JSON format. This ensures that the task’s output is a valid JSON structure that can be easily parsed and used in your application.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Usingoutput_json",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output_json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s an example demonstrating how to use output_json :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Usingoutput_json",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output_json",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "import\\n json\\n\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n pydantic \\nimport\\n BaseModel\\n\n\n\n\\n# Define the Pydantic model for the blog\\n\n\\nclass\\n \\nBlog\\n(\\nBaseModel\\n)\\n:\\n\n\\n    title\\n:\\n \\nstr\\n\n\\n    content\\n:\\n \\nstr\\n\n\n\n\\n# Define the agent\\n\n\\nblog_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Blog Content Generator Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Generate a blog title and content\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\"You are an expert content creator, skilled in crafting engaging and informative blog posts.\"\"\"\\n,\\n\n\\n    verbose\\n=\\nFalse\\n,\\n\n\\n    allow_delegation\\n=\\nFalse\\n,\\n\n\\n    llm\\n=\\n\"gpt-4o\"\\n,\\n\n\\n)\\n\n\n\\n# Define the task with output_json set to the Blog model\\n\n\\ntask1 \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\"Create a blog title and content on a given topic. Make sure the content is under 200 words.\"\"\"\\n,\\n\n\\n    expected_output\\n=\\n\"A JSON object with 'title' and 'content' fields.\"\\n,\\n\n\\n    agent\\n=\\nblog_agent\\n,\\n\n\\n    output_json\\n=\\nBlog\\n,\\n\n\\n)\\n\n\n\\n# Instantiate the crew with a sequential process\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nblog_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask1\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n)\\n\n\n\\n# Kickoff the crew to execute the task\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 1\"\\n)\\n\n\\ntitle \\n=\\n result\\n[\\n\"title\"\\n]\\n\n\\ncontent \\n=\\n result\\n[\\n\"content\"\\n]\\n\n\\nprint\\n(\\n\"Title:\"\\n,\\n title\\n)\\n\n\\nprint\\n(\\n\"Content:\"\\n,\\n content\\n)\\n\n\n\\n# Option 2: Printing the Entire Blog Object\\n\n\\nprint\\n(\\n\"Accessing Properties - Option 2\"\\n)\\n\n\\nprint\\n(\\n\"Blog:\"\\n,\\n result\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "import json\n\nfrom crewai import Agent, Crew, Process, Task\nfrom pydantic import BaseModel\n\n\n# Define the Pydantic model for the blog\nclass Blog(BaseModel):\n    title: str\n    content: str\n\n\n# Define the agent\nblog_agent = Agent(\n    role=\"Blog Content Generator Agent\",\n    goal=\"Generate a blog title and content\",\n    backstory=\"\"\"You are an expert content creator, skilled in crafting engaging and informative blog posts.\"\"\",\n    verbose=False,\n    allow_delegation=False,\n    llm=\"gpt-4o\",\n)\n\n# Define the task with output_json set to the Blog model\ntask1 = Task(\n    description=\"\"\"Create a blog title and content on a given topic. Make sure the content is under 200 words.\"\"\",\n    expected_output=\"A JSON object with 'title' and 'content' fields.\",\n    agent=blog_agent,\n    output_json=Blog,\n)\n\n# Instantiate the crew with a sequential process\ncrew = Crew(\n    agents=[blog_agent],\n    tasks=[task1],\n    verbose=True,\n    process=Process.sequential,\n)\n\n# Kickoff the crew to execute the task\nresult = crew.kickoff()\n\n# Option 1: Accessing Properties Using Dictionary-Style Indexing\nprint(\"Accessing Properties - Option 1\")\ntitle = result[\"title\"]\ncontent = result[\"content\"]\nprint(\"Title:\", title)\nprint(\"Content:\", content)\n\n# Option 2: Printing the Entire Blog Object\nprint(\"Accessing Properties - Option 2\")\nprint(\"Blog:\", result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "By using output_pydantic or output_json, you ensure that your tasks produce outputs in a consistent and structured format, making it easier to process and utilize the data within your application or across multiple tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Explanation of Accessing the Output",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Leverage tools from the CrewAI Toolkit and LangChain Tools for enhanced task performance and agent interaction.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Integrating Tools with Tasks",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n os\\n\n\\nos\\n.\\nenviron\\n[\\n\"OPENAI_API_KEY\"\\n]\\n \\n=\\n \\n\"Your Key\"\\n\n\\nos\\n.\\nenviron\\n[\\n\"SERPER_API_KEY\"\\n]\\n \\n=\\n \\n\"Your Key\"\\n \\n# serper.dev API key\\n\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\nresearch_agent \\n=\\n Agent\\n(\\n\n\\n  role\\n=\\n'Researcher'\\n,\\n\n\\n  goal\\n=\\n'Find and summarize the latest AI news'\\n,\\n\n\\n  backstory\\n=\\n\"\"\\n\"You're a researcher at a large company\\n.\\n\n\\n  You're responsible \\nfor\\n analyzing data \\nand\\n providing insights\\n\n\\n  to the business\\n.\\n\"\"\\n\"\\n,\\n\n\\n  verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\n# to perform a semantic search for a specified query from a text's content across the internet\\n\n\\nsearch_tool \\n=\\n SerperDevTool\\n(\\n)\\n\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n  description\\n=\\n'Find and summarize the latest AI news'\\n,\\n\n\\n  expected_output\\n=\\n'A bullet list summary of the top 5 most important AI news'\\n,\\n\n\\n  agent\\n=\\nresearch_agent\\n,\\n\n\\n  tools\\n=\\n[\\nsearch_tool\\n]\\n\n\\n)\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nresearch_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\\nprint\\n(\\nresult\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nos.environ[\"OPENAI_API_KEY\"] = \"Your Key\"\nos.environ[\"SERPER_API_KEY\"] = \"Your Key\" # serper.dev API key\n\nfrom crewai import Agent, Task, Crew\nfrom crewai_tools import SerperDevTool\n\nresearch_agent = Agent(\n  role='Researcher',\n  goal='Find and summarize the latest AI news',\n  backstory=\"\"\"You're a researcher at a large company.\n  You're responsible for analyzing data and providing insights\n  to the business.\"\"\",\n  verbose=True\n)\n\n# to perform a semantic search for a specified query from a text's content across the internet\nsearch_tool = SerperDevTool()\n\ntask = Task(\n  description='Find and summarize the latest AI news',\n  expected_output='A bullet list summary of the top 5 most important AI news',\n  agent=research_agent,\n  tools=[search_tool]\n)\n\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task],\n    verbose=True\n)\n\nresult = crew.kickoff()\nprint(result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "This demonstrates how tasks with specific tools can override an agent’s default set for tailored task execution.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Creating a Task with Tools",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks’ output, including multiple, should be used as context for another task.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Referring to Other Tasks",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the context attribute of the task:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Referring to Other Tasks",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\\n\n\n\\nresearch_ai_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Research the latest developments in AI\"\\n,\\n\n\\n    expected_output\\n=\\n\"A list of recent AI developments\"\\n,\\n\n\\n    async_execution\\n=\\nTrue\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n\n\\n)\\n\n\n\\nresearch_ops_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Research the latest developments in AI Ops\"\\n,\\n\n\\n    expected_output\\n=\\n\"A list of recent AI Ops developments\"\\n,\\n\n\\n    async_execution\\n=\\nTrue\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n\n\\n)\\n\n\n\\nwrite_blog_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Write a full blog post about the importance of AI and its latest news\"\\n,\\n\n\\n    expected_output\\n=\\n\"Full blog post that is 4 paragraphs long\"\\n,\\n\n\\n    agent\\n=\\nwriter_agent\\n,\\n\n\\n    context\\n=\\n[\\nresearch_ai_task\\n,\\n research_ops_task\\n]\\n\n\\n)\\n\n\n\\n#...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\n\nresearch_ai_task = Task(\n    description=\"Research the latest developments in AI\",\n    expected_output=\"A list of recent AI developments\",\n    async_execution=True,\n    agent=research_agent,\n    tools=[search_tool]\n)\n\nresearch_ops_task = Task(\n    description=\"Research the latest developments in AI Ops\",\n    expected_output=\"A list of recent AI Ops developments\",\n    async_execution=True,\n    agent=research_agent,\n    tools=[search_tool]\n)\n\nwrite_blog_task = Task(\n    description=\"Write a full blog post about the importance of AI and its latest news\",\n    expected_output=\"Full blog post that is 4 paragraphs long\",\n    agent=writer_agent,\n    context=[research_ai_task, research_ops_task]\n)\n\n#...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Asynchronous Execution",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "You can then use the context attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Asynchronous Execution",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "context",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "#...\\n\n\n\\nlist_ideas \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"List of 5 interesting ideas to explore for an article about AI.\"\\n,\\n\n\\n    expected_output\\n=\\n\"Bullet point list of 5 ideas for an article.\"\\n,\\n\n\\n    agent\\n=\\nresearcher\\n,\\n\n\\n    async_execution\\n=\\nTrue\\n \\n# Will be executed asynchronously\\n\n\\n)\\n\n\n\\nlist_important_history \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Research the history of AI and give me the 5 most important events.\"\\n,\\n\n\\n    expected_output\\n=\\n\"Bullet point list of 5 important events.\"\\n,\\n\n\\n    agent\\n=\\nresearcher\\n,\\n\n\\n    async_execution\\n=\\nTrue\\n \\n# Will be executed asynchronously\\n\n\\n)\\n\n\n\\nwrite_article \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Write an article about AI, its history, and interesting ideas.\"\\n,\\n\n\\n    expected_output\\n=\\n\"A 4 paragraph article about AI.\"\\n,\\n\n\\n    agent\\n=\\nwriter\\n,\\n\n\\n    context\\n=\\n[\\nlist_ideas\\n,\\n list_important_history\\n]\\n \\n# Will wait for the output of the two tasks to be completed\\n\n\\n)\\n\n\n\\n#...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "#...\n\nlist_ideas = Task(\n    description=\"List of 5 interesting ideas to explore for an article about AI.\",\n    expected_output=\"Bullet point list of 5 ideas for an article.\",\n    agent=researcher,\n    async_execution=True # Will be executed asynchronously\n)\n\nlist_important_history = Task(\n    description=\"Research the history of AI and give me the 5 most important events.\",\n    expected_output=\"Bullet point list of 5 important events.\",\n    agent=researcher,\n    async_execution=True # Will be executed asynchronously\n)\n\nwrite_article = Task(\n    description=\"Write an article about AI, its history, and interesting ideas.\",\n    expected_output=\"A 4 paragraph article about AI.\",\n    agent=writer,\n    context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed\n)\n\n#...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task’s outcome.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Callback Mechanism",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "# ...\\n\n\n\\ndef\\n \\ncallback_function\\n(\\noutput\\n:\\n TaskOutput\\n)\\n:\\n\n\\n    \\n# Do something after the task is completed\\n\n\\n    \\n# Example: Send an email to the manager\\n\n\\n    \\nprint\\n(\\nf\"\"\\n\"\\n\n\\n        Task completed!\\n\n\\n        Task\\n:\\n \\n{\\noutput\\n.\\ndescription\\n}\\n\n\\n        Output\\n:\\n \\n{\\noutput\\n.\\nraw\\n}\\n\n\\n    \\n\"\"\\n\"\\n)\\n\n\n\\nresearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Find and summarize the latest AI news'\\n,\\n\n\\n    expected_output\\n=\\n'A bullet list summary of the top 5 most important AI news'\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n,\\n\n\\n    callback\\n=\\ncallback_function\\n\n\\n)\\n\n\n\\n#...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\n\ndef callback_function(output: TaskOutput):\n    # Do something after the task is completed\n    # Example: Send an email to the manager\n    print(f\"\"\"\n        Task completed!\n        Task: {output.description}\n        Output: {output.raw}\n    \"\"\")\n\nresearch_task = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool],\n    callback=callback_function\n)\n\n#...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Once a crew finishes running, you can access the output of a specific task by using the output attribute of the task object:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Accessing a Specific Task Output",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "output",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\\n\n\\ntask1 \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Find and summarize the latest AI news'\\n,\\n\n\\n    expected_output\\n=\\n'A bullet list summary of the top 5 most important AI news'\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n\n\\n)\\n\n\n\\n#...\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nresearch_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask1\\n,\\n task2\\n,\\n task3\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\n# Returns a TaskOutput object with the description and results of the task\\n\n\\nprint\\n(\\nf\"\"\\n\"\\n\n\\n    Task completed!\\n\n\\n    Task\\n:\\n \\n{\\ntask1\\n.\\noutput\\n.\\ndescription\\n}\\n\n\\n    Output\\n:\\n \\n{\\ntask1\\n.\\noutput\\n.\\nraw\\n}\\n\n\\n\"\"\\n\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\ntask1 = Task(\n    description='Find and summarize the latest AI news',\n    expected_output='A bullet list summary of the top 5 most important AI news',\n    agent=research_agent,\n    tools=[search_tool]\n)\n\n#...\n\ncrew = Crew(\n    agents=[research_agent],\n    tasks=[task1, task2, task3],\n    verbose=True\n)\n\nresult = crew.kickoff()\n\n# Returns a TaskOutput object with the description and results of the task\nprint(f\"\"\"\n    Task completed!\n    Task: {task1.output.description}\n    Output: {task1.output.raw}\n\"\"\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI’s flexibility.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Tool Override Mechanism",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Error Handling and Validation Mechanisms",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "id",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "These validations help in maintaining the consistency and reliability of task executions within the crewAI framework.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Error Handling and Validation Mechanisms",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Task guardrails provide a powerful way to validate, transform, or filter task outputs before they are passed to the next task. Guardrails are optional functions that execute before the next task starts, allowing you to ensure that task outputs meet specific requirements or formats.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Task Guardrails",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n typing \\nimport\\n Tuple\\n,\\n Union\\n\n\\nfrom\\n crewai \\nimport\\n Task\\n\n\n\\ndef\\n \\nvalidate_json_output\\n(\\nresult\\n:\\n \\nstr\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Union\\n[\\ndict\\n,\\n \\nstr\\n]\\n]\\n:\\n\n\\n    \\n\"\"\"Validate that the output is valid JSON.\"\"\"\\n\n\\n    \\ntry\\n:\\n\n\\n        json_data \\n=\\n json\\n.\\nloads\\n(\\nresult\\n)\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n json_data\\n)\\n\n\\n    \\nexcept\\n json\\n.\\nJSONDecodeError\\n:\\n\n\\n        \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Output must be valid JSON\"\\n)\\n\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Generate JSON data\"\\n,\\n\n\\n    expected_output\\n=\\n\"Valid JSON object\"\\n,\\n\n\\n    guardrail\\n=\\nvalidate_json_output\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from typing import Tuple, Union\nfrom crewai import Task\n\ndef validate_json_output(result: str) -> Tuple[bool, Union[dict, str]]:\n    \"\"\"Validate that the output is valid JSON.\"\"\"\n    try:\n        json_data = json.loads(result)\n        return (True, json_data)\n    except json.JSONDecodeError:\n        return (False, \"Output must be valid JSON\")\n\ntask = Task(\n    description=\"Generate JSON data\",\n    expected_output=\"Valid JSON object\",\n    guardrail=validate_json_output\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Task\\n\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Generate JSON data\"\\n,\\n\n\\n    expected_output\\n=\\n\"Valid JSON object\"\\n,\\n\n\\n    guardrail\\n=\\n\"Ensure the response is a valid JSON object\"\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Task\n\ntask = Task(\n    description=\"Generate JSON data\",\n    expected_output=\"Valid JSON object\",\n    guardrail=\"Ensure the response is a valid JSON object\"\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "research_task\\n:\\n\n\\n  \\n...\\n\n\\n  \\nguardrail\\n:\\n make sure each bullet contains a minimum of 100 words\\n\n\\n  \\n...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "research_task:\n  ...\n  guardrail: make sure each bullet contains a minimum of 100 words\n  ...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "@CrewBase\\n\n\\nclass\\n \\nInternalCrew\\n:\\n\n\\n    agents_config \\n=\\n \\n\"config/agents.yaml\"\\n\n\\n    tasks_config \\n=\\n \\n\"config/tasks.yaml\"\\n\n\n\\n    \\n.\\n.\\n.\\n\n\\n    \\n@task\\n\n\\n    \\ndef\\n \\nresearch_task\\n(\\nself\\n)\\n:\\n\n\\n        \\nreturn\\n Task\\n(\\nconfig\\n=\\nself\\n.\\ntasks_config\\n[\\n\"research_task\"\\n]\\n)\\n  \\n# type: ignore[index]\\n\n\\n    \\n.\\n.\\n.\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "@CrewBase\nclass InternalCrew:\n    agents_config = \"config/agents.yaml\"\n    tasks_config = \"config/tasks.yaml\"\n\n    ...\n    @task\n    def research_task(self):\n        return Task(config=self.tasks_config[\"research_task\"])  # type: ignore[index]\n    ...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Task\\n\n\\nfrom\\n crewai\\n.\\nllm \\nimport\\n LLM\\n\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Generate JSON data\"\\n,\\n\n\\n    expected_output\\n=\\n\"Valid JSON object\"\\n,\\n\n\\n    guardrail\\n=\\nLLMGuardrail\\n(\\n\n\\n        description\\n=\\n\"Ensure the response is a valid JSON object\"\\n,\\n\n\\n        llm\\n=\\nLLM\\n(\\nmodel\\n=\\n\"gpt-4o-mini\"\\n)\\n,\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Task\nfrom crewai.llm import LLM\n\ntask = Task(\n    description=\"Generate JSON data\",\n    expected_output=\"Valid JSON object\",\n    guardrail=LLMGuardrail(\n        description=\"Ensure the response is a valid JSON object\",\n        llm=LLM(model=\"gpt-4o-mini\"),\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "(success, data)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "success",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "data",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "success",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "False",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "data",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "False",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def\\n \\nvalidate_email_format\\n(\\nresult\\n:\\n \\nstr\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Union\\n[\\nstr\\n,\\n \\nstr\\n]\\n]\\n:\\n\n\\n    \\n\"\"\"Ensure the output contains a valid email address.\"\"\"\\n\n\\n    \\nimport\\n re\\n\n\\n    email_pattern \\n=\\n \\nr'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\\n\n\\n    \\nif\\n re\\n.\\nmatch\\n(\\nemail_pattern\\n,\\n result\\n.\\nstrip\\n(\\n)\\n)\\n:\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n result\\n.\\nstrip\\n(\\n)\\n)\\n\n\\n    \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Output must be a valid email address\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def validate_email_format(result: str) -> Tuple[bool, Union[str, str]]:\n    \"\"\"Ensure the output contains a valid email address.\"\"\"\n    import re\n    email_pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    if re.match(email_pattern, result.strip()):\n        return (True, result.strip())\n    return (False, \"Output must be a valid email address\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def\\n \\nfilter_sensitive_info\\n(\\nresult\\n:\\n \\nstr\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Union\\n[\\nstr\\n,\\n \\nstr\\n]\\n]\\n:\\n\n\\n    \\n\"\"\"Remove or validate sensitive information.\"\"\"\\n\n\\n    sensitive_patterns \\n=\\n \\n[\\n'SSN:'\\n,\\n \\n'password:'\\n,\\n \\n'secret:'\\n]\\n\n\\n    \\nfor\\n pattern \\nin\\n sensitive_patterns\\n:\\n\n\\n        \\nif\\n pattern\\n.\\nlower\\n(\\n)\\n \\nin\\n result\\n.\\nlower\\n(\\n)\\n:\\n\n\\n            \\nreturn\\n \\n(\\nFalse\\n,\\n \\nf\"Output contains sensitive information (\\n{\\npattern\\n}\\n)\"\\n)\\n\n\\n    \\nreturn\\n \\n(\\nTrue\\n,\\n result\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def filter_sensitive_info(result: str) -> Tuple[bool, Union[str, str]]:\n    \"\"\"Remove or validate sensitive information.\"\"\"\n    sensitive_patterns = ['SSN:', 'password:', 'secret:']\n    for pattern in sensitive_patterns:\n        if pattern.lower() in result.lower():\n            return (False, f\"Output contains sensitive information ({pattern})\")\n    return (True, result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def\\n \\nnormalize_phone_number\\n(\\nresult\\n:\\n \\nstr\\n)\\n \\n-\\n>\\n Tuple\\n[\\nbool\\n,\\n Union\\n[\\nstr\\n,\\n \\nstr\\n]\\n]\\n:\\n\n\\n    \\n\"\"\"Ensure phone numbers are in a consistent format.\"\"\"\\n\n\\n    \\nimport\\n re\\n\n\\n    digits \\n=\\n re\\n.\\nsub\\n(\\nr'\\D'\\n,\\n \\n''\\n,\\n result\\n)\\n\n\\n    \\nif\\n \\nlen\\n(\\ndigits\\n)\\n \\n==\\n \\n10\\n:\\n\n\\n        formatted \\n=\\n \\nf\"(\\n{\\ndigits\\n[\\n:\\n3]\\n}\\n) \\n{\\ndigits\\n[\\n3\\n:\\n6]\\n}\\n-\\n{\\ndigits\\n[\\n6\\n:\\n]\\n}\\n\"\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n formatted\\n)\\n\n\\n    \\nreturn\\n \\n(\\nFalse\\n,\\n \\n\"Output must be a 10-digit phone number\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def normalize_phone_number(result: str) -> Tuple[bool, Union[str, str]]:\n    \"\"\"Ensure phone numbers are in a consistent format.\"\"\"\n    import re\n    digits = re.sub(r'\\D', '', result)\n    if len(digits) == 10:\n        formatted = f\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\"\n        return (True, formatted)\n    return (False, \"Output must be a 10-digit phone number\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def\\n \\nchain_validations\\n(\\n*\\nvalidators\\n)\\n:\\n\n\\n    \\n\"\"\"Chain multiple validators together.\"\"\"\\n\n\\n    \\ndef\\n \\ncombined_validator\\n(\\nresult\\n)\\n:\\n\n\\n        \\nfor\\n validator \\nin\\n validators\\n:\\n\n\\n            success\\n,\\n data \\n=\\n validator\\n(\\nresult\\n)\\n\n\\n            \\nif\\n \\nnot\\n success\\n:\\n\n\\n                \\nreturn\\n \\n(\\nFalse\\n,\\n data\\n)\\n\n\\n            result \\n=\\n data\\n\n\\n        \\nreturn\\n \\n(\\nTrue\\n,\\n result\\n)\\n\n\\n    \\nreturn\\n combined_validator\\n\n\n\\n# Usage\\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Get user contact info\"\\n,\\n\n\\n    expected_output\\n=\\n\"Email and phone\"\\n,\\n\n\\n    guardrail\\n=\\nchain_validations\\n(\\n\n\\n        validate_email_format\\n,\\n\n\\n        filter_sensitive_info\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "def chain_validations(*validators):\n    \"\"\"Chain multiple validators together.\"\"\"\n    def combined_validator(result):\n        for validator in validators:\n            success, data = validator(result)\n            if not success:\n                return (False, data)\n            result = data\n        return (True, result)\n    return combined_validator\n\n# Usage\ntask = Task(\n    description=\"Get user contact info\",\n    expected_output=\"Email and phone\",\n    guardrail=chain_validations(\n        validate_email_format,\n        filter_sensitive_info\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Generate data\"\\n,\\n\n\\n    expected_output\\n=\\n\"Valid data\"\\n,\\n\n\\n    guardrail\\n=\\nvalidate_data\\n,\\n\n\\n    max_retries\\n=\\n5\\n  \\n# Override default retry limit\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "task = Task(\n    description=\"Generate data\",\n    expected_output=\"Valid data\",\n    guardrail=validate_data,\n    max_retries=5  # Override default retry limit\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Creating Directories when Saving Files",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "# ...\\n\n\n\\nsave_output_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n'Save the summarized AI news to a file'\\n,\\n\n\\n    expected_output\\n=\\n'File saved successfully'\\n,\\n\n\\n    agent\\n=\\nresearch_agent\\n,\\n\n\\n    tools\\n=\\n[\\nfile_save_tool\\n]\\n,\\n\n\\n    output_file\\n=\\n'outputs/ai_news_summary.txt'\\n,\\n\n\\n    create_directory\\n=\\nTrue\\n\n\\n)\\n\n\n\\n#...\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "# ...\n\nsave_output_task = Task(\n    description='Save the summarized AI news to a file',\n    expected_output='File saved successfully',\n    agent=research_agent,\n    tools=[file_save_tool],\n    output_file='outputs/ai_news_summary.txt',\n    create_directory=True\n)\n\n#...",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Overview of a Task",
            "page_number": 9,
            "type": "code_block"
        }
    },
    {
        "content": "Check out the video below to see how to use structured outputs in CrewAI:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Creating Directories when Saving Files",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "Tasks are the driving force behind the actions of agents in CrewAI.\nBy properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.\nEquipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI’s potential,\nensuring agents are effectively prepared for their assignments and that tasks are executed as intended.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/tasks",
            "topic": "​Conclusion",
            "page_number": 9,
            "type": "paragraph"
        }
    },
    {
        "content": "The SerperDevTool is designed to search the internet and return the most relevant results.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "Google Serper Search",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "SerperDevTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "Google Serper Search",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "SerperDevTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "We are still working on improving tools, so there might be unexpected behavior or changes in the future.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "This tool is designed to perform a semantic search for a specified query from a text’s content across the internet. It utilizes the serper.dev API\nto fetch and display the most relevant search results based on the query provided by the user.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Description",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "To incorporate this tool into your project, follow the installation instructions below:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Installation",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[tools]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[tools]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to initialize the tool and execute a search with a given query:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Example",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\n# Initialize the tool for internet searching capabilities\\n\n\\ntool \\n=\\n SerperDevTool\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import SerperDevTool\n\n# Initialize the tool for internet searching capabilities\ntool = SerperDevTool()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "To effectively use the SerperDevTool , follow these steps:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Steps to Get Started",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "SerperDevTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "crewai[tools]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "serper.dev",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "serper.dev",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "SERPER_API_KEY",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "The SerperDevTool comes with several parameters that will be passed to the API :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Parameters",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "SerperDevTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "search_url : The URL endpoint for the search API. (Default is https://google.serper.dev/search )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "https://google.serper.dev/search",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "country : Optional. Specify the country for the search results.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "location : Optional. Specify the location for the search results.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "locale : Optional. Specify the locale for the search results.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "n_results : Number of search results to return. Default is 10 .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "10",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "The values for country , location , locale and search_url can be found on the Serper Playground .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Parameters",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "country",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "location",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "locale",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "search_url",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "Here is an example demonstrating how to use the tool with additional parameters:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Example with Parameters",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\ntool \\n=\\n SerperDevTool\\n(\\n\n\\n    search_url\\n=\\n\"https://google.serper.dev/scholar\"\\n,\\n\n\\n    n_results\\n=\\n2\\n,\\n\n\\n)\\n\n\n\\nprint\\n(\\ntool\\n.\\nrun\\n(\\nsearch_query\\n=\\n\"ChatGPT\"\\n)\\n)\\n\n\n\\n# Using Tool: Search the internet\\n\n\n\\n# Search results: Title: Role of chat gpt in public health\\n\n\\n# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7\\n\n\\n# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in\\n\n\\n# ---\\n\n\\n# Title: Potential use of chat gpt in global warming\\n\n\\n# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8\\n\n\\n# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate\\n\n\\n# ---\\n\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import SerperDevTool\n\ntool = SerperDevTool(\n    search_url=\"https://google.serper.dev/scholar\",\n    n_results=2,\n)\n\nprint(tool.run(search_query=\"ChatGPT\"))\n\n# Using Tool: Search the internet\n\n# Search results: Title: Role of chat gpt in public health\n# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7\n# Snippet: … ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in\n# ---\n# Title: Potential use of chat gpt in global warming\n# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8\n# Snippet: … as ChatGPT, have the potential to play a critical role in advancing our understanding of climate\n# ---",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\ntool \\n=\\n SerperDevTool\\n(\\n\n\\n    country\\n=\\n\"fr\"\\n,\\n\n\\n    locale\\n=\\n\"fr\"\\n,\\n\n\\n    location\\n=\\n\"Paris, Paris, Ile-de-France, France\"\\n,\\n\n\\n    n_results\\n=\\n2\\n,\\n\n\\n)\\n\n\n\\nprint\\n(\\ntool\\n.\\nrun\\n(\\nsearch_query\\n=\\n\"Jeux Olympiques\"\\n)\\n)\\n\n\n\\n# Using Tool: Search the internet\\n\n\n\\n# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats\\n\n\\n# Link: https://olympics.com/fr/paris-2024\\n\n\\n# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...\\n\n\\n# ---\\n\n\\n# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques\\n\n\\n# Link: https://tickets.paris2024.org/\\n\n\\n# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.\\n\n\\n# ---\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import SerperDevTool\n\ntool = SerperDevTool(\n    country=\"fr\",\n    locale=\"fr\",\n    location=\"Paris, Paris, Ile-de-France, France\",\n    n_results=2,\n)\n\nprint(tool.run(search_query=\"Jeux Olympiques\"))\n\n# Using Tool: Search the internet\n\n# Search results: Title: Jeux Olympiques de Paris 2024 - Actualités, calendriers, résultats\n# Link: https://olympics.com/fr/paris-2024\n# Snippet: Quels sont les sports présents aux Jeux Olympiques de Paris 2024 ? · Athlétisme · Aviron · Badminton · Basketball · Basketball 3x3 · Boxe · Breaking · Canoë ...\n# ---\n# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques\n# Link: https://tickets.paris2024.org/\n# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand événement sportif au monde.\n# ---",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "By integrating the SerperDevTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.\nThe updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​Conclusion",
            "page_number": 10,
            "type": "paragraph"
        }
    },
    {
        "content": "SerperDevTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/serperdevtool",
            "topic": "​SerperDevTool",
            "page_number": 10,
            "type": "code_block"
        }
    },
    {
        "content": "Get started with CrewAI - Install, configure, and build your first AI crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Watch this video tutorial for a step-by-step demonstration of the installation process:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI requires Python >=3.10 and <3.13 . Here’s how to check your version:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Python >=3.10 and <3.13",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "python3 \\n--version\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "python3 --version",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you need to update Python, visit python.org/downloads",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "CrewAI uses the uv as its dependency management and package handling tool. It simplifies project setup and execution, offering a seamless experience.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Text Tutorial",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "uv",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you haven’t installed uv yet, follow step 1 to quickly get it set up on your system, else you can skip to step 2 .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Text Tutorial",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "uv",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Use curl to download the script and execute it with sh :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "curl",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "sh",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "curl\\n \\n-LsSf\\n https://astral.sh/uv/install.sh \\n|\\n \\nsh\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "curl -LsSf https://astral.sh/uv/install.sh | sh",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If your system doesn’t have curl , you can use wget :",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "curl",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "wget",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "wget\\n -qO- https://astral.sh/uv/install.sh \\n|\\n \\nsh\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "wget -qO- https://astral.sh/uv/install.sh | sh",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Use irm to download the script and iex to execute it:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "irm",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "iex",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "powershell \\n-ExecutionPolicy\\n ByPass \\n-c\\n \\n\"irm https://astral.sh/uv/install.ps1 | iex\"\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you run into any issues, refer to UV’s installation guide for more information.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Run the following command to install crewai CLI:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool \\ninstall\\n crewai\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool install crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you encounter a PATH warning, run this command to update your shell:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "PATH",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool update-shell\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool update-shell",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you encounter the chroma-hnswlib==0.7.6 build error ( fatal error C1083: Cannot open include file: 'float.h' ) on Windows, install (Visual Studio Build Tools)[ https://visualstudio.microsoft.com/downloads/ ] with Desktop development with C++ .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "chroma-hnswlib==0.7.6",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "fatal error C1083: Cannot open include file: 'float.h'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "To verify that crewai is installed, run:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool list\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool list",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "You should see something like:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai v0.102.0\\n\n\\n- crewai\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai v0.102.0\n- crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "If you need to update crewai , run:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool \\ninstall\\n crewai \\n--upgrade\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv tool install crewai --upgrade",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "We recommend using the YAML template scaffolding for a structured approach to defining agents and tasks. Here’s how to get started:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Creating a CrewAI Project",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "YAML",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​Video Tutorial",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Run the crewai CLI command:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai create crew \\n<\\nyour_project_name\\n>\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai create crew <your_project_name>",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "This creates a new project with the following structure:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "my_project/\\n\n\\n├── .gitignore\\n\n\\n├── knowledge/\\n\n\\n├── pyproject.toml\\n\n\\n├── README.md\\n\n\\n├── .env\\n\n\\n└── src/\\n\n\\n    └── my_project/\\n\n\\n        ├── __init__.py\\n\n\\n        ├── main.py\\n\n\\n        ├── crew.py\\n\n\\n        ├── tools/\\n\n\\n        │   ├── custom_tool.py\\n\n\\n        │   └── __init__.py\\n\n\\n        └── config/\\n\n\\n            ├── agents.yaml\\n\n\\n            └── tasks.yaml\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "my_project/\n├── .gitignore\n├── knowledge/\n├── pyproject.toml\n├── README.md\n├── .env\n└── src/\n    └── my_project/\n        ├── __init__.py\n        ├── main.py\n        ├── crew.py\n        ├── tools/\n        │   ├── custom_tool.py\n        │   └── __init__.py\n        └── config/\n            ├── agents.yaml\n            └── tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Your project will contain these essential files:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": ".env",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "main.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crew.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "tools/",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "knowledge/",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Start by editing agents.yaml and tasks.yaml to define your crew’s behavior.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "Keep sensitive information like API keys in .env .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Installation - CrewAI",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": ".env",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai \\ninstall\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai install",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv \\nadd\\n \\n<\\npackage-name\\n>\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "uv add <package-name>",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai run\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "crewai run",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Code Example on Installation - CrewAI",
            "page_number": 11,
            "type": "code_block"
        }
    },
    {
        "content": "For teams and organizations, CrewAI offers enterprise deployment options that eliminate setup complexity:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "​CrewAI Enterprise (SaaS)",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Learn about CrewAI’s enterprise offerings and schedule a demo",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Explore Enterprise Options",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Follow our quickstart guide to create your first CrewAI agent and get hands-on experience.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Build Your First Agent",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Connect with other developers, get help, and share your CrewAI experiences.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/installation",
            "topic": "Join the Community",
            "page_number": 11,
            "type": "paragraph"
        }
    },
    {
        "content": "Semantic search capabilities for CrewAI agents using Qdrant vector database",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "Qdrant Vector Search Tool",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "QdrantVectorSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "The Qdrant Vector Search Tool enables semantic search capabilities in your CrewAI agents by leveraging Qdrant , a vector similarity search engine. This tool allows your agents to search through documents stored in a Qdrant collection using semantic similarity.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "uv \\nadd\\n qdrant-client\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "uv add qdrant-client",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s a minimal example of how to use the tool:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Basic Usage",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n\n\\nfrom\\n crewai_tools \\nimport\\n QdrantVectorSearchTool\\n\n\n\\n# Initialize the tool\\n\n\\nqdrant_tool \\n=\\n QdrantVectorSearchTool\\n(\\n\n\\n    qdrant_url\\n=\\n\"your_qdrant_url\"\\n,\\n\n\\n    qdrant_api_key\\n=\\n\"your_qdrant_api_key\"\\n,\\n\n\\n    collection_name\\n=\\n\"your_collection\"\\n\n\\n)\\n\n\n\\n# Create an agent that uses the tool\\n\n\\nagent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Research Assistant\"\\n,\\n\n\\n    goal\\n=\\n\"Find relevant information in documents\"\\n,\\n\n\\n    tools\\n=\\n[\\nqdrant_tool\\n]\\n\n\\n)\\n\n\n\\n# The tool will automatically use OpenAI embeddings\\n\n\\n# and return the 3 most relevant results with scores > 0.35\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent\nfrom crewai_tools import QdrantVectorSearchTool\n\n# Initialize the tool\nqdrant_tool = QdrantVectorSearchTool(\n    qdrant_url=\"your_qdrant_url\",\n    qdrant_api_key=\"your_qdrant_api_key\",\n    collection_name=\"your_collection\"\n)\n\n# Create an agent that uses the tool\nagent = Agent(\n    role=\"Research Assistant\",\n    goal=\"Find relevant information in documents\",\n    tools=[qdrant_tool]\n)\n\n# The tool will automatically use OpenAI embeddings\n# and return the 3 most relevant results with scores > 0.35",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s a complete example showing how to:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Complete Working Example",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n os\\n\n\\nimport\\n uuid\\n\n\\nimport\\n pdfplumber\\n\n\\nfrom\\n openai \\nimport\\n OpenAI\\n\n\\nfrom\\n dotenv \\nimport\\n load_dotenv\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n,\\n Process\\n,\\n LLM\\n\n\\nfrom\\n crewai_tools \\nimport\\n QdrantVectorSearchTool\\n\n\\nfrom\\n qdrant_client \\nimport\\n QdrantClient\\n\n\\nfrom\\n qdrant_client\\n.\\nmodels \\nimport\\n PointStruct\\n,\\n Distance\\n,\\n VectorParams\\n\n\n\\n# Load environment variables\\n\n\\nload_dotenv\\n(\\n)\\n\n\n\\n# Initialize OpenAI client\\n\n\\nclient \\n=\\n OpenAI\\n(\\napi_key\\n=\\nos\\n.\\ngetenv\\n(\\n\"OPENAI_API_KEY\"\\n)\\n)\\n\n\n\\n# Extract text from PDF\\n\n\\ndef\\n \\nextract_text_from_pdf\\n(\\npdf_path\\n)\\n:\\n\n\\n    text \\n=\\n \\n[\\n]\\n\n\\n    \\nwith\\n pdfplumber\\n.\\nopen\\n(\\npdf_path\\n)\\n \\nas\\n pdf\\n:\\n\n\\n        \\nfor\\n page \\nin\\n pdf\\n.\\npages\\n:\\n\n\\n            page_text \\n=\\n page\\n.\\nextract_text\\n(\\n)\\n\n\\n            \\nif\\n page_text\\n:\\n\n\\n                text\\n.\\nappend\\n(\\npage_text\\n.\\nstrip\\n(\\n)\\n)\\n\n\\n    \\nreturn\\n text\\n\n\n\\n# Generate OpenAI embeddings\\n\n\\ndef\\n \\nget_openai_embedding\\n(\\ntext\\n)\\n:\\n\n\\n    response \\n=\\n client\\n.\\nembeddings\\n.\\ncreate\\n(\\n\n\\n        \\ninput\\n=\\ntext\\n,\\n\n\\n        model\\n=\\n\"text-embedding-3-small\"\\n\n\\n    \\n)\\n\n\\n    \\nreturn\\n response\\n.\\ndata\\n[\\n0\\n]\\n.\\nembedding\\n\n\n\\n# Store text and embeddings in Qdrant\\n\n\\ndef\\n \\nload_pdf_to_qdrant\\n(\\npdf_path\\n,\\n qdrant\\n,\\n collection_name\\n)\\n:\\n\n\\n    \\n# Extract text from PDF\\n\n\\n    text_chunks \\n=\\n extract_text_from_pdf\\n(\\npdf_path\\n)\\n\n    \n\\n    \\n# Create Qdrant collection\\n\n\\n    \\nif\\n qdrant\\n.\\ncollection_exists\\n(\\ncollection_name\\n)\\n:\\n\n\\n        qdrant\\n.\\ndelete_collection\\n(\\ncollection_name\\n)\\n\n\\n    qdrant\\n.\\ncreate_collection\\n(\\n\n\\n        collection_name\\n=\\ncollection_name\\n,\\n\n\\n        vectors_config\\n=\\nVectorParams\\n(\\nsize\\n=\\n1536\\n,\\n distance\\n=\\nDistance\\n.\\nCOSINE\\n)\\n\n\\n    \\n)\\n\n\n\\n    \\n# Store embeddings\\n\n\\n    points \\n=\\n \\n[\\n]\\n\n\\n    \\nfor\\n chunk \\nin\\n text_chunks\\n:\\n\n\\n        embedding \\n=\\n get_openai_embedding\\n(\\nchunk\\n)\\n\n\\n        points\\n.\\nappend\\n(\\nPointStruct\\n(\\n\n\\n            \\nid\\n=\\nstr\\n(\\nuuid\\n.\\nuuid4\\n(\\n)\\n)\\n,\\n\n\\n            vector\\n=\\nembedding\\n,\\n\n\\n            payload\\n=\\n{\\n\"text\"\\n:\\n chunk\\n}\\n\n\\n        \\n)\\n)\\n\n\\n    qdrant\\n.\\nupsert\\n(\\ncollection_name\\n=\\ncollection_name\\n,\\n points\\n=\\npoints\\n)\\n\n\n\\n# Initialize Qdrant client and load data\\n\n\\nqdrant \\n=\\n QdrantClient\\n(\\n\n\\n    url\\n=\\nos\\n.\\ngetenv\\n(\\n\"QDRANT_URL\"\\n)\\n,\\n\n\\n    api_key\\n=\\nos\\n.\\ngetenv\\n(\\n\"QDRANT_API_KEY\"\\n)\\n\n\\n)\\n\n\\ncollection_name \\n=\\n \\n\"example_collection\"\\n\n\\npdf_path \\n=\\n \\n\"path/to/your/document.pdf\"\\n\n\\nload_pdf_to_qdrant\\n(\\npdf_path\\n,\\n qdrant\\n,\\n collection_name\\n)\\n\n\n\\n# Initialize Qdrant search tool\\n\n\\nqdrant_tool \\n=\\n QdrantVectorSearchTool\\n(\\n\n\\n    qdrant_url\\n=\\nos\\n.\\ngetenv\\n(\\n\"QDRANT_URL\"\\n)\\n,\\n\n\\n    qdrant_api_key\\n=\\nos\\n.\\ngetenv\\n(\\n\"QDRANT_API_KEY\"\\n)\\n,\\n\n\\n    collection_name\\n=\\ncollection_name\\n,\\n\n\\n    limit\\n=\\n3\\n,\\n\n\\n    score_threshold\\n=\\n0.35\\n\n\\n)\\n\n\n\\n# Create CrewAI agents\\n\n\\nsearch_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Senior Semantic Search Agent\"\\n,\\n\n\\n    goal\\n=\\n\"Find and analyze documents based on semantic search\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You are an expert research assistant who can find relevant \\n\n\\n    information using semantic search \\nin\\n a Qdrant database\\n.\\n\"\"\\n\"\\n,\\n\n\\n    tools\\n=\\n[\\nqdrant_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\nanswer_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Senior Answer Assistant\"\\n,\\n\n\\n    goal\\n=\\n\"Generate answers to questions based on the context provided\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You are an expert answer assistant who can generate \\n\n\\n    answers to questions based on the context provided\\n.\\n\"\"\\n\"\\n,\\n\n\\n    tools\\n=\\n[\\nqdrant_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\n# Define tasks\\n\n\\nsearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"Search \\nfor\\n relevant documents about the \\n{\\nquery\\n}\\n.\\n\n\\n    Your final answer should include\\n:\\n\n\\n    \\n-\\n The relevant information found\\n\n\\n    \\n-\\n The similarity scores of the results\\n\n\\n    \\n-\\n The metadata of the relevant documents\\n\"\"\\n\"\\n,\\n\n\\n    agent\\n=\\nsearch_agent\\n\n\\n)\\n\n\n\\nanswer_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"Given the context \\nand\\n metadata of relevant documents\\n,\\n\n\\n    generate a final answer based on the context\\n.\\n\"\"\\n\"\\n,\\n\n\\n    agent\\n=\\nanswer_agent\\n\n\\n)\\n\n\n\\n# Run CrewAI workflow\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nsearch_agent\\n,\\n answer_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\nsearch_task\\n,\\n answer_task\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n\n\\n    inputs\\n=\\n{\\n\"query\"\\n:\\n \\n\"What is the role of X in the document?\"\\n}\\n\n\\n)\\n\n\\nprint\\n(\\nresult\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nimport uuid\nimport pdfplumber\nfrom openai import OpenAI\nfrom dotenv import load_dotenv\nfrom crewai import Agent, Task, Crew, Process, LLM\nfrom crewai_tools import QdrantVectorSearchTool\nfrom qdrant_client import QdrantClient\nfrom qdrant_client.models import PointStruct, Distance, VectorParams\n\n# Load environment variables\nload_dotenv()\n\n# Initialize OpenAI client\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n# Extract text from PDF\ndef extract_text_from_pdf(pdf_path):\n    text = []\n    with pdfplumber.open(pdf_path) as pdf:\n        for page in pdf.pages:\n            page_text = page.extract_text()\n            if page_text:\n                text.append(page_text.strip())\n    return text\n\n# Generate OpenAI embeddings\ndef get_openai_embedding(text):\n    response = client.embeddings.create(\n        input=text,\n        model=\"text-embedding-3-small\"\n    )\n    return response.data[0].embedding\n\n# Store text and embeddings in Qdrant\ndef load_pdf_to_qdrant(pdf_path, qdrant, collection_name):\n    # Extract text from PDF\n    text_chunks = extract_text_from_pdf(pdf_path)\n    \n    # Create Qdrant collection\n    if qdrant.collection_exists(collection_name):\n        qdrant.delete_collection(collection_name)\n    qdrant.create_collection(\n        collection_name=collection_name,\n        vectors_config=VectorParams(size=1536, distance=Distance.COSINE)\n    )\n\n    # Store embeddings\n    points = []\n    for chunk in text_chunks:\n        embedding = get_openai_embedding(chunk)\n        points.append(PointStruct(\n            id=str(uuid.uuid4()),\n            vector=embedding,\n            payload={\"text\": chunk}\n        ))\n    qdrant.upsert(collection_name=collection_name, points=points)\n\n# Initialize Qdrant client and load data\nqdrant = QdrantClient(\n    url=os.getenv(\"QDRANT_URL\"),\n    api_key=os.getenv(\"QDRANT_API_KEY\")\n)\ncollection_name = \"example_collection\"\npdf_path = \"path/to/your/document.pdf\"\nload_pdf_to_qdrant(pdf_path, qdrant, collection_name)\n\n# Initialize Qdrant search tool\nqdrant_tool = QdrantVectorSearchTool(\n    qdrant_url=os.getenv(\"QDRANT_URL\"),\n    qdrant_api_key=os.getenv(\"QDRANT_API_KEY\"),\n    collection_name=collection_name,\n    limit=3,\n    score_threshold=0.35\n)\n\n# Create CrewAI agents\nsearch_agent = Agent(\n    role=\"Senior Semantic Search Agent\",\n    goal=\"Find and analyze documents based on semantic search\",\n    backstory=\"\"\"You are an expert research assistant who can find relevant \n    information using semantic search in a Qdrant database.\"\"\",\n    tools=[qdrant_tool],\n    verbose=True\n)\n\nanswer_agent = Agent(\n    role=\"Senior Answer Assistant\",\n    goal=\"Generate answers to questions based on the context provided\",\n    backstory=\"\"\"You are an expert answer assistant who can generate \n    answers to questions based on the context provided.\"\"\",\n    tools=[qdrant_tool],\n    verbose=True\n)\n\n# Define tasks\nsearch_task = Task(\n    description=\"\"\"Search for relevant documents about the {query}.\n    Your final answer should include:\n    - The relevant information found\n    - The similarity scores of the results\n    - The metadata of the relevant documents\"\"\",\n    agent=search_agent\n)\n\nanswer_task = Task(\n    description=\"\"\"Given the context and metadata of relevant documents,\n    generate a final answer based on the context.\"\"\",\n    agent=answer_agent\n)\n\n# Run CrewAI workflow\ncrew = Crew(\n    agents=[search_agent, answer_agent],\n    tasks=[search_task, answer_task],\n    process=Process.sequential,\n    verbose=True\n)\n\nresult = crew.kickoff(\n    inputs={\"query\": \"What is the role of X in the document?\"}\n)\nprint(result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "qdrant_url",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "qdrant_api_key",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "collection_name",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "limit",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "score_threshold",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "custom_embedding_fn",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "The tool accepts these parameters in its schema:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Search Parameters",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "query",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "filter_by",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "filter_value",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "The tool returns results in JSON format:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Return Format",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "[\\n\n\\n  \\n{\\n\n\\n    \\n\"metadata\"\\n:\\n \\n{\\n\n\\n      \\n// Any metadata stored with the document\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"context\"\\n:\\n \\n\"The actual text content of the document\"\\n,\\n\n\\n    \\n\"distance\"\\n:\\n \\n0.95\\n  \\n// Similarity score\\n\n\\n  \\n}\\n\n\\n]\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "[\n  {\n    \"metadata\": {\n      // Any metadata stored with the document\n    },\n    \"context\": \"The actual text content of the document\",\n    \"distance\": 0.95  // Similarity score\n  }\n]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "By default, the tool uses OpenAI’s text-embedding-3-small model for vectorization. This requires:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Default Embedding",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "text-embedding-3-small",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "OPENAI_API_KEY",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "Instead of using the default embedding model, you might want to use your own embedding function in cases where you:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Custom Embeddings",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "Here’s an example using a HuggingFace model:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Custom Embeddings",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n transformers \\nimport\\n AutoTokenizer\\n,\\n AutoModel\\n\n\\nimport\\n torch\\n\n\n\\n# Load model and tokenizer\\n\n\\ntokenizer \\n=\\n AutoTokenizer\\n.\\nfrom_pretrained\\n(\\n'sentence-transformers/all-MiniLM-L6-v2'\\n)\\n\n\\nmodel \\n=\\n AutoModel\\n.\\nfrom_pretrained\\n(\\n'sentence-transformers/all-MiniLM-L6-v2'\\n)\\n\n\n\\ndef\\n \\ncustom_embeddings\\n(\\ntext\\n:\\n \\nstr\\n)\\n \\n-\\n>\\n \\nlist\\n[\\nfloat\\n]\\n:\\n\n\\n    \\n# Tokenize and get model outputs\\n\n\\n    inputs \\n=\\n tokenizer\\n(\\ntext\\n,\\n return_tensors\\n=\\n\"pt\"\\n,\\n padding\\n=\\nTrue\\n,\\n truncation\\n=\\nTrue\\n)\\n\n\\n    outputs \\n=\\n model\\n(\\n**\\ninputs\\n)\\n\n    \n\\n    \\n# Use mean pooling to get text embedding\\n\n\\n    embeddings \\n=\\n outputs\\n.\\nlast_hidden_state\\n.\\nmean\\n(\\ndim\\n=\\n1\\n)\\n\n    \n\\n    \\n# Convert to list of floats and return\\n\n\\n    \\nreturn\\n embeddings\\n[\\n0\\n]\\n.\\ntolist\\n(\\n)\\n\n\n\\n# Use custom embeddings with the tool\\n\n\\ntool \\n=\\n QdrantVectorSearchTool\\n(\\n\n\\n    qdrant_url\\n=\\n\"your_url\"\\n,\\n\n\\n    qdrant_api_key\\n=\\n\"your_key\"\\n,\\n\n\\n    collection_name\\n=\\n\"your_collection\"\\n,\\n\n\\n    custom_embedding_fn\\n=\\ncustom_embeddings  \\n# Pass your custom function\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "from transformers import AutoTokenizer, AutoModel\nimport torch\n\n# Load model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\nmodel = AutoModel.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\n\ndef custom_embeddings(text: str) -> list[float]:\n    # Tokenize and get model outputs\n    inputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True)\n    outputs = model(**inputs)\n    \n    # Use mean pooling to get text embedding\n    embeddings = outputs.last_hidden_state.mean(dim=1)\n    \n    # Convert to list of floats and return\n    return embeddings[0].tolist()\n\n# Use custom embeddings with the tool\ntool = QdrantVectorSearchTool(\n    qdrant_url=\"your_url\",\n    qdrant_api_key=\"your_key\",\n    collection_name=\"your_collection\",\n    custom_embedding_fn=custom_embeddings  # Pass your custom function\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "The tool handles these specific errors:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​Error Handling",
            "page_number": 12,
            "type": "paragraph"
        }
    },
    {
        "content": "qdrant-client",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "QDRANT_URL",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "qdrant-client",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "uv add qdrant-client",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "export\\n \\nQDRANT_URL\\n=\\n\"your_qdrant_url\"\\n  \\n# If not provided in constructor\\n\n\\nexport\\n \\nQDRANT_API_KEY\\n=\\n\"your_api_key\"\\n  \\n# If not provided in constructor\\n\n\\nexport\\n \\nOPENAI_API_KEY\\n=\\n\"your_openai_key\"\\n  \\n# If using default embeddings\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "export QDRANT_URL=\"your_qdrant_url\"  # If not provided in constructor\nexport QDRANT_API_KEY=\"your_api_key\"  # If not provided in constructor\nexport OPENAI_API_KEY=\"your_openai_key\"  # If using default embeddings",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/qdrantvectorsearchtool",
            "topic": "​QdrantVectorSearchTool",
            "page_number": 12,
            "type": "code_block"
        }
    },
    {
        "content": "The LinkupSearchTool enables querying the Linkup API for contextual information.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "Linkup Search Tool",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "Linkup Search Tool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The LinkupSearchTool provides the ability to query the Linkup API for contextual information and retrieve structured results. This tool is ideal for enriching workflows with up-to-date and reliable information from Linkup, allowing agents to access relevant data during their tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Description",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "To use this tool, you need to install the Linkup SDK:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Installation",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "uv \\nadd\\n linkup-sdk\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "uv add linkup-sdk",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "To effectively use the LinkupSearchTool , follow these steps:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Steps to Get Started",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to initialize the tool and use it in an agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Example",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n LinkupSearchTool\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n\n\\nimport\\n os\\n\n\n\\n# Initialize the tool with your API key\\n\n\\nlinkup_tool \\n=\\n LinkupSearchTool\\n(\\napi_key\\n=\\nos\\n.\\ngetenv\\n(\\n\"LINKUP_API_KEY\"\\n)\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\n@agent\\n\n\\ndef\\n \\nresearcher\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\n''\\n'\\n\n\\n    This agent uses the LinkupSearchTool to retrieve contextual information\\n\n\\n    \\nfrom\\n the Linkup API\\n.\\n\n\\n    \\n''\\n'\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n        config\\n=\\nself\\n.\\nagents_config\\n[\\n\"researcher\"\\n]\\n,\\n\n\\n        tools\\n=\\n[\\nlinkup_tool\\n]\\n\n\\n    \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import LinkupSearchTool\nfrom crewai import Agent\nimport os\n\n# Initialize the tool with your API key\nlinkup_tool = LinkupSearchTool(api_key=os.getenv(\"LINKUP_API_KEY\"))\n\n# Define an agent that uses the tool\n@agent\ndef researcher(self) -> Agent:\n    '''\n    This agent uses the LinkupSearchTool to retrieve contextual information\n    from the Linkup API.\n    '''\n    return Agent(\n        config=self.agents_config[\"researcher\"],\n        tools=[linkup_tool]\n    )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The LinkupSearchTool accepts the following parameters:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Parameters",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "You can customize the search parameters for more specific results:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Advanced Usage",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "# Perform a search with custom parameters\\n\n\\nresults \\n=\\n linkup_tool\\n.\\nrun\\n(\\n\n\\n    query\\n=\\n\"Women Nobel Prize Physics\"\\n,\\n\n\\n    depth\\n=\\n\"deep\"\\n,\\n\n\\n    output_type\\n=\\n\"searchResults\"\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "# Perform a search with custom parameters\nresults = linkup_tool.run(\n    query=\"Women Nobel Prize Physics\",\n    depth=\"deep\",\n    output_type=\"searchResults\"\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The tool returns results in the following format:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Return Format",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "{\\n\n\\n  \\n\"success\"\\n:\\n \\ntrue\\n,\\n\n\\n  \\n\"results\"\\n:\\n \\n[\\n\n\\n    \\n{\\n\n\\n      \\n\"name\"\\n:\\n \\n\"Result Title\"\\n,\\n\n\\n      \\n\"url\"\\n:\\n \\n\"https://example.com/result\"\\n,\\n\n\\n      \\n\"content\"\\n:\\n \\n\"Content of the result...\"\\n\n\\n    \\n}\\n,\\n\n\\n    \\n// Additional results...\\n\n\\n  \\n]\\n\n\\n}\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "{\n  \"success\": true,\n  \"results\": [\n    {\n      \"name\": \"Result Title\",\n      \"url\": \"https://example.com/result\",\n      \"content\": \"Content of the result...\"\n    },\n    // Additional results...\n  ]\n}",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "If an error occurs, the response will be:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Return Format",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "{\\n\n\\n  \\n\"success\"\\n:\\n \\nfalse\\n,\\n\n\\n  \\n\"error\"\\n:\\n \\n\"Error message\"\\n\n\\n}\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "{\n  \"success\": false,\n  \"error\": \"Error message\"\n}",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The tool gracefully handles API errors and provides structured feedback. If the API request fails, the tool will return a dictionary with success: false and an error message.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Error Handling",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "success: false",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The LinkupSearchTool provides a seamless way to integrate Linkup’s contextual information retrieval capabilities into your CrewAI agents. By leveraging this tool, agents can access relevant and up-to-date information to enhance their decision-making and task execution.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​Conclusion",
            "page_number": 13,
            "type": "paragraph"
        }
    },
    {
        "content": "LinkupSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/linkupsearchtool",
            "topic": "​LinkupSearchTool",
            "page_number": 13,
            "type": "code_block"
        }
    },
    {
        "content": "The RagTool is a dynamic knowledge base tool for answering questions using Retrieval-Augmented Generation.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "RAG Tool",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "RAG Tool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The RagTool is designed to answer questions by leveraging the power of Retrieval-Augmented Generation (RAG) through EmbedChain.\nIt provides a dynamic knowledge base that can be queried to retrieve relevant information from various data sources.\nThis tool is particularly useful for applications that require access to a vast array of information and need to provide contextually relevant answers.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Description",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to initialize the tool and use it with different data sources:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Example",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n RagTool\\n\n\n\\n# Create a RAG tool with default settings\\n\n\\nrag_tool \\n=\\n RagTool\\n(\\n)\\n\n\n\\n# Add content from a file\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"file\"\\n,\\n path\\n=\\n\"path/to/your/document.pdf\"\\n)\\n\n\n\\n# Add content from a web page\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"web_page\"\\n,\\n url\\n=\\n\"https://example.com\"\\n)\\n\n\n\\n# Define an agent with the RagTool\\n\n\\n@agent\\n\n\\ndef\\n \\nknowledge_expert\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\n''\\n'\\n\n\\n    This agent uses the RagTool to answer questions about the knowledge base\\n.\\n\n\\n    \\n''\\n'\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n        config\\n=\\nself\\n.\\nagents_config\\n[\\n\"knowledge_expert\"\\n]\\n,\\n\n\\n        allow_delegation\\n=\\nFalse\\n,\\n\n\\n        tools\\n=\\n[\\nrag_tool\\n]\\n\n\\n    \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import RagTool\n\n# Create a RAG tool with default settings\nrag_tool = RagTool()\n\n# Add content from a file\nrag_tool.add(data_type=\"file\", path=\"path/to/your/document.pdf\")\n\n# Add content from a web page\nrag_tool.add(data_type=\"web_page\", url=\"https://example.com\")\n\n# Define an agent with the RagTool\n@agent\ndef knowledge_expert(self) -> Agent:\n    '''\n    This agent uses the RagTool to answer questions about the knowledge base.\n    '''\n    return Agent(\n        config=self.agents_config[\"knowledge_expert\"],\n        allow_delegation=False,\n        tools=[rag_tool]\n    )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The RagTool can be used with a wide variety of data sources, including:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Supported Data Sources",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The RagTool accepts the following parameters:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Parameters",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "False",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "You can add content to the knowledge base using the add method:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Adding Content",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "add",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "# Add a PDF file\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"file\"\\n,\\n path\\n=\\n\"path/to/your/document.pdf\"\\n)\\n\n\n\\n# Add a web page\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"web_page\"\\n,\\n url\\n=\\n\"https://example.com\"\\n)\\n\n\n\\n# Add a YouTube video\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"youtube_video\"\\n,\\n url\\n=\\n\"https://www.youtube.com/watch?v=VIDEO_ID\"\\n)\\n\n\n\\n# Add a directory of files\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"directory\"\\n,\\n path\\n=\\n\"path/to/your/directory\"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "# Add a PDF file\nrag_tool.add(data_type=\"file\", path=\"path/to/your/document.pdf\")\n\n# Add a web page\nrag_tool.add(data_type=\"web_page\", url=\"https://example.com\")\n\n# Add a YouTube video\nrag_tool.add(data_type=\"youtube_video\", url=\"https://www.youtube.com/watch?v=VIDEO_ID\")\n\n# Add a directory of files\nrag_tool.add(data_type=\"directory\", path=\"path/to/your/directory\")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s how to integrate the RagTool with a CrewAI agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Agent Integration Example",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n\n\\nfrom\\n crewai\\n.\\nproject \\nimport\\n agent\\n\n\\nfrom\\n crewai_tools \\nimport\\n RagTool\\n\n\n\\n# Initialize the tool and add content\\n\n\\nrag_tool \\n=\\n RagTool\\n(\\n)\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"web_page\"\\n,\\n url\\n=\\n\"https://docs.crewai.com\"\\n)\\n\n\\nrag_tool\\n.\\nadd\\n(\\ndata_type\\n=\\n\"file\"\\n,\\n path\\n=\\n\"company_data.pdf\"\\n)\\n\n\n\\n# Define an agent with the RagTool\\n\n\\n@agent\\n\n\\ndef\\n \\nknowledge_expert\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n        config\\n=\\nself\\n.\\nagents_config\\n[\\n\"knowledge_expert\"\\n]\\n,\\n\n\\n        allow_delegation\\n=\\nFalse\\n,\\n\n\\n        tools\\n=\\n[\\nrag_tool\\n]\\n\n\\n    \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent\nfrom crewai.project import agent\nfrom crewai_tools import RagTool\n\n# Initialize the tool and add content\nrag_tool = RagTool()\nrag_tool.add(data_type=\"web_page\", url=\"https://docs.crewai.com\")\nrag_tool.add(data_type=\"file\", path=\"company_data.pdf\")\n\n# Define an agent with the RagTool\n@agent\ndef knowledge_expert(self) -> Agent:\n    return Agent(\n        config=self.agents_config[\"knowledge_expert\"],\n        allow_delegation=False,\n        tools=[rag_tool]\n    )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "You can customize the behavior of the RagTool by providing a configuration dictionary:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Advanced Configuration",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n RagTool\\n\n\n\\n# Create a RAG tool with custom configuration\\n\n\\nconfig \\n=\\n \\n{\\n\n\\n    \\n\"app\"\\n:\\n \\n{\\n\n\\n        \\n\"name\"\\n:\\n \\n\"custom_app\"\\n,\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"llm\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n\"gpt-4\"\\n,\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"embedding_model\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n\"text-embedding-ada-002\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"vectordb\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"elasticsearch\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"collection_name\"\\n:\\n \\n\"my-collection\"\\n,\\n\n\\n            \\n\"cloud_id\"\\n:\\n \\n\"deployment-name:xxxx\"\\n,\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"your-key\"\\n,\\n\n\\n            \\n\"verify_certs\"\\n:\\n \\nFalse\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"chunker\"\\n:\\n \\n{\\n\n\\n        \\n\"chunk_size\"\\n:\\n \\n400\\n,\\n\n\\n        \\n\"chunk_overlap\"\\n:\\n \\n100\\n,\\n\n\\n        \\n\"length_function\"\\n:\\n \\n\"len\"\\n,\\n\n\\n        \\n\"min_chunk_size\"\\n:\\n \\n0\\n\n\\n    \\n}\\n\n\\n}\\n\n\n\\nrag_tool \\n=\\n RagTool\\n(\\nconfig\\n=\\nconfig\\n,\\n summarize\\n=\\nTrue\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import RagTool\n\n# Create a RAG tool with custom configuration\nconfig = {\n    \"app\": {\n        \"name\": \"custom_app\",\n    },\n    \"llm\": {\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": \"gpt-4\",\n        }\n    },\n    \"embedding_model\": {\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": \"text-embedding-ada-002\"\n        }\n    },\n    \"vectordb\": {\n        \"provider\": \"elasticsearch\",\n        \"config\": {\n            \"collection_name\": \"my-collection\",\n            \"cloud_id\": \"deployment-name:xxxx\",\n            \"api_key\": \"your-key\",\n            \"verify_certs\": False\n        }\n    },\n    \"chunker\": {\n        \"chunk_size\": 400,\n        \"chunk_overlap\": 100,\n        \"length_function\": \"len\",\n        \"min_chunk_size\": 0\n    }\n}\n\nrag_tool = RagTool(config=config, summarize=True)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The internal RAG tool utilizes the Embedchain adapter, allowing you to pass any configuration options that are supported by Embedchain.\nYou can refer to the Embedchain documentation for details.\nMake sure to review the configuration options available in the .yaml file.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Advanced Configuration",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "The RagTool provides a powerful way to create and query knowledge bases from various data sources. By leveraging Retrieval-Augmented Generation, it enables agents to access and retrieve relevant information efficiently, enhancing their ability to provide accurate and contextually appropriate responses.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​Conclusion",
            "page_number": 14,
            "type": "paragraph"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/ragtool",
            "topic": "​RagTool",
            "page_number": 14,
            "type": "code_block"
        }
    },
    {
        "content": "The YoutubeChannelSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube channel.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "YouTube Channel RAG Search",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "YouTube Channel RAG Search",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "We are still working on improving tools, so there might be unexpected behavior or changes in the future.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "This tool is designed to perform semantic searches within a specific Youtube channel’s content.\nLeveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,\nmaking it invaluable for extracting information or finding specific content without the need to manually sift through videos.\nIt streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Description",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "To utilize the YoutubeChannelSearchTool, the crewai_tools package must be installed. Execute the following command in your shell to install:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Installation",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai_tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[tools]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[tools]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to use the YoutubeChannelSearchTool with a CrewAI agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Example",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n YoutubeChannelSearchTool\\n\n\n\\n# Initialize the tool for general YouTube channel searches\\n\n\\nyoutube_channel_tool \\n=\\n YoutubeChannelSearchTool\\n(\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\nchannel_researcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Channel Researcher\"\\n,\\n\n\\n    goal\\n=\\n\"Extract relevant information from YouTube channels\"\\n,\\n\n\\n    backstory\\n=\\n\"An expert researcher who specializes in analyzing YouTube channel content.\"\\n,\\n\n\\n    tools\\n=\\n[\\nyoutube_channel_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\n\\n# Example task to search for information in a specific channel\\n\n\\nresearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Search for information about machine learning tutorials in the YouTube channel {youtube_channel_handle}\"\\n,\\n\n\\n    expected_output\\n=\\n\"A summary of the key machine learning tutorials available on the channel.\"\\n,\\n\n\\n    agent\\n=\\nchannel_researcher\\n,\\n\n\\n)\\n\n\n\\n# Create and run the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\nchannel_researcher\\n]\\n,\\n tasks\\n=\\n[\\nresearch_task\\n]\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n\"youtube_channel_handle\"\\n:\\n \\n\"@exampleChannel\"\\n}\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import YoutubeChannelSearchTool\n\n# Initialize the tool for general YouTube channel searches\nyoutube_channel_tool = YoutubeChannelSearchTool()\n\n# Define an agent that uses the tool\nchannel_researcher = Agent(\n    role=\"Channel Researcher\",\n    goal=\"Extract relevant information from YouTube channels\",\n    backstory=\"An expert researcher who specializes in analyzing YouTube channel content.\",\n    tools=[youtube_channel_tool],\n    verbose=True,\n)\n\n# Example task to search for information in a specific channel\nresearch_task = Task(\n    description=\"Search for information about machine learning tutorials in the YouTube channel {youtube_channel_handle}\",\n    expected_output=\"A summary of the key machine learning tutorials available on the channel.\",\n    agent=channel_researcher,\n)\n\n# Create and run the crew\ncrew = Crew(agents=[channel_researcher], tasks=[research_task])\nresult = crew.kickoff(inputs={\"youtube_channel_handle\": \"@exampleChannel\"})",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "You can also initialize the tool with a specific YouTube channel handle:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Example",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "# Initialize the tool with a specific YouTube channel handle\\n\n\\nyoutube_channel_tool \\n=\\n YoutubeChannelSearchTool\\n(\\n\n\\n    youtube_channel_handle\\n=\\n'@exampleChannel'\\n\n\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\nchannel_researcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Channel Researcher\"\\n,\\n\n\\n    goal\\n=\\n\"Extract relevant information from a specific YouTube channel\"\\n,\\n\n\\n    backstory\\n=\\n\"An expert researcher who specializes in analyzing YouTube channel content.\"\\n,\\n\n\\n    tools\\n=\\n[\\nyoutube_channel_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "# Initialize the tool with a specific YouTube channel handle\nyoutube_channel_tool = YoutubeChannelSearchTool(\n    youtube_channel_handle='@exampleChannel'\n)\n\n# Define an agent that uses the tool\nchannel_researcher = Agent(\n    role=\"Channel Researcher\",\n    goal=\"Extract relevant information from a specific YouTube channel\",\n    backstory=\"An expert researcher who specializes in analyzing YouTube channel content.\",\n    tools=[youtube_channel_tool],\n    verbose=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "The YoutubeChannelSearchTool accepts the following parameters:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Parameters",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "False",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "When using the tool with an agent, the agent will need to provide:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Parameters",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Custom Model and Embeddings",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "youtube_channel_tool \\n=\\n YoutubeChannelSearchTool\\n(\\n\n\\n    config\\n=\\ndict\\n(\\n\n\\n        llm\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"ollama\"\\n,\\n \\n# or google, openai, anthropic, llama2, ...\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"llama2\"\\n,\\n\n\\n                \\n# temperature=0.5,\\n\n\\n                \\n# top_p=1,\\n\n\\n                \\n# stream=true,\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n        embedder\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"google\"\\n,\\n \\n# or openai, ollama, ...\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"models/embedding-001\"\\n,\\n\n\\n                task_type\\n=\\n\"retrieval_document\"\\n,\\n\n\\n                \\n# title=\"Embeddings\",\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "youtube_channel_tool = YoutubeChannelSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s a more detailed example of how to integrate the YoutubeChannelSearchTool with a CrewAI agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Agent Integration Example",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n YoutubeChannelSearchTool\\n\n\n\\n# Initialize the tool\\n\n\\nyoutube_channel_tool \\n=\\n YoutubeChannelSearchTool\\n(\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\nchannel_researcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Channel Researcher\"\\n,\\n\n\\n    goal\\n=\\n\"Extract and analyze information from YouTube channels\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You are an expert channel researcher who specializes \\nin\\n extracting \\n\n\\n    \\nand\\n analyzing information \\nfrom\\n YouTube channels\\n.\\n You have a keen eye \\nfor\\n detail \\n\n\\n    \\nand\\n can quickly identify key points \\nand\\n insights \\nfrom\\n video content across an entire channel\\n.\\n\"\"\\n\"\\n,\\n\n\\n    tools\\n=\\n[\\nyoutube_channel_tool\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\n\\n# Create a task for the agent\\n\n\\nresearch_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"\\n\n\\n    Search \\nfor\\n information about data science projects \\nand\\n tutorials \\n\n\\n    \\nin\\n the YouTube channel \\n{\\nyoutube_channel_handle\\n}\\n.\\n \\n\n    \n\\n    Focus on\\n:\\n\n\\n    \\n1.\\n Key data science techniques covered\\n\n\\n    \\n2.\\n Popular tutorial series\\n\n\\n    \\n3.\\n Most viewed \\nor\\n recommended videos\\n\n    \n\\n    Provide a comprehensive summary of these points\\n.\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"A detailed summary of data science content available on the channel.\"\\n,\\n\n\\n    agent\\n=\\nchannel_researcher\\n,\\n\n\\n)\\n\n\n\\n# Run the task\\n\n\\ncrew \\n=\\n Crew\\n(\\nagents\\n=\\n[\\nchannel_researcher\\n]\\n,\\n tasks\\n=\\n[\\nresearch_task\\n]\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\ninputs\\n=\\n{\\n\"youtube_channel_handle\"\\n:\\n \\n\"@exampleDataScienceChannel\"\\n}\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import YoutubeChannelSearchTool\n\n# Initialize the tool\nyoutube_channel_tool = YoutubeChannelSearchTool()\n\n# Define an agent that uses the tool\nchannel_researcher = Agent(\n    role=\"Channel Researcher\",\n    goal=\"Extract and analyze information from YouTube channels\",\n    backstory=\"\"\"You are an expert channel researcher who specializes in extracting \n    and analyzing information from YouTube channels. You have a keen eye for detail \n    and can quickly identify key points and insights from video content across an entire channel.\"\"\",\n    tools=[youtube_channel_tool],\n    verbose=True,\n)\n\n# Create a task for the agent\nresearch_task = Task(\n    description=\"\"\"\n    Search for information about data science projects and tutorials \n    in the YouTube channel {youtube_channel_handle}. \n    \n    Focus on:\n    1. Key data science techniques covered\n    2. Popular tutorial series\n    3. Most viewed or recommended videos\n    \n    Provide a comprehensive summary of these points.\n    \"\"\",\n    expected_output=\"A detailed summary of data science content available on the channel.\",\n    agent=channel_researcher,\n)\n\n# Run the task\ncrew = Crew(agents=[channel_researcher], tasks=[research_task])\nresult = crew.kickoff(inputs={\"youtube_channel_handle\": \"@exampleDataScienceChannel\"})",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "The YoutubeChannelSearchTool is implemented as a subclass of RagTool , which provides the base functionality for Retrieval-Augmented Generation:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Implementation Details",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "RagTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "class\\n \\nYoutubeChannelSearchTool\\n(\\nRagTool\\n)\\n:\\n\n\\n    name\\n:\\n \\nstr\\n \\n=\\n \\n\"Search a Youtube Channels content\"\\n\n\\n    description\\n:\\n \\nstr\\n \\n=\\n \\n\"A tool that can be used to semantic search a query from a Youtube Channels content.\"\\n\n\\n    args_schema\\n:\\n Type\\n[\\nBaseModel\\n]\\n \\n=\\n YoutubeChannelSearchToolSchema\\n\n\n\\n    \\ndef\\n \\n__init__\\n(\\nself\\n,\\n youtube_channel_handle\\n:\\n Optional\\n[\\nstr\\n]\\n \\n=\\n \\nNone\\n,\\n \\n**\\nkwargs\\n)\\n:\\n\n\\n        \\nsuper\\n(\\n)\\n.\\n__init__\\n(\\n**\\nkwargs\\n)\\n\n\\n        \\nif\\n youtube_channel_handle \\nis\\n \\nnot\\n \\nNone\\n:\\n\n\\n            kwargs\\n[\\n\"data_type\"\\n]\\n \\n=\\n DataType\\n.\\nYOUTUBE_CHANNEL\\n\n\\n            self\\n.\\nadd\\n(\\nyoutube_channel_handle\\n)\\n\n\\n            self\\n.\\ndescription \\n=\\n \\nf\"A tool that can be used to semantic search a query the \\n{\\nyoutube_channel_handle\\n}\\n Youtube Channels content.\"\\n\n\\n            self\\n.\\nargs_schema \\n=\\n FixedYoutubeChannelSearchToolSchema\\n\n\\n            self\\n.\\n_generate_description\\n(\\n)\\n\n\n\\n    \\ndef\\n \\nadd\\n(\\n\n\\n        self\\n,\\n\n\\n        youtube_channel_handle\\n:\\n \\nstr\\n,\\n\n\\n        \\n**\\nkwargs\\n:\\n Any\\n,\\n\n\\n    \\n)\\n \\n-\\n>\\n \\nNone\\n:\\n\n\\n        \\nif\\n \\nnot\\n youtube_channel_handle\\n.\\nstartswith\\n(\\n\"@\"\\n)\\n:\\n\n\\n            youtube_channel_handle \\n=\\n \\nf\"@\\n{\\nyoutube_channel_handle\\n}\\n\"\\n\n\\n        \\nsuper\\n(\\n)\\n.\\nadd\\n(\\nyoutube_channel_handle\\n,\\n \\n**\\nkwargs\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "class YoutubeChannelSearchTool(RagTool):\n    name: str = \"Search a Youtube Channels content\"\n    description: str = \"A tool that can be used to semantic search a query from a Youtube Channels content.\"\n    args_schema: Type[BaseModel] = YoutubeChannelSearchToolSchema\n\n    def __init__(self, youtube_channel_handle: Optional[str] = None, **kwargs):\n        super().__init__(**kwargs)\n        if youtube_channel_handle is not None:\n            kwargs[\"data_type\"] = DataType.YOUTUBE_CHANNEL\n            self.add(youtube_channel_handle)\n            self.description = f\"A tool that can be used to semantic search a query the {youtube_channel_handle} Youtube Channels content.\"\n            self.args_schema = FixedYoutubeChannelSearchToolSchema\n            self._generate_description()\n\n    def add(\n        self,\n        youtube_channel_handle: str,\n        **kwargs: Any,\n    ) -> None:\n        if not youtube_channel_handle.startswith(\"@\"):\n            youtube_channel_handle = f\"@{youtube_channel_handle}\"\n        super().add(youtube_channel_handle, **kwargs)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "The YoutubeChannelSearchTool provides a powerful way to search and extract information from YouTube channel content using RAG techniques. By enabling agents to search across an entire channel’s videos, it facilitates information extraction and analysis tasks that would otherwise be difficult to perform. This tool is particularly useful for research, content analysis, and knowledge extraction from YouTube channels.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​Conclusion",
            "page_number": 15,
            "type": "paragraph"
        }
    },
    {
        "content": "YoutubeChannelSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/youtubechannelsearchtool",
            "topic": "​YoutubeChannelSearchTool",
            "page_number": 15,
            "type": "code_block"
        }
    },
    {
        "content": "The MDXSearchTool is designed to search MDX files and return the most relevant results.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "MDX RAG Search",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "MDXSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "MDX RAG Search",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "MDXSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "The MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "The MDX Search Tool is a component of the crewai_tools package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​Description",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai_tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "Before using the MDX Search Tool, ensure the crewai_tools package is installed. If it is not, you can install it with the following command:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​Installation",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai_tools",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[tools]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[tools]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​Usage Example",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n MDXSearchTool\\n\n\n\\n# Initialize the tool to search any MDX content it learns about during execution\\n\n\\ntool \\n=\\n MDXSearchTool\\n(\\n)\\n\n\n\\n# OR\\n\n\n\\n# Initialize the tool with a specific MDX file path for an exclusive search within that document\\n\n\\ntool \\n=\\n MDXSearchTool\\n(\\nmdx\\n=\\n'path/to/your/document.mdx'\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import MDXSearchTool\n\n# Initialize the tool to search any MDX content it learns about during execution\ntool = MDXSearchTool()\n\n# OR\n\n# Initialize the tool with a specific MDX file path for an exclusive search within that document\ntool = MDXSearchTool(mdx='path/to/your/document.mdx')",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​Customization of Model and Embeddings",
            "page_number": 16,
            "type": "paragraph"
        }
    },
    {
        "content": "tool \\n=\\n MDXSearchTool\\n(\\n\n\\n    config\\n=\\ndict\\n(\\n\n\\n        llm\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"ollama\"\\n,\\n \\n# Options include google, openai, anthropic, llama2, etc.\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"llama2\"\\n,\\n\n\\n                \\n# Optional parameters can be included here.\\n\n\\n                \\n# temperature=0.5,\\n\n\\n                \\n# top_p=1,\\n\n\\n                \\n# stream=true,\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n        embedder\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"google\"\\n,\\n \\n# or openai, ollama, ...\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"models/embedding-001\"\\n,\\n\n\\n                task_type\\n=\\n\"retrieval_document\"\\n,\\n\n\\n                \\n# Optional title for the embeddings can be added here.\\n\n\\n                \\n# title=\"Embeddings\",\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "tool = MDXSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # Options include google, openai, anthropic, llama2, etc.\n            config=dict(\n                model=\"llama2\",\n                # Optional parameters can be included here.\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # Optional title for the embeddings can be added here.\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/mdxsearchtool",
            "topic": "​MDXSearchTool",
            "page_number": 16,
            "type": "code_block"
        }
    },
    {
        "content": "Learn how to test your CrewAI Crew and evaluate their performance.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "Testing",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "We added the CLI command crewai test to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are n_iterations and model , which are optional and default to 2 and gpt-4o-mini respectively. For now, the only provider available is OpenAI.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Using the Testing Feature",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai test",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "n_iterations",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "model",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "gpt-4o-mini",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "crewai \\ntest\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "crewai test",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "If you want to run more iterations or use a different model, you can specify the parameters like this:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Using the Testing Feature",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai \\ntest\\n \\n--n_iterations\\n \\n5\\n \\n--model\\n gpt-4o\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "crewai test --n_iterations 5 --model gpt-4o",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "or using the short forms:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Using the Testing Feature",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai \\ntest\\n \\n-n\\n \\n5\\n \\n-m\\n gpt-4o\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "crewai test -n 5 -m gpt-4o",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "When you run the crewai test command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai test",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "code_block"
        }
    },
    {
        "content": "A table of scores at the end will show the performance of the crew in terms of the following metrics:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/testing",
            "topic": "​Introduction",
            "page_number": 17,
            "type": "paragraph"
        }
    },
    {
        "content": "Arize Phoenix integration for CrewAI with OpenTelemetry and OpenInference",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "Arize Phoenix",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "This guide demonstrates how to integrate Arize Phoenix with CrewAI using OpenTelemetry via the OpenInference SDK. By the end of this guide, you will be able to trace your CrewAI agents and easily debug your agents.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "What is Arize Phoenix? Arize Phoenix is an LLM observability platform that provides tracing and evaluation for AI applications.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "We’ll walk through a simple example of using CrewAI and integrating it with Arize Phoenix via OpenTelemetry using OpenInference.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Get Started",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "You can also access this guide on Google Colab .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Get Started",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n openinference-instrumentation-crewai crewai crewai-tools arize-phoenix-otel\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "pip install openinference-instrumentation-crewai crewai crewai-tools arize-phoenix-otel",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "Setup Phoenix Cloud API keys and configure OpenTelemetry to send traces to Phoenix. Phoenix Cloud is a hosted version of Arize Phoenix, but it is not required to use this integration.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 2: Set Up Environment Variables",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "You can get your free Serper API key here .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 2: Set Up Environment Variables",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n os\\n\n\\nfrom\\n getpass \\nimport\\n getpass\\n\n\n\\n# Get your Phoenix Cloud credentials\\n\n\\nPHOENIX_API_KEY \\n=\\n getpass\\n(\\n\"🔑 Enter your Phoenix Cloud API Key: \"\\n)\\n\n\n\\n# Get API keys for services\\n\n\\nOPENAI_API_KEY \\n=\\n getpass\\n(\\n\"🔑 Enter your OpenAI API key: \"\\n)\\n\n\\nSERPER_API_KEY \\n=\\n getpass\\n(\\n\"🔑 Enter your Serper API key: \"\\n)\\n\n\n\\n# Set environment variables\\n\n\\nos\\n.\\nenviron\\n[\\n\"PHOENIX_CLIENT_HEADERS\"\\n]\\n \\n=\\n \\nf\"api_key=\\n{\\nPHOENIX_API_KEY\\n}\\n\"\\n\n\\nos\\n.\\nenviron\\n[\\n\"PHOENIX_COLLECTOR_ENDPOINT\"\\n]\\n \\n=\\n \\n\"https://app.phoenix.arize.com\"\\n \\n# Phoenix Cloud, change this to your own endpoint if you are using a self-hosted instance\\n\n\\nos\\n.\\nenviron\\n[\\n\"OPENAI_API_KEY\"\\n]\\n \\n=\\n OPENAI_API_KEY\\n\n\\nos\\n.\\nenviron\\n[\\n\"SERPER_API_KEY\"\\n]\\n \\n=\\n SERPER_API_KEY\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nfrom getpass import getpass\n\n# Get your Phoenix Cloud credentials\nPHOENIX_API_KEY = getpass(\"🔑 Enter your Phoenix Cloud API Key: \")\n\n# Get API keys for services\nOPENAI_API_KEY = getpass(\"🔑 Enter your OpenAI API key: \")\nSERPER_API_KEY = getpass(\"🔑 Enter your Serper API key: \")\n\n# Set environment variables\nos.environ[\"PHOENIX_CLIENT_HEADERS\"] = f\"api_key={PHOENIX_API_KEY}\"\nos.environ[\"PHOENIX_COLLECTOR_ENDPOINT\"] = \"https://app.phoenix.arize.com\" # Phoenix Cloud, change this to your own endpoint if you are using a self-hosted instance\nos.environ[\"OPENAI_API_KEY\"] = OPENAI_API_KEY\nos.environ[\"SERPER_API_KEY\"] = SERPER_API_KEY",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "Initialize the OpenInference OpenTelemetry instrumentation SDK to start capturing traces and send them to Phoenix.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 3: Initialize OpenTelemetry with Phoenix",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n phoenix\\n.\\notel \\nimport\\n register\\n\n\n\\ntracer_provider \\n=\\n register\\n(\\n\n\\n    project_name\\n=\\n\"crewai-tracing-demo\"\\n,\\n\n\\n    auto_instrument\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "from phoenix.otel import register\n\ntracer_provider = register(\n    project_name=\"crewai-tracing-demo\",\n    auto_instrument=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "We’ll create a CrewAI application where two agents collaborate to research and write a blog post about AI advancements.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 4: Create a CrewAI Application",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\\nfrom\\n openinference\\n.\\ninstrumentation\\n.\\ncrewai \\nimport\\n CrewAIInstrumentor\\n\n\\nfrom\\n phoenix\\n.\\notel \\nimport\\n register\\n\n\n\\n# setup monitoring for your crew\\n\n\\ntracer_provider \\n=\\n register\\n(\\n\n\\n    endpoint\\n=\\n\"http://localhost:6006/v1/traces\"\\n)\\n\n\\nCrewAIInstrumentor\\n(\\n)\\n.\\ninstrument\\n(\\nskip_dep_check\\n=\\nTrue\\n,\\n tracer_provider\\n=\\ntracer_provider\\n)\\n\n\\nsearch_tool \\n=\\n SerperDevTool\\n(\\n)\\n\n\n\\n# Define your agents with roles and goals\\n\n\\nresearcher \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Senior Research Analyst\"\\n,\\n\n\\n    goal\\n=\\n\"Uncover cutting-edge developments in AI and data science\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You work at a leading tech think tank\\n.\\n\n\\n    Your expertise lies \\nin\\n identifying emerging trends\\n.\\n\n\\n    You have a knack \\nfor\\n dissecting \\ncomplex\\n data \\nand\\n presenting actionable insights\\n.\\n\"\"\\n\"\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    allow_delegation\\n=\\nFalse\\n,\\n\n\\n    \\n# You can pass an optional llm attribute specifying what model you wanna use.\\n\n\\n    \\n# llm=ChatOpenAI(model_name=\"gpt-3.5\", temperature=0.7),\\n\n\\n    tools\\n=\\n[\\nsearch_tool\\n]\\n,\\n\n\\n)\\n\n\\nwriter \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Tech Content Strategist\"\\n,\\n\n\\n    goal\\n=\\n\"Craft compelling content on tech advancements\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You are a renowned Content Strategist\\n,\\n known \\nfor\\n your insightful \\nand\\n engaging articles\\n.\\n\n\\n    You transform \\ncomplex\\n concepts into compelling narratives\\n.\\n\"\"\\n\"\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    allow_delegation\\n=\\nTrue\\n,\\n\n\\n)\\n\n\n\\n# Create tasks for your agents\\n\n\\ntask1 \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"Conduct a comprehensive analysis of the latest advancements \\nin\\n AI \\nin\\n \\n2024.\\n\n\\n    Identify key trends\\n,\\n breakthrough technologies\\n,\\n \\nand\\n potential industry impacts\\n.\\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"Full analysis report in bullet points\"\\n,\\n\n\\n    agent\\n=\\nresearcher\\n,\\n\n\\n)\\n\n\n\\ntask2 \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"Using the insights provided\\n,\\n develop an engaging blog\\n\n\\n    post that highlights the most significant AI advancements\\n.\\n\n\\n    Your post should be informative yet accessible\\n,\\n catering to a tech\\n-\\nsavvy audience\\n.\\n\n\\n    Make it sound cool\\n,\\n avoid \\ncomplex\\n words so it doesn't sound like AI\\n.\\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"Full blog post of at least 4 paragraphs\"\\n,\\n\n\\n    agent\\n=\\nwriter\\n,\\n\n\\n)\\n\n\n\\n# Instantiate your crew with a sequential process\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nresearcher\\n,\\n writer\\n]\\n,\\n tasks\\n=\\n[\\ntask1\\n,\\n task2\\n]\\n,\\n verbose\\n=\\n1\\n,\\n process\\n=\\nProcess\\n.\\nsequential\\n\n\\n)\\n\n\n\\n# Get your crew to work!\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\nprint\\n(\\n\"######################\"\\n)\\n\n\\nprint\\n(\\nresult\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Crew, Process, Task\nfrom crewai_tools import SerperDevTool\nfrom openinference.instrumentation.crewai import CrewAIInstrumentor\nfrom phoenix.otel import register\n\n# setup monitoring for your crew\ntracer_provider = register(\n    endpoint=\"http://localhost:6006/v1/traces\")\nCrewAIInstrumentor().instrument(skip_dep_check=True, tracer_provider=tracer_provider)\nsearch_tool = SerperDevTool()\n\n# Define your agents with roles and goals\nresearcher = Agent(\n    role=\"Senior Research Analyst\",\n    goal=\"Uncover cutting-edge developments in AI and data science\",\n    backstory=\"\"\"You work at a leading tech think tank.\n    Your expertise lies in identifying emerging trends.\n    You have a knack for dissecting complex data and presenting actionable insights.\"\"\",\n    verbose=True,\n    allow_delegation=False,\n    # You can pass an optional llm attribute specifying what model you wanna use.\n    # llm=ChatOpenAI(model_name=\"gpt-3.5\", temperature=0.7),\n    tools=[search_tool],\n)\nwriter = Agent(\n    role=\"Tech Content Strategist\",\n    goal=\"Craft compelling content on tech advancements\",\n    backstory=\"\"\"You are a renowned Content Strategist, known for your insightful and engaging articles.\n    You transform complex concepts into compelling narratives.\"\"\",\n    verbose=True,\n    allow_delegation=True,\n)\n\n# Create tasks for your agents\ntask1 = Task(\n    description=\"\"\"Conduct a comprehensive analysis of the latest advancements in AI in 2024.\n    Identify key trends, breakthrough technologies, and potential industry impacts.\"\"\",\n    expected_output=\"Full analysis report in bullet points\",\n    agent=researcher,\n)\n\ntask2 = Task(\n    description=\"\"\"Using the insights provided, develop an engaging blog\n    post that highlights the most significant AI advancements.\n    Your post should be informative yet accessible, catering to a tech-savvy audience.\n    Make it sound cool, avoid complex words so it doesn't sound like AI.\"\"\",\n    expected_output=\"Full blog post of at least 4 paragraphs\",\n    agent=writer,\n)\n\n# Instantiate your crew with a sequential process\ncrew = Crew(\n    agents=[researcher, writer], tasks=[task1, task2], verbose=1, process=Process.sequential\n)\n\n# Get your crew to work!\nresult = crew.kickoff()\n\nprint(\"######################\")\nprint(result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "After running the agent, you can view the traces generated by your CrewAI application in Phoenix. You should see detailed steps of the agent interactions and LLM calls, which can help you debug and optimize your AI agents.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 5: View Traces in Phoenix",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "Log into your Phoenix Cloud account and navigate to the project you specified in the project_name parameter. You’ll see a timeline view of your trace with all the agent interactions, tool usages, and LLM calls.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Step 5: View Traces in Phoenix",
            "page_number": 18,
            "type": "paragraph"
        }
    },
    {
        "content": "project_name",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/arize-phoenix-observability",
            "topic": "​Arize Phoenix Integration",
            "page_number": 18,
            "type": "code_block"
        }
    },
    {
        "content": "Learn how to add planning to your CrewAI Crew and improve their performance.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "Planning",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,\nall Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Introduction",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "Getting started with the planning feature is very easy, the only step required is to add planning=True to your Crew:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Using the Planning Feature",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "planning=True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Introduction",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\n# Assemble your crew with planning capabilities\\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\nself\\n.\\nagents\\n,\\n\n\\n    tasks\\n=\\nself\\n.\\ntasks\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    planning\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Introduction",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with planning capabilities\nmy_crew = Crew(\n    agents=self.agents,\n    tasks=self.tasks,\n    process=Process.sequential,\n    planning=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "Code Example on Planning - CrewAI",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Using the Planning Feature",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "Now you can define the LLM that will be used to plan the tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Planning LLM",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "When running the base case example, you will see something like the output below, which represents the output of the AgentPlanner responsible for creating the step-by-step logic to add to the Agents’ tasks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Planning LLM",
            "page_number": 19,
            "type": "paragraph"
        }
    },
    {
        "content": "AgentPlanner",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Introduction",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\n# Assemble your crew with planning capabilities and custom LLM\\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\nself\\n.\\nagents\\n,\\n\n\\n    tasks\\n=\\nself\\n.\\ntasks\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    planning\\n=\\nTrue\\n,\\n\n\\n    planning_llm\\n=\\n\"gpt-4o\"\\n\n\\n)\\n\n\n\\n# Run the crew\\n\n\\nmy_crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "​Introduction",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with planning capabilities and custom LLM\nmy_crew = Crew(\n    agents=self.agents,\n    tasks=self.tasks,\n    process=Process.sequential,\n    planning=True,\n    planning_llm=\"gpt-4o\"\n)\n\n# Run the crew\nmy_crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/planning",
            "topic": "Code Example on Planning - CrewAI",
            "page_number": 19,
            "type": "code_block"
        }
    },
    {
        "content": "View the latest updates and changes to CrewAI",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "Changelog",
            "page_number": 20,
            "type": "paragraph"
        }
    },
    {
        "content": "result_as_answer",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "@tool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "Agent(...).kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "emit()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "crew.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "model_name",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "uv",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "uv",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "ApifyActorsTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "​Release Highlights",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "QdrantVectorSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/changelog",
            "topic": "Code Example on Changelog - CrewAI",
            "page_number": 20,
            "type": "code_block"
        }
    },
    {
        "content": "Learn how to use Comet Opik to debug, evaluate, and monitor your CrewAI applications with comprehensive tracing, automated evaluations, and production-ready dashboards.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Opik Integration",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "With Comet Opik , debug, evaluate, and monitor your LLM applications, RAG systems, and agentic workflows with comprehensive tracing, automated evaluations, and production-ready dashboards.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "Opik provides comprehensive support for every stage of your CrewAI application development:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "Comet provides a hosted version of the Opik platform, or you can run the platform locally.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Setup",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "To use the hosted version, simply create a free Comet account and grab you API Key.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Setup",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "To run the Opik platform locally, see our installation guide for more information.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Setup",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "For this guide we will use CrewAI’s quickstart example.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Setup",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n crewai crewai-tools opik \\n--upgrade\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "pip install crewai crewai-tools opik --upgrade",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "import\\n opik\\n\n\\nopik\\n.\\nconfigure\\n(\\nuse_local\\n=\\nFalse\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "import opik\nopik.configure(use_local=False)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "First, we set up our API keys for our LLM-provider as environment variables:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n os\\n\n\\nimport\\n getpass\\n\n\n\\nif\\n \\n\"OPENAI_API_KEY\"\\n \\nnot\\n \\nin\\n os\\n.\\nenviron\\n:\\n\n\\nos\\n.\\nenviron\\n[\\n\"OPENAI_API_KEY\"\\n]\\n \\n=\\n getpass\\n.\\ngetpass\\n(\\n\"Enter your OpenAI API key: \"\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nimport getpass\n\nif \"OPENAI_API_KEY\" not in os.environ:\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"Enter your OpenAI API key: \")",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "The first step is to create our project. We will use an example from CrewAI’s documentation:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Task\\n,\\n Process\\n\n\n\n\\nclass\\n \\nYourCrewName\\n:\\n\n\\n    \\ndef\\n \\nagent_one\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n        \\nreturn\\n Agent\\n(\\n\n\\n            role\\n=\\n\"Data Analyst\"\\n,\\n\n\\n            goal\\n=\\n\"Analyze data trends in the market\"\\n,\\n\n\\n            backstory\\n=\\n\"An experienced data analyst with a background in economics\"\\n,\\n\n\\n            verbose\\n=\\nTrue\\n,\\n\n\\n        \\n)\\n\n\n\\n    \\ndef\\n \\nagent_two\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n        \\nreturn\\n Agent\\n(\\n\n\\n            role\\n=\\n\"Market Researcher\"\\n,\\n\n\\n            goal\\n=\\n\"Gather information on market dynamics\"\\n,\\n\n\\n            backstory\\n=\\n\"A diligent researcher with a keen eye for detail\"\\n,\\n\n\\n            verbose\\n=\\nTrue\\n,\\n\n\\n        \\n)\\n\n\n\\n    \\ndef\\n \\ntask_one\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n        \\nreturn\\n Task\\n(\\n\n\\n            name\\n=\\n\"Collect Data Task\"\\n,\\n\n\\n            description\\n=\\n\"Collect recent market data and identify trends.\"\\n,\\n\n\\n            expected_output\\n=\\n\"A report summarizing key trends in the market.\"\\n,\\n\n\\n            agent\\n=\\nself\\n.\\nagent_one\\n(\\n)\\n,\\n\n\\n        \\n)\\n\n\n\\n    \\ndef\\n \\ntask_two\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n        \\nreturn\\n Task\\n(\\n\n\\n            name\\n=\\n\"Market Research Task\"\\n,\\n\n\\n            description\\n=\\n\"Research factors affecting market dynamics.\"\\n,\\n\n\\n            expected_output\\n=\\n\"An analysis of factors influencing the market.\"\\n,\\n\n\\n            agent\\n=\\nself\\n.\\nagent_two\\n(\\n)\\n,\\n\n\\n        \\n)\\n\n\n\\n    \\ndef\\n \\ncrew\\n(\\nself\\n)\\n \\n-\\n>\\n Crew\\n:\\n\n\\n        \\nreturn\\n Crew\\n(\\n\n\\n            agents\\n=\\n[\\nself\\n.\\nagent_one\\n(\\n)\\n,\\n self\\n.\\nagent_two\\n(\\n)\\n]\\n,\\n\n\\n            tasks\\n=\\n[\\nself\\n.\\ntask_one\\n(\\n)\\n,\\n self\\n.\\ntask_two\\n(\\n)\\n]\\n,\\n\n\\n            process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n            verbose\\n=\\nTrue\\n,\\n\n\\n        \\n)\\n\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Crew, Task, Process\n\n\nclass YourCrewName:\n    def agent_one(self) -> Agent:\n        return Agent(\n            role=\"Data Analyst\",\n            goal=\"Analyze data trends in the market\",\n            backstory=\"An experienced data analyst with a background in economics\",\n            verbose=True,\n        )\n\n    def agent_two(self) -> Agent:\n        return Agent(\n            role=\"Market Researcher\",\n            goal=\"Gather information on market dynamics\",\n            backstory=\"A diligent researcher with a keen eye for detail\",\n            verbose=True,\n        )\n\n    def task_one(self) -> Task:\n        return Task(\n            name=\"Collect Data Task\",\n            description=\"Collect recent market data and identify trends.\",\n            expected_output=\"A report summarizing key trends in the market.\",\n            agent=self.agent_one(),\n        )\n\n    def task_two(self) -> Task:\n        return Task(\n            name=\"Market Research Task\",\n            description=\"Research factors affecting market dynamics.\",\n            expected_output=\"An analysis of factors influencing the market.\",\n            agent=self.agent_two(),\n        )\n\n    def crew(self) -> Crew:\n        return Crew(\n            agents=[self.agent_one(), self.agent_two()],\n            tasks=[self.task_one(), self.task_two()],\n            process=Process.sequential,\n            verbose=True,\n        )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "Now we can import Opik’s tracker and run our crew:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n opik\\n.\\nintegrations\\n.\\ncrewai \\nimport\\n track_crewai\\n\n\n\\ntrack_crewai\\n(\\nproject_name\\n=\\n\"crewai-integration-demo\"\\n)\\n\n\n\\nmy_crew \\n=\\n YourCrewName\\n(\\n)\\n.\\ncrew\\n(\\n)\\n\n\\nresult \\n=\\n my_crew\\n.\\nkickoff\\n(\\n)\\n\n\n\\nprint\\n(\\nresult\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "from opik.integrations.crewai import track_crewai\n\ntrack_crewai(project_name=\"crewai-integration-demo\")\n\nmy_crew = YourCrewName().crew()\nresult = my_crew.kickoff()\n\nprint(result)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "Code Example on Opik Integration - CrewAI",
            "page_number": 21,
            "type": "code_block"
        }
    },
    {
        "content": "After running your CrewAI application, visit the Opik app to view:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/how-to/opik-observability",
            "topic": "​Opik Overview",
            "page_number": 21,
            "type": "paragraph"
        }
    },
    {
        "content": "The WebsiteSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a website.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "Website RAG Search",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "WebsiteSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "Website RAG Search",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "WebsiteSearchTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "The WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.\nIt aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.\nThis tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.\nPlease note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​Description",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​Installation",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[tools]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[tools]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​Installation",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​Example Usage",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n WebsiteSearchTool\\n\n\n\\n# Example of initiating tool that agents can use \\n\n\\n# to search across any discovered websites\\n\n\\ntool \\n=\\n WebsiteSearchTool\\n(\\n)\\n\n\n\\n# Example of limiting the search to the content of a specific website, \\n\n\\n# so now agents can only search within that website\\n\n\\ntool \\n=\\n WebsiteSearchTool\\n(\\nwebsite\\n=\\n'https://example.com'\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import WebsiteSearchTool\n\n# Example of initiating tool that agents can use \n# to search across any discovered websites\ntool = WebsiteSearchTool()\n\n# Example of limiting the search to the content of a specific website, \n# so now agents can only search within that website\ntool = WebsiteSearchTool(website='https://example.com')",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "website",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​Customization Options",
            "page_number": 22,
            "type": "paragraph"
        }
    },
    {
        "content": "tool \\n=\\n WebsiteSearchTool\\n(\\n\n\\n    config\\n=\\ndict\\n(\\n\n\\n        llm\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"ollama\"\\n,\\n \\n# or google, openai, anthropic, llama2, ...\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"llama2\"\\n,\\n\n\\n                \\n# temperature=0.5,\\n\n\\n                \\n# top_p=1,\\n\n\\n                \\n# stream=true,\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n        embedder\\n=\\ndict\\n(\\n\n\\n            provider\\n=\\n\"google\"\\n,\\n \\n# or openai, ollama, ...\\n\n\\n            config\\n=\\ndict\\n(\\n\n\\n                model\\n=\\n\"models/embedding-001\"\\n,\\n\n\\n                task_type\\n=\\n\"retrieval_document\"\\n,\\n\n\\n                \\n# title=\"Embeddings\",\\n\n\\n            \\n)\\n,\\n\n\\n        \\n)\\n,\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "tool = WebsiteSearchTool(\n    config=dict(\n        llm=dict(\n            provider=\"ollama\", # or google, openai, anthropic, llama2, ...\n            config=dict(\n                model=\"llama2\",\n                # temperature=0.5,\n                # top_p=1,\n                # stream=true,\n            ),\n        ),\n        embedder=dict(\n            provider=\"google\", # or openai, ollama, ...\n            config=dict(\n                model=\"models/embedding-001\",\n                task_type=\"retrieval_document\",\n                # title=\"Embeddings\",\n            ),\n        ),\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/websitesearchtool",
            "topic": "​WebsiteSearchTool",
            "page_number": 22,
            "type": "code_block"
        }
    },
    {
        "content": "Build your first AI agent with CrewAI in under 5 minutes.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Quickstart",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Let’s create a simple crew that will help us research and report on the latest AI developments for a given topic or subject.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "research",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "report",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "latest AI developments",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Before we proceed, make sure you have finished installing CrewAI.\nIf you haven’t installed them yet, you can do so by following the installation guide .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Follow the steps below to get Crewing! 🚣‍♂️",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Create a new crew project by running the following command in your terminal.\nThis will create a new directory called latest-ai-development with the basic structure for your crew.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "latest-ai-development",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crewai create crew latest-ai-development\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crewai create crew latest-ai-development",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Navigate to your new crew project",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "cd\\n latest-ai-development\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "cd latest-ai-development",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "You can also modify the agents as needed to fit your use case or copy and paste as is to your project.\nAny variable interpolated in your agents.yaml and tasks.yaml files like {topic} will be replaced by the value of the variable in the main.py file.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Quickstart - CrewAI",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "{topic}",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "main.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/config/agents.yaml\\n\n\\nresearcher\\n:\\n\n\\n  \\nrole\\n:\\n \\n>\\n\n\\n    \\n{\\ntopic\\n}\\n Senior Data Researcher\\n\n\\n  \\ngoal\\n:\\n \\n>\\n\n\\n    Uncover cutting\\n-\\nedge developments in \\n{\\ntopic\\n}\\n\n\\n  \\nbackstory\\n:\\n \\n>\\n\n\\n    You're a seasoned researcher with a knack for uncovering the latest\\n\n\\n    developments in \\n{\\ntopic\\n}\\n. Known for your ability to find the most relevant\\n\n\\n    information and present it in a clear and concise manner.\\n\n\n\\nreporting_analyst\\n:\\n\n\\n  \\nrole\\n:\\n \\n>\\n\n\\n    \\n{\\ntopic\\n}\\n Reporting Analyst\\n\n\\n  \\ngoal\\n:\\n \\n>\\n\n\\n    Create detailed reports based on \\n{\\ntopic\\n}\\n data analysis and research findings\\n\n\\n  \\nbackstory\\n:\\n \\n>\\n\n\\n    You're a meticulous analyst with a keen eye for detail. You're known for\\n\n\\n    your ability to turn complex data into clear and concise reports\\n,\\n making\\n\n\\n    it easy for others to understand and act on the information you provide.\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/config/agents.yaml\nresearcher:\n  role: >\n    {topic} Senior Data Researcher\n  goal: >\n    Uncover cutting-edge developments in {topic}\n  backstory: >\n    You're a seasoned researcher with a knack for uncovering the latest\n    developments in {topic}. Known for your ability to find the most relevant\n    information and present it in a clear and concise manner.\n\nreporting_analyst:\n  role: >\n    {topic} Reporting Analyst\n  goal: >\n    Create detailed reports based on {topic} data analysis and research findings\n  backstory: >\n    You're a meticulous analyst with a keen eye for detail. You're known for\n    your ability to turn complex data into clear and concise reports, making\n    it easy for others to understand and act on the information you provide.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/config/tasks.yaml\\n\n\\nresearch_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    Conduct a thorough research about \\n{\\ntopic\\n}\\n\n\\n    Make sure you find any interesting and relevant information given\\n\n\\n    the current year is 2025.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    A list with 10 bullet points of the most relevant information about \\n{\\ntopic\\n}\\n\n\\n  \\nagent\\n:\\n researcher\\n\n\n\\nreporting_task\\n:\\n\n\\n  \\ndescription\\n:\\n \\n>\\n\n\\n    Review the context you got and expand each topic into a full section for a report.\\n\n\\n    Make sure the report is detailed and contains any and all relevant information.\\n\n\\n  \\nexpected_output\\n:\\n \\n>\\n\n\\n    A fully fledge reports with the mains topics\\n,\\n each with a full section of information.\\n\n\\n    Formatted as markdown without '```'\\n\n\\n  \\nagent\\n:\\n reporting_analyst\\n\n\\n  \\noutput_file\\n:\\n report.md\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/config/tasks.yaml\nresearch_task:\n  description: >\n    Conduct a thorough research about {topic}\n    Make sure you find any interesting and relevant information given\n    the current year is 2025.\n  expected_output: >\n    A list with 10 bullet points of the most relevant information about {topic}\n  agent: researcher\n\nreporting_task:\n  description: >\n    Review the context you got and expand each topic into a full section for a report.\n    Make sure the report is detailed and contains any and all relevant information.\n  expected_output: >\n    A fully fledge reports with the mains topics, each with a full section of information.\n    Formatted as markdown without '```'\n  agent: reporting_analyst\n  output_file: report.md",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nproject \\nimport\\n CrewBase\\n,\\n agent\\n,\\n crew\\n,\\n task\\n\n\\nfrom\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\\nfrom\\n crewai\\n.\\nagents\\n.\\nagent_builder\\n.\\nbase_agent \\nimport\\n BaseAgent\\n\n\\nfrom\\n typing \\nimport\\n List\\n\n\n\\n@CrewBase\\n\n\\nclass\\n \\nLatestAiDevelopmentCrew\\n(\\n)\\n:\\n\n\\n  \\n\"\"\"LatestAiDevelopment crew\"\"\"\\n\n\n\\n  agents\\n:\\n List\\n[\\nBaseAgent\\n]\\n\n\\n  tasks\\n:\\n List\\n[\\nTask\\n]\\n\n\n\\n  \\n@agent\\n\n\\n  \\ndef\\n \\nresearcher\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n      config\\n=\\nself\\n.\\nagents_config\\n[\\n'researcher'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n      verbose\\n=\\nTrue\\n,\\n\n\\n      tools\\n=\\n[\\nSerperDevTool\\n(\\n)\\n]\\n\n\\n    \\n)\\n\n\n\\n  \\n@agent\\n\n\\n  \\ndef\\n \\nreporting_analyst\\n(\\nself\\n)\\n \\n-\\n>\\n Agent\\n:\\n\n\\n    \\nreturn\\n Agent\\n(\\n\n\\n      config\\n=\\nself\\n.\\nagents_config\\n[\\n'reporting_analyst'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n      verbose\\n=\\nTrue\\n\n\\n    \\n)\\n\n\n\\n  \\n@task\\n\n\\n  \\ndef\\n \\nresearch_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n    \\nreturn\\n Task\\n(\\n\n\\n      config\\n=\\nself\\n.\\ntasks_config\\n[\\n'research_task'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n    \\n)\\n\n\n\\n  \\n@task\\n\n\\n  \\ndef\\n \\nreporting_task\\n(\\nself\\n)\\n \\n-\\n>\\n Task\\n:\\n\n\\n    \\nreturn\\n Task\\n(\\n\n\\n      config\\n=\\nself\\n.\\ntasks_config\\n[\\n'reporting_task'\\n]\\n,\\n \\n# type: ignore[index]\\n\n\\n      output_file\\n=\\n'output/report.md'\\n \\n# This is the file that will be contain the final report.\\n\n\\n    \\n)\\n\n\n\\n  \\n@crew\\n\n\\n  \\ndef\\n \\ncrew\\n(\\nself\\n)\\n \\n-\\n>\\n Crew\\n:\\n\n\\n    \\n\"\"\"Creates the LatestAiDevelopment crew\"\"\"\\n\n\\n    \\nreturn\\n Crew\\n(\\n\n\\n      agents\\n=\\nself\\n.\\nagents\\n,\\n \\n# Automatically created by the @agent decorator\\n\n\\n      tasks\\n=\\nself\\n.\\ntasks\\n,\\n \\n# Automatically created by the @task decorator\\n\n\\n      process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n      verbose\\n=\\nTrue\\n,\\n\n\\n    \\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task\nfrom crewai_tools import SerperDevTool\nfrom crewai.agents.agent_builder.base_agent import BaseAgent\nfrom typing import List\n\n@CrewBase\nclass LatestAiDevelopmentCrew():\n  \"\"\"LatestAiDevelopment crew\"\"\"\n\n  agents: List[BaseAgent]\n  tasks: List[Task]\n\n  @agent\n  def researcher(self) -> Agent:\n    return Agent(\n      config=self.agents_config['researcher'], # type: ignore[index]\n      verbose=True,\n      tools=[SerperDevTool()]\n    )\n\n  @agent\n  def reporting_analyst(self) -> Agent:\n    return Agent(\n      config=self.agents_config['reporting_analyst'], # type: ignore[index]\n      verbose=True\n    )\n\n  @task\n  def research_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['research_task'], # type: ignore[index]\n    )\n\n  @task\n  def reporting_task(self) -> Task:\n    return Task(\n      config=self.tasks_config['reporting_task'], # type: ignore[index]\n      output_file='output/report.md' # This is the file that will be contain the final report.\n    )\n\n  @crew\n  def crew(self) -> Crew:\n    \"\"\"Creates the LatestAiDevelopment crew\"\"\"\n    return Crew(\n      agents=self.agents, # Automatically created by the @agent decorator\n      tasks=self.tasks, # Automatically created by the @task decorator\n      process=Process.sequential,\n      verbose=True,\n    )",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "[Optional] Add before and after crew functions",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nproject \\nimport\\n CrewBase\\n,\\n agent\\n,\\n crew\\n,\\n task\\n,\\n before_kickoff\\n,\\n after_kickoff\\n\n\\nfrom\\n crewai_tools \\nimport\\n SerperDevTool\\n\n\n\\n@CrewBase\\n\n\\nclass\\n \\nLatestAiDevelopmentCrew\\n(\\n)\\n:\\n\n\\n  \\n\"\"\"LatestAiDevelopment crew\"\"\"\\n\n\n\\n  \\n@before_kickoff\\n\n\\n  \\ndef\\n \\nbefore_kickoff_function\\n(\\nself\\n,\\n inputs\\n)\\n:\\n\n\\n    \\nprint\\n(\\nf\"Before kickoff function with inputs: \\n{\\ninputs\\n}\\n\"\\n)\\n\n\\n    \\nreturn\\n inputs \\n# You can return the inputs or modify them as needed\\n\n\n\\n  \\n@after_kickoff\\n\n\\n  \\ndef\\n \\nafter_kickoff_function\\n(\\nself\\n,\\n result\\n)\\n:\\n\n\\n    \\nprint\\n(\\nf\"After kickoff function with result: \\n{\\nresult\\n}\\n\"\\n)\\n\n\\n    \\nreturn\\n result \\n# You can return the result or modify it as needed\\n\n\n\\n  \\n# ... remaining code\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# src/latest_ai_development/crew.py\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.project import CrewBase, agent, crew, task, before_kickoff, after_kickoff\nfrom crewai_tools import SerperDevTool\n\n@CrewBase\nclass LatestAiDevelopmentCrew():\n  \"\"\"LatestAiDevelopment crew\"\"\"\n\n  @before_kickoff\n  def before_kickoff_function(self, inputs):\n    print(f\"Before kickoff function with inputs: {inputs}\")\n    return inputs # You can return the inputs or modify them as needed\n\n  @after_kickoff\n  def after_kickoff_function(self, result):\n    print(f\"After kickoff function with result: {result}\")\n    return result # You can return the result or modify it as needed\n\n  # ... remaining code",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Feel free to pass custom inputs to your crew",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "For example, you can pass the topic input to your crew to customize the research and reporting.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "topic",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "#!/usr/bin/env python\\n\n\\n# src/latest_ai_development/main.py\\n\n\\nimport\\n sys\\n\n\\nfrom\\n latest_ai_development\\n.\\ncrew \\nimport\\n LatestAiDevelopmentCrew\\n\n\n\\ndef\\n \\nrun\\n(\\n)\\n:\\n\n\\n  \\n\"\"\\n\"\\n\n\\n  Run the crew\\n.\\n\n\\n  \\n\"\"\\n\"\\n\n\\n  inputs \\n=\\n \\n{\\n\n\\n    \\n'topic'\\n:\\n \\n'AI Agents'\\n\n\\n  \\n}\\n\n\\n  LatestAiDevelopmentCrew\\n(\\n)\\n.\\ncrew\\n(\\n)\\n.\\nkickoff\\n(\\ninputs\\n=\\ninputs\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "#!/usr/bin/env python\n# src/latest_ai_development/main.py\nimport sys\nfrom latest_ai_development.crew import LatestAiDevelopmentCrew\n\ndef run():\n  \"\"\"\n  Run the crew.\n  \"\"\"\n  inputs = {\n    'topic': 'AI Agents'\n  }\n  LatestAiDevelopmentCrew().crew().kickoff(inputs=inputs)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Before running your crew, make sure you have the following keys set as environment variables in your .env file:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": ".env",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "SERPER_API_KEY=YOUR_KEY_HERE",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Lock and install the dependencies",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "crewai \\ninstall\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crewai install",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "uv \\nadd\\n \\n<\\npackage-name\\n>\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "uv add <package-name>",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crewai run\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crewai run",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Enterprise Alternative: Create in Crew Studio",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "For CrewAI Enterprise users, you can create the same crew without writing code:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Start your free account at CrewAI Enterprise",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "You should see the output in the console and the report.md file should be created in the root of your project with the final report.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "report.md",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s an example of what the report should look like:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Try CrewAI Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "#\\n Comprehensive Report on the Rise and Impact of AI Agents in 2025\\n\n\n\\n##\\n 1. Introduction to AI Agents\\n\n\\nIn 2025, Artificial Intelligence (AI) agents are at the forefront of innovation across various industries. As intelligent systems that can perform tasks typically requiring human cognition, AI agents are paving the way for significant advancements in operational efficiency, decision-making, and overall productivity within sectors like Human Resources (HR) and Finance. This report aims to detail the rise of AI agents, their frameworks, applications, and potential implications on the workforce.\\n\n\n\\n##\\n 2. Benefits of AI Agents\\n\n\\nAI agents bring numerous advantages that are transforming traditional work environments. Key benefits include:\\n\n\n\\n-\\n \\n**\\nTask Automation\\n**\\n: AI agents can carry out repetitive tasks such as data entry, scheduling, and payroll processing without human intervention, greatly reducing the time and resources spent on these activities.\\n\n\\n-\\n \\n**\\nImproved Efficiency\\n**\\n: By quickly processing large datasets and performing analyses that would take humans significantly longer, AI agents enhance operational efficiency. This allows teams to focus on strategic tasks that require higher-level thinking.\\n\n\\n-\\n \\n**\\nEnhanced Decision-Making\\n**\\n: AI agents can analyze trends and patterns in data, provide insights, and even suggest actions, helping stakeholders make informed decisions based on factual data rather than intuition alone.\\n\n\n\\n##\\n 3. Popular AI Agent Frameworks\\n\n\\nSeveral frameworks have emerged to facilitate the development of AI agents, each with its own unique features and capabilities. Some of the most popular frameworks include:\\n\n\n\\n-\\n \\n**\\nAutogen\\n**\\n: A framework designed to streamline the development of AI agents through automation of code generation.\\n\n\\n-\\n \\n**\\nSemantic Kernel\\n**\\n: Focuses on natural language processing and understanding, enabling agents to comprehend user intentions better.\\n\n\\n-\\n \\n**\\nPromptflow\\n**\\n: Provides tools for developers to create conversational agents that can navigate complex interactions seamlessly.\\n\n\\n-\\n \\n**\\nLangchain\\n**\\n: Specializes in leveraging various APIs to ensure agents can access and utilize external data effectively.\\n\n\\n-\\n \\n**\\nCrewAI\\n**\\n: Aimed at collaborative environments, CrewAI strengthens teamwork by facilitating communication through AI-driven insights.\\n\n\\n-\\n \\n**\\nMemGPT\\n**\\n: Combines memory-optimized architectures with generative capabilities, allowing for more personalized interactions with users.\\n\n\n\\nThese frameworks empower developers to build versatile and intelligent agents that can engage users, perform advanced analytics, and execute various tasks aligned with organizational goals.\\n\n\n\\n##\\n 4. AI Agents in Human Resources\\n\n\\nAI agents are revolutionizing HR practices by automating and optimizing key functions:\\n\n\n\\n-\\n \\n**\\nRecruiting\\n**\\n: AI agents can screen resumes, schedule interviews, and even conduct initial assessments, thus accelerating the hiring process while minimizing biases.\\n\n\\n-\\n \\n**\\nSuccession Planning\\n**\\n: AI systems analyze employee performance data and potential, helping organizations identify future leaders and plan appropriate training.\\n\n\\n-\\n \\n**\\nEmployee Engagement\\n**\\n: Chatbots powered by AI can facilitate feedback loops between employees and management, promoting an open culture and addressing concerns promptly.\\n\n\n\\nAs AI continues to evolve, HR departments leveraging these agents can realize substantial improvements in both efficiency and employee satisfaction.\\n\n\n\\n##\\n 5. AI Agents in Finance\\n\n\\nThe finance sector is seeing extensive integration of AI agents that enhance financial practices:\\n\n\n\\n-\\n \\n**\\nExpense Tracking\\n**\\n: Automated systems manage and monitor expenses, flagging anomalies and offering recommendations based on spending patterns.\\n\n\\n-\\n \\n**\\nRisk Assessment\\n**\\n: AI models assess credit risk and uncover potential fraud by analyzing transaction data and behavioral patterns.\\n\n\\n-\\n \\n**\\nInvestment Decisions\\n**\\n: AI agents provide stock predictions and analytics based on historical data and current market conditions, empowering investors with informative insights.\\n\n\n\\nThe incorporation of AI agents into finance is fostering a more responsive and risk-aware financial landscape.\\n\n\n\\n##\\n 6. Market Trends and Investments\\n\n\\nThe growth of AI agents has attracted significant investment, especially amidst the rising popularity of chatbots and generative AI technologies. Companies and entrepreneurs are eager to explore the potential of these systems, recognizing their ability to streamline operations and improve customer engagement.\\n\n\n\\nConversely, corporations like Microsoft are taking strides to integrate AI agents into their product offerings, with enhancements to their Copilot 365 applications. This strategic move emphasizes the importance of AI literacy in the modern workplace and indicates the stabilizing of AI agents as essential business tools.\\n\n\n\\n##\\n 7. Future Predictions and Implications\\n\n\\nExperts predict that AI agents will transform essential aspects of work life. As we look toward the future, several anticipated changes include:\\n\n\n\\n-\\n Enhanced integration of AI agents across all business functions, creating interconnected systems that leverage data from various departmental silos for comprehensive decision-making.\\n\n\\n-\\n Continued advancement of AI technologies, resulting in smarter, more adaptable agents capable of learning and evolving from user interactions.\\n\n\\n-\\n Increased regulatory scrutiny to ensure ethical use, especially concerning data privacy and employee surveillance as AI agents become more prevalent.\\n\n\n\\nTo stay competitive and harness the full potential of AI agents, organizations must remain vigilant about latest developments in AI technology and consider continuous learning and adaptation in their strategic planning.\\n\n\n\\n##\\n 8. Conclusion\\n\n\\nThe emergence of AI agents is undeniably reshaping the workplace landscape in 5. With their ability to automate tasks, enhance efficiency, and improve decision-making, AI agents are critical in driving operational success. Organizations must embrace and adapt to AI developments to thrive in an increasingly digital business environment.\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "# Comprehensive Report on the Rise and Impact of AI Agents in 2025\n\n## 1. Introduction to AI Agents\nIn 2025, Artificial Intelligence (AI) agents are at the forefront of innovation across various industries. As intelligent systems that can perform tasks typically requiring human cognition, AI agents are paving the way for significant advancements in operational efficiency, decision-making, and overall productivity within sectors like Human Resources (HR) and Finance. This report aims to detail the rise of AI agents, their frameworks, applications, and potential implications on the workforce.\n\n## 2. Benefits of AI Agents\nAI agents bring numerous advantages that are transforming traditional work environments. Key benefits include:\n\n- **Task Automation**: AI agents can carry out repetitive tasks such as data entry, scheduling, and payroll processing without human intervention, greatly reducing the time and resources spent on these activities.\n- **Improved Efficiency**: By quickly processing large datasets and performing analyses that would take humans significantly longer, AI agents enhance operational efficiency. This allows teams to focus on strategic tasks that require higher-level thinking.\n- **Enhanced Decision-Making**: AI agents can analyze trends and patterns in data, provide insights, and even suggest actions, helping stakeholders make informed decisions based on factual data rather than intuition alone.\n\n## 3. Popular AI Agent Frameworks\nSeveral frameworks have emerged to facilitate the development of AI agents, each with its own unique features and capabilities. Some of the most popular frameworks include:\n\n- **Autogen**: A framework designed to streamline the development of AI agents through automation of code generation.\n- **Semantic Kernel**: Focuses on natural language processing and understanding, enabling agents to comprehend user intentions better.\n- **Promptflow**: Provides tools for developers to create conversational agents that can navigate complex interactions seamlessly.\n- **Langchain**: Specializes in leveraging various APIs to ensure agents can access and utilize external data effectively.\n- **CrewAI**: Aimed at collaborative environments, CrewAI strengthens teamwork by facilitating communication through AI-driven insights.\n- **MemGPT**: Combines memory-optimized architectures with generative capabilities, allowing for more personalized interactions with users.\n\nThese frameworks empower developers to build versatile and intelligent agents that can engage users, perform advanced analytics, and execute various tasks aligned with organizational goals.\n\n## 4. AI Agents in Human Resources\nAI agents are revolutionizing HR practices by automating and optimizing key functions:\n\n- **Recruiting**: AI agents can screen resumes, schedule interviews, and even conduct initial assessments, thus accelerating the hiring process while minimizing biases.\n- **Succession Planning**: AI systems analyze employee performance data and potential, helping organizations identify future leaders and plan appropriate training.\n- **Employee Engagement**: Chatbots powered by AI can facilitate feedback loops between employees and management, promoting an open culture and addressing concerns promptly.\n\nAs AI continues to evolve, HR departments leveraging these agents can realize substantial improvements in both efficiency and employee satisfaction.\n\n## 5. AI Agents in Finance\nThe finance sector is seeing extensive integration of AI agents that enhance financial practices:\n\n- **Expense Tracking**: Automated systems manage and monitor expenses, flagging anomalies and offering recommendations based on spending patterns.\n- **Risk Assessment**: AI models assess credit risk and uncover potential fraud by analyzing transaction data and behavioral patterns.\n- **Investment Decisions**: AI agents provide stock predictions and analytics based on historical data and current market conditions, empowering investors with informative insights.\n\nThe incorporation of AI agents into finance is fostering a more responsive and risk-aware financial landscape.\n\n## 6. Market Trends and Investments\nThe growth of AI agents has attracted significant investment, especially amidst the rising popularity of chatbots and generative AI technologies. Companies and entrepreneurs are eager to explore the potential of these systems, recognizing their ability to streamline operations and improve customer engagement.\n\nConversely, corporations like Microsoft are taking strides to integrate AI agents into their product offerings, with enhancements to their Copilot 365 applications. This strategic move emphasizes the importance of AI literacy in the modern workplace and indicates the stabilizing of AI agents as essential business tools.\n\n## 7. Future Predictions and Implications\nExperts predict that AI agents will transform essential aspects of work life. As we look toward the future, several anticipated changes include:\n\n- Enhanced integration of AI agents across all business functions, creating interconnected systems that leverage data from various departmental silos for comprehensive decision-making.\n- Continued advancement of AI technologies, resulting in smarter, more adaptable agents capable of learning and evolving from user interactions.\n- Increased regulatory scrutiny to ensure ethical use, especially concerning data privacy and employee surveillance as AI agents become more prevalent.\n\nTo stay competitive and harness the full potential of AI agents, organizations must remain vigilant about latest developments in AI technology and consider continuous learning and adaptation in their strategic planning.\n\n## 8. Conclusion\nThe emergence of AI agents is undeniably reshaping the workplace landscape in 5. With their ability to automate tasks, enhance efficiency, and improve decision-making, AI agents are critical in driving operational success. Organizations must embrace and adapt to AI developments to thrive in an increasingly digital business environment.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Code Example on Quickstart - CrewAI",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "You have successfully set up your crew project and are ready to start building your own agentic workflows!",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "The names you use in your YAML files ( agents.yaml and tasks.yaml ) should match the method names in your Python code.\nFor example, you can reference the agent for specific tasks from tasks.yaml file.\nThis naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won’t recognize the reference properly.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Note on Consistency in Naming",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Note how we use the same name for the agent in the agents.yaml ( email_summarizer ) file as the method name in the crew.py ( email_summarizer ) file.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "agents.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crew.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer\\n:\\n\n\\n    \\nrole\\n:\\n \\n>\\n\n\\n      Email Summarizer\\n\n\\n    \\ngoal\\n:\\n \\n>\\n\n\\n      Summarize emails into a concise and clear summary\\n\n\\n    \\nbackstory\\n:\\n \\n>\\n\n\\n      You will create a 5 bullet point summary of the report\\n\n\\n    \\nllm\\n:\\n provider/model\\n-\\nid  \\n# Add your choice of model here\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer:\n    role: >\n      Email Summarizer\n    goal: >\n      Summarize emails into a concise and clear summary\n    backstory: >\n      You will create a 5 bullet point summary of the report\n    llm: provider/model-id  # Add your choice of model here",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "Note how we use the same name for the task in the tasks.yaml ( email_summarizer_task ) file as the method name in the crew.py ( email_summarizer_task ) file.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "tasks.yaml",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer_task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "crew.py",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer_task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer_task\\n:\\n\n\\n    \\ndescription\\n:\\n \\n>\\n\n\\n      Summarize the email into a 5 bullet point summary\\n\n\\n    \\nexpected_output\\n:\\n \\n>\\n\n\\n      A 5 bullet point summary of the email\\n\n\\n    \\nagent\\n:\\n email_summarizer\\n\n\\n    context\\n:\\n\n\\n      \\n-\\n reporting_task\\n\n\\n      \\n-\\n research_task\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "email_summarizer_task:\n    description: >\n      Summarize the email into a 5 bullet point summary\n    expected_output: >\n      A 5 bullet point summary of the email\n    agent: email_summarizer\n    context:\n      - reporting_task\n      - research_task",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Build your first CrewAI Agent",
            "page_number": 23,
            "type": "code_block"
        }
    },
    {
        "content": "The easiest way to deploy your crew to production is through CrewAI Enterprise .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Deploying Your Crew",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Watch this video tutorial for a step-by-step demonstration of deploying your crew to CrewAI Enterprise using the CLI.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "​Deploying Your Crew",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Get started with CrewAI Enterprise and deploy your crew in a production environment with just a few clicks.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Deploy on Enterprise",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "Join our open source community to discuss ideas, share your projects, and connect with other CrewAI developers.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/quickstart",
            "topic": "Join the Community",
            "page_number": 23,
            "type": "paragraph"
        }
    },
    {
        "content": "The CodeInterpreterTool is a powerful tool designed for executing Python 3 code within a secure, isolated environment.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "Code Interpreter",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "Code Interpreter",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The CodeInterpreterTool enables CrewAI agents to execute Python 3 code that they generate autonomously. This functionality is particularly valuable as it allows agents to create code, execute it, obtain the results, and utilize that information to inform subsequent decisions and actions.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Description",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "There are several ways to use this tool:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Description",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "This is the primary option. The code runs in a secure, isolated Docker container, ensuring safety regardless of its content.\nMake sure Docker is installed and running on your system. If you don’t have it, you can install it from here .",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Docker Container (Recommended)",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "If Docker is unavailable — either not installed or not accessible for any reason — the code will be executed in a restricted Python environment - called sandbox.\nThis environment is very limited, with strict restrictions on many modules and built-in functions.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Sandbox environment",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "NOT RECOMMENDED FOR PRODUCTION This mode allows execution of any Python code, including dangerous calls to sys, os.. and similar modules. Check out how to enable this mode",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Unsafe Execution",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "sys, os..",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The CodeInterpreterTool logs the selected execution strategy to STDOUT",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Logging",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "To use this tool, you need to install the CrewAI tools package:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Installation",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "pip \\ninstall\\n \\n'crewai[tools]'\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "pip install 'crewai[tools]'",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The following example demonstrates how to use the CodeInterpreterTool with a CrewAI agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Example",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n,\\n Process\\n\n\\nfrom\\n crewai_tools \\nimport\\n CodeInterpreterTool\\n\n\n\\n# Initialize the tool\\n\n\\ncode_interpreter \\n=\\n CodeInterpreterTool\\n(\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\nprogrammer_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Python Programmer\"\\n,\\n\n\\n    goal\\n=\\n\"Write and execute Python code to solve problems\"\\n,\\n\n\\n    backstory\\n=\\n\"An expert Python programmer who can write efficient code to solve complex problems.\"\\n,\\n\n\\n    tools\\n=\\n[\\ncode_interpreter\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\n\\n# Example task to generate and execute code\\n\n\\ncoding_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Write a Python function to calculate the Fibonacci sequence up to the 10th number and print the result.\"\\n,\\n\n\\n    expected_output\\n=\\n\"The Fibonacci sequence up to the 10th number.\"\\n,\\n\n\\n    agent\\n=\\nprogrammer_agent\\n,\\n\n\\n)\\n\n\n\\n# Create and run the crew\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nprogrammer_agent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ncoding_task\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew, Process\nfrom crewai_tools import CodeInterpreterTool\n\n# Initialize the tool\ncode_interpreter = CodeInterpreterTool()\n\n# Define an agent that uses the tool\nprogrammer_agent = Agent(\n    role=\"Python Programmer\",\n    goal=\"Write and execute Python code to solve problems\",\n    backstory=\"An expert Python programmer who can write efficient code to solve complex problems.\",\n    tools=[code_interpreter],\n    verbose=True,\n)\n\n# Example task to generate and execute code\ncoding_task = Task(\n    description=\"Write a Python function to calculate the Fibonacci sequence up to the 10th number and print the result.\",\n    expected_output=\"The Fibonacci sequence up to the 10th number.\",\n    agent=programmer_agent,\n)\n\n# Create and run the crew\ncrew = Crew(\n    agents=[programmer_agent],\n    tasks=[coding_task],\n    verbose=True,\n    process=Process.sequential,\n)\nresult = crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "You can also enable code execution directly when creating an agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Example",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n\n\n\\n# Create an agent with code execution enabled\\n\n\\nprogrammer_agent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Python Programmer\"\\n,\\n\n\\n    goal\\n=\\n\"Write and execute Python code to solve problems\"\\n,\\n\n\\n    backstory\\n=\\n\"An expert Python programmer who can write efficient code to solve complex problems.\"\\n,\\n\n\\n    allow_code_execution\\n=\\nTrue\\n,\\n  \\n# This automatically adds the CodeInterpreterTool\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent\n\n# Create an agent with code execution enabled\nprogrammer_agent = Agent(\n    role=\"Python Programmer\",\n    goal=\"Write and execute Python code to solve problems\",\n    backstory=\"An expert Python programmer who can write efficient code to solve complex problems.\",\n    allow_code_execution=True,  # This automatically adds the CodeInterpreterTool\n    verbose=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "unsafe_mode",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai_tools \\nimport\\n CodeInterpreterTool\\n\n\n\\ncode \\n=\\n \\n\"\"\\n\"\\n\n\\nimport\\n os\\n\n\\nos\\n.\\nsystem\\n(\\n\"ls -la\"\\n)\\n\n\\n\"\"\\n\"\\n\n\n\\nCodeInterpreterTool\\n(\\nunsafe_mode\\n=\\nTrue\\n)\\n.\\nrun\\n(\\ncode\\n=\\ncode\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai_tools import CodeInterpreterTool\n\ncode = \"\"\"\nimport os\nos.system(\"ls -la\")\n\"\"\"\n\nCodeInterpreterTool(unsafe_mode=True).run(code=code)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The CodeInterpreterTool accepts the following parameters during initialization:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Parameters",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "False",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "code-interpreter:latest",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "When using the tool with an agent, the agent will need to provide:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Parameters",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "[]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "Here’s a more detailed example of how to integrate the CodeInterpreterTool with a CrewAI agent:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Agent Integration Example",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Task\\n,\\n Crew\\n\n\\nfrom\\n crewai_tools \\nimport\\n CodeInterpreterTool\\n\n\n\\n# Initialize the tool\\n\n\\ncode_interpreter \\n=\\n CodeInterpreterTool\\n(\\n)\\n\n\n\\n# Define an agent that uses the tool\\n\n\\ndata_analyst \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"Data Analyst\"\\n,\\n\n\\n    goal\\n=\\n\"Analyze data using Python code\"\\n,\\n\n\\n    backstory\\n=\\n\"\"\\n\"You are an expert data analyst who specializes \\nin\\n using Python \\n\n\\n    to analyze \\nand\\n visualize data\\n.\\n You can write efficient code to process \\n\n\\n    large datasets \\nand\\n extract meaningful insights\\n.\\n\"\"\\n\"\\n,\\n\n\\n    tools\\n=\\n[\\ncode_interpreter\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\n\\n# Create a task for the agent\\n\n\\nanalysis_task \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"\"\\n\"\\n\n\\n    Write Python code to\\n:\\n\n\\n    \\n1.\\n Generate a random dataset of \\n100\\n points \\nwith\\n x \\nand\\n y coordinates\\n\n\\n    \\n2.\\n Calculate the correlation coefficient between x \\nand\\n y\\n\n\\n    \\n3.\\n Create a scatter plot of the data\\n\n\\n    \\n4.\\n Print the correlation coefficient \\nand\\n save the plot \\nas\\n \\n'scatter.png'\\n\n    \n\\n    Make sure to handle \\nany\\n necessary imports \\nand\\n \\nprint\\n the results\\n.\\n\n\\n    \\n\"\"\\n\"\\n,\\n\n\\n    expected_output\\n=\\n\"The correlation coefficient and confirmation that the scatter plot has been saved.\"\\n,\\n\n\\n    agent\\n=\\ndata_analyst\\n,\\n\n\\n)\\n\n\n\\n# Run the task\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\ndata_analyst\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\nanalysis_task\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n)\\n\n\\nresult \\n=\\n crew\\n.\\nkickoff\\n(\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Task, Crew\nfrom crewai_tools import CodeInterpreterTool\n\n# Initialize the tool\ncode_interpreter = CodeInterpreterTool()\n\n# Define an agent that uses the tool\ndata_analyst = Agent(\n    role=\"Data Analyst\",\n    goal=\"Analyze data using Python code\",\n    backstory=\"\"\"You are an expert data analyst who specializes in using Python \n    to analyze and visualize data. You can write efficient code to process \n    large datasets and extract meaningful insights.\"\"\",\n    tools=[code_interpreter],\n    verbose=True,\n)\n\n# Create a task for the agent\nanalysis_task = Task(\n    description=\"\"\"\n    Write Python code to:\n    1. Generate a random dataset of 100 points with x and y coordinates\n    2. Calculate the correlation coefficient between x and y\n    3. Create a scatter plot of the data\n    4. Print the correlation coefficient and save the plot as 'scatter.png'\n    \n    Make sure to handle any necessary imports and print the results.\n    \"\"\",\n    expected_output=\"The correlation coefficient and confirmation that the scatter plot has been saved.\",\n    agent=data_analyst,\n)\n\n# Run the task\ncrew = Crew(\n    agents=[data_analyst],\n    tasks=[analysis_task],\n    verbose=True,\n    process=Process.sequential,\n)\nresult = crew.kickoff()",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The CodeInterpreterTool uses Docker to create a secure environment for code execution:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Implementation Details",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "class\\n \\nCodeInterpreterTool\\n(\\nBaseTool\\n)\\n:\\n\n\\n    name\\n:\\n \\nstr\\n \\n=\\n \\n\"Code Interpreter\"\\n\n\\n    description\\n:\\n \\nstr\\n \\n=\\n \\n\"Interprets Python3 code strings with a final print statement.\"\\n\n\\n    args_schema\\n:\\n Type\\n[\\nBaseModel\\n]\\n \\n=\\n CodeInterpreterSchema\\n\n\\n    default_image_tag\\n:\\n \\nstr\\n \\n=\\n \\n\"code-interpreter:latest\"\\n\n    \n\\n    \\ndef\\n \\n_run\\n(\\nself\\n,\\n \\n**\\nkwargs\\n)\\n \\n-\\n>\\n \\nstr\\n:\\n\n\\n        code \\n=\\n kwargs\\n.\\nget\\n(\\n\"code\"\\n,\\n self\\n.\\ncode\\n)\\n\n\\n        libraries_used \\n=\\n kwargs\\n.\\nget\\n(\\n\"libraries_used\"\\n,\\n \\n[\\n]\\n)\\n\n\n\\n        \\nif\\n self\\n.\\nunsafe_mode\\n:\\n\n\\n            \\nreturn\\n self\\n.\\nrun_code_unsafe\\n(\\ncode\\n,\\n libraries_used\\n)\\n\n\\n        \\nelse\\n:\\n\n\\n            \\nreturn\\n self\\n.\\nrun_code_safety\\n(\\ncode\\n,\\n libraries_used\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "class CodeInterpreterTool(BaseTool):\n    name: str = \"Code Interpreter\"\n    description: str = \"Interprets Python3 code strings with a final print statement.\"\n    args_schema: Type[BaseModel] = CodeInterpreterSchema\n    default_image_tag: str = \"code-interpreter:latest\"\n    \n    def _run(self, **kwargs) -> str:\n        code = kwargs.get(\"code\", self.code)\n        libraries_used = kwargs.get(\"libraries_used\", [])\n\n        if self.unsafe_mode:\n            return self.run_code_unsafe(code, libraries_used)\n        else:\n            return self.run_code_safety(code, libraries_used)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The tool performs the following steps:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Implementation Details",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "By default, the CodeInterpreterTool runs code in an isolated Docker container, which provides a layer of security. However, there are still some security considerations to keep in mind:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Security Considerations",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "unsafe_mode",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "The CodeInterpreterTool provides a powerful way for CrewAI agents to execute Python code in a relatively secure environment. By enabling agents to write and run code, it significantly expands their problem-solving capabilities, especially for tasks involving data analysis, calculations, or other computational work. This tool is particularly useful for agents that need to perform complex operations that are more efficiently expressed in code than in natural language.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​Conclusion",
            "page_number": 24,
            "type": "paragraph"
        }
    },
    {
        "content": "CodeInterpreterTool",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/tools/codeinterpretertool",
            "topic": "​CodeInterpreterTool",
            "page_number": 24,
            "type": "code_block"
        }
    },
    {
        "content": "Leveraging memory systems in the CrewAI framework to enhance agent capabilities.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "Memory",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.\nThis system comprises short-term memory , long-term memory , entity memory , and contextual memory , each serving a unique purpose in aiding agents to remember,\nreason, and learn from past interactions.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "short-term memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "long-term memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "entity memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "contextual memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "RAG",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "RAG",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "ShortTermMemory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "LongTermMemory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "EntityMemory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Contextual Awareness : With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "Experience Accumulation : Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "Entity Understanding : By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "When configuring a crew, you can enable and customize each memory component to suit the crew’s objectives and the nature of tasks it will perform.\nBy default, the memory system is disabled, and you can ensure it is active by setting memory=True in the crew configuration.\nThe memory will use OpenAI embeddings by default, but you can change it by setting embedder to a different model.\nIt’s also possible to initialize the memory instance with your own instance.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Implementing Memory in Your Crew",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "memory=True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "embedder",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "The ‘embedder’ only applies to Short-Term Memory which uses Chroma for RAG.\nThe Long-Term Memory uses SQLite3 to store task results. Currently, there is no way to override these storage implementations.\nThe data storage files are saved into a platform-specific location found using the appdirs package,\nand the name of the project can be overridden using the CREWAI_STORAGE_DIR environment variable.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Implementing Memory in Your Crew",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\n# Assemble your crew with memory capabilities\\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\n# Assemble your crew with memory capabilities\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Process\\n\n\\nfrom\\n crewai\\n.\\nmemory \\nimport\\n LongTermMemory\\n,\\n ShortTermMemory\\n,\\n EntityMemory\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nstorage\\n.\\nrag_storage \\nimport\\n RAGStorage\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nstorage\\n.\\nltm_sqlite_storage \\nimport\\n LTMSQLiteStorage\\n\n\\nfrom\\n typing \\nimport\\n List\\n,\\n Optional\\n\n\n\\n# Assemble your crew with memory capabilities\\n\n\\nmy_crew\\n:\\n Crew \\n=\\n Crew\\n(\\n\n\\n    agents \\n=\\n \\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks \\n=\\n \\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process \\n=\\n Process\\n.\\nsequential\\n,\\n\n\\n    memory \\n=\\n \\nTrue\\n,\\n\n\\n    \\n# Long-term memory for persistent storage across sessions\\n\n\\n    long_term_memory \\n=\\n LongTermMemory\\n(\\n\n\\n        storage\\n=\\nLTMSQLiteStorage\\n(\\n\n\\n            db_path\\n=\\n\"/my_crew1/long_term_memory_storage.db\"\\n\n\\n        \\n)\\n\n\\n    \\n)\\n,\\n\n\\n    \\n# Short-term memory for current context using RAG\\n\n\\n    short_term_memory \\n=\\n ShortTermMemory\\n(\\n\n\\n        storage \\n=\\n RAGStorage\\n(\\n\n\\n                embedder_config\\n=\\n{\\n\n\\n                    \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n                    \\n\"config\"\\n:\\n \\n{\\n\n\\n                        \\n\"model\"\\n:\\n \\n'text-embedding-3-small'\\n\n\\n                    \\n}\\n\n\\n                \\n}\\n,\\n\n\\n                \\ntype\\n=\\n\"short_term\"\\n,\\n\n\\n                path\\n=\\n\"/my_crew1/\"\\n\n\\n            \\n)\\n\n\\n        \\n)\\n,\\n\n\\n    \\n)\\n,\\n\n\\n    \\n# Entity memory for tracking key information about entities\\n\n\\n    entity_memory \\n=\\n EntityMemory\\n(\\n\n\\n        storage\\n=\\nRAGStorage\\n(\\n\n\\n            embedder_config\\n=\\n{\\n\n\\n                \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n                \\n\"config\"\\n:\\n \\n{\\n\n\\n                    \\n\"model\"\\n:\\n \\n'text-embedding-3-small'\\n\n\\n                \\n}\\n\n\\n            \\n}\\n,\\n\n\\n            \\ntype\\n=\\n\"short_term\"\\n,\\n\n\\n            path\\n=\\n\"/my_crew1/\"\\n\n\\n        \\n)\\n\n\\n    \\n)\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Process\nfrom crewai.memory import LongTermMemory, ShortTermMemory, EntityMemory\nfrom crewai.memory.storage.rag_storage import RAGStorage\nfrom crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage\nfrom typing import List, Optional\n\n# Assemble your crew with memory capabilities\nmy_crew: Crew = Crew(\n    agents = [...],\n    tasks = [...],\n    process = Process.sequential,\n    memory = True,\n    # Long-term memory for persistent storage across sessions\n    long_term_memory = LongTermMemory(\n        storage=LTMSQLiteStorage(\n            db_path=\"/my_crew1/long_term_memory_storage.db\"\n        )\n    ),\n    # Short-term memory for current context using RAG\n    short_term_memory = ShortTermMemory(\n        storage = RAGStorage(\n                embedder_config={\n                    \"provider\": \"openai\",\n                    \"config\": {\n                        \"model\": 'text-embedding-3-small'\n                    }\n                },\n                type=\"short_term\",\n                path=\"/my_crew1/\"\n            )\n        ),\n    ),\n    # Entity memory for tracking key information about entities\n    entity_memory = EntityMemory(\n        storage=RAGStorage(\n            embedder_config={\n                \"provider\": \"openai\",\n                \"config\": {\n                    \"model\": 'text-embedding-3-small'\n                }\n            },\n            type=\"short_term\",\n            path=\"/my_crew1/\"\n        )\n    ),\n    verbose=True,\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "CREWAI_STORAGE_DIR",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "import\\n os\\n\n\\nfrom\\n crewai \\nimport\\n Crew\\n\n\\nfrom\\n crewai\\n.\\nmemory \\nimport\\n LongTermMemory\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nstorage\\n.\\nltm_sqlite_storage \\nimport\\n LTMSQLiteStorage\\n\n\n\\n# Configure storage path using environment variable\\n\n\\nstorage_path \\n=\\n os\\n.\\ngetenv\\n(\\n\"CREWAI_STORAGE_DIR\"\\n,\\n \\n\"./storage\"\\n)\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    long_term_memory\\n=\\nLongTermMemory\\n(\\n\n\\n        storage\\n=\\nLTMSQLiteStorage\\n(\\n\n\\n            db_path\\n=\\n\"{storage_path}/memory.db\"\\n.\\nformat\\n(\\nstorage_path\\n=\\nstorage_path\\n)\\n\n\\n        \\n)\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nfrom crewai import Crew\nfrom crewai.memory import LongTermMemory\nfrom crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage\n\n# Configure storage path using environment variable\nstorage_path = os.getenv(\"CREWAI_STORAGE_DIR\", \"./storage\")\ncrew = Crew(\n    memory=True,\n    long_term_memory=LongTermMemory(\n        storage=LTMSQLiteStorage(\n            db_path=\"{storage_path}/memory.db\".format(storage_path=storage_path)\n        )\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n\n\\nfrom\\n crewai\\n.\\nmemory \\nimport\\n LongTermMemory\\n\n\n\\n# Simple memory configuration\\n\n\\ncrew \\n=\\n Crew\\n(\\nmemory\\n=\\nTrue\\n)\\n  \\n# Uses default storage locations\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew\nfrom crewai.memory import LongTermMemory\n\n# Simple memory configuration\ncrew = Crew(memory=True)  # Uses default storage locations",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Note that External Memory won’t be defined when memory=True is set, as we can’t infer which external memory would be suitable for your case",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Basic Memory Configuration",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "memory=True",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n\n\\nfrom\\n crewai\\n.\\nmemory \\nimport\\n LongTermMemory\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nstorage\\n.\\nltm_sqlite_storage \\nimport\\n LTMSQLiteStorage\\n\n\n\\n# Configure custom storage paths\\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    long_term_memory\\n=\\nLongTermMemory\\n(\\n\n\\n        storage\\n=\\nLTMSQLiteStorage\\n(\\ndb_path\\n=\\n\"./memory.db\"\\n)\\n\n\\n    \\n)\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew\nfrom crewai.memory import LongTermMemory\nfrom crewai.memory.storage.ltm_sqlite_storage import LTMSQLiteStorage\n\n# Configure custom storage paths\ncrew = Crew(\n    memory=True,\n    long_term_memory=LongTermMemory(\n        storage=LTMSQLiteStorage(db_path=\"./memory.db\")\n    )\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Mem0 is a self-improving memory layer for LLM applications, enabling personalized AI experiences.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Integrating Mem0 for Enhanced User Memory",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "To include user-specific memory you can get your API key here and refer the docs for adding user preferences. In this case user_memory is set to MemoryClient from mem0.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Using Mem0 API platform",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "user_memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "MemoryClient",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "import\\n os\\n\n\\nfrom\\n crewai \\nimport\\n Crew\\n,\\n Process\\n\n\\nfrom\\n mem0 \\nimport\\n MemoryClient\\n\n\n\\n# Set environment variables for Mem0\\n\n\\nos\\n.\\nenviron\\n[\\n\"MEM0_API_KEY\"\\n]\\n \\n=\\n \\n\"m0-xx\"\\n\n\n\\n# Step 1: Create a Crew with User Memory\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    memory_config\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"mem0\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\"user_id\"\\n:\\n \\n\"john\"\\n}\\n,\\n\n\\n        \\n\"user_memory\"\\n \\n:\\n \\n{\\n}\\n \\n#Set user_memory explicitly to a dictionary, we are working on this issue.\\n\n\\n    \\n}\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nfrom crewai import Crew, Process\nfrom mem0 import MemoryClient\n\n# Set environment variables for Mem0\nos.environ[\"MEM0_API_KEY\"] = \"m0-xx\"\n\n# Step 1: Create a Crew with User Memory\n\ncrew = Crew(\n    agents=[...],\n    tasks=[...],\n    verbose=True,\n    process=Process.sequential,\n    memory=True,\n    memory_config={\n        \"provider\": \"mem0\",\n        \"config\": {\"user_id\": \"john\"},\n        \"user_memory\" : {} #Set user_memory explicitly to a dictionary, we are working on this issue.\n    },\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "If you want to access a specific organization and project, you can set the org_id and project_id parameters in the memory configuration.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Additional Memory Configuration Options",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "org_id",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "project_id",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    memory_config\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"mem0\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\"user_id\"\\n:\\n \\n\"john\"\\n,\\n \\n\"org_id\"\\n:\\n \\n\"my_org_id\"\\n,\\n \\n\"project_id\"\\n:\\n \\n\"my_project_id\"\\n}\\n,\\n\n\\n        \\n\"user_memory\"\\n \\n:\\n \\n{\\n}\\n \\n#Set user_memory explicitly to a dictionary, we are working on this issue.\\n\n\\n    \\n}\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew\n\ncrew = Crew(\n    agents=[...],\n    tasks=[...],\n    verbose=True,\n    memory=True,\n    memory_config={\n        \"provider\": \"mem0\",\n        \"config\": {\"user_id\": \"john\", \"org_id\": \"my_org_id\", \"project_id\": \"my_project_id\"},\n        \"user_memory\" : {} #Set user_memory explicitly to a dictionary, we are working on this issue.\n    },\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "If you want to use local mem0 memory, with a custom configuration, you can set a parameter local_mem0_config in the config itself.\nIf both os environment key is set and local_mem0_config is given, the API platform takes higher priority over the local configuration.\nCheck this mem0 local configuration docs for more understanding.\nIn this case user_memory is set to Memory from mem0.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Using Local Mem0 memory",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "local_mem0_config",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "user_memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n\n\n\n\\n#local mem0 config\\n\n\\nconfig \\n=\\n \\n{\\n\n\\n    \\n\"vector_store\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"qdrant\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"host\"\\n:\\n \\n\"localhost\"\\n,\\n\n\\n            \\n\"port\"\\n:\\n \\n6333\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"llm\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"your-api-key\"\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"gpt-4\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"embedder\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"your-api-key\"\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"text-embedding-3-small\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"graph_store\"\\n:\\n \\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"neo4j\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"url\"\\n:\\n \\n\"neo4j+s://your-instance\"\\n,\\n\n\\n            \\n\"username\"\\n:\\n \\n\"neo4j\"\\n,\\n\n\\n            \\n\"password\"\\n:\\n \\n\"password\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n,\\n\n\\n    \\n\"history_db_path\"\\n:\\n \\n\"/path/to/history.db\"\\n,\\n\n\\n    \\n\"version\"\\n:\\n \\n\"v1.1\"\\n,\\n\n\\n    \\n\"custom_fact_extraction_prompt\"\\n:\\n \\n\"Optional custom prompt for fact extraction for memory\"\\n,\\n\n\\n    \\n\"custom_update_memory_prompt\"\\n:\\n \\n\"Optional custom prompt for update memory\"\\n\n\\n}\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    memory_config\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"mem0\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\"user_id\"\\n:\\n \\n\"john\"\\n,\\n \\n'local_mem0_config'\\n:\\n config\\n}\\n,\\n\n\\n        \\n\"user_memory\"\\n \\n:\\n \\n{\\n}\\n \\n#Set user_memory explicitly to a dictionary, we are working on this issue.\\n\n\\n    \\n}\\n,\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew\n\n\n#local mem0 config\nconfig = {\n    \"vector_store\": {\n        \"provider\": \"qdrant\",\n        \"config\": {\n            \"host\": \"localhost\",\n            \"port\": 6333\n        }\n    },\n    \"llm\": {\n        \"provider\": \"openai\",\n        \"config\": {\n            \"api_key\": \"your-api-key\",\n            \"model\": \"gpt-4\"\n        }\n    },\n    \"embedder\": {\n        \"provider\": \"openai\",\n        \"config\": {\n            \"api_key\": \"your-api-key\",\n            \"model\": \"text-embedding-3-small\"\n        }\n    },\n    \"graph_store\": {\n        \"provider\": \"neo4j\",\n        \"config\": {\n            \"url\": \"neo4j+s://your-instance\",\n            \"username\": \"neo4j\",\n            \"password\": \"password\"\n        }\n    },\n    \"history_db_path\": \"/path/to/history.db\",\n    \"version\": \"v1.1\",\n    \"custom_fact_extraction_prompt\": \"Optional custom prompt for fact extraction for memory\",\n    \"custom_update_memory_prompt\": \"Optional custom prompt for update memory\"\n}\n\ncrew = Crew(\n    agents=[...],\n    tasks=[...],\n    verbose=True,\n    memory=True,\n    memory_config={\n        \"provider\": \"mem0\",\n        \"config\": {\"user_id\": \"john\", 'local_mem0_config': config},\n        \"user_memory\" : {} #Set user_memory explicitly to a dictionary, we are working on this issue.\n    },\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "External Memory is a powerful feature that allows you to integrate external memory systems with your CrewAI applications. This is particularly useful when you want to use specialized memory providers or maintain memory across different applications.\nSince it’s an external memory, we’re not able to add a default value to it - unlike with Long Term and Short Term memory.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Using External Memory",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "The most common way to use External Memory is with Mem0 as the provider:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Basic Usage with Mem0",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "import\\n os\\n\n\\nfrom\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nexternal\\n.\\nexternal_memory \\nimport\\n ExternalMemory\\n\n\n\\nos\\n.\\nenviron\\n[\\n\"MEM0_API_KEY\"\\n]\\n \\n=\\n \\n\"YOUR-API-KEY\"\\n\n\n\\nagent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"You are a helpful assistant\"\\n,\\n\n\\n    goal\\n=\\n\"Plan a vacation for the user\"\\n,\\n\n\\n    backstory\\n=\\n\"You are a helpful assistant that can plan a vacation for the user\"\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Give things related to the user's vacation\"\\n,\\n\n\\n    expected_output\\n=\\n\"A plan for the vacation\"\\n,\\n\n\\n    agent\\n=\\nagent\\n,\\n\n\\n)\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nagent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    external_memory\\n=\\nExternalMemory\\n(\\n\n\\n        embedder_config\\n=\\n{\\n\"provider\"\\n:\\n \\n\"mem0\"\\n,\\n \\n\"config\"\\n:\\n \\n{\\n\"user_id\"\\n:\\n \\n\"U-123\"\\n}\\n}\\n \\n# you can provide an entire Mem0 configuration\\n\n\\n    \\n)\\n,\\n\n\\n)\\n\n\n\\ncrew\\n.\\nkickoff\\n(\\n\n\\n    inputs\\n=\\n{\\n\"question\"\\n:\\n \\n\"which destination is better for a beach vacation?\"\\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "import os\nfrom crewai import Agent, Crew, Process, Task\nfrom crewai.memory.external.external_memory import ExternalMemory\n\nos.environ[\"MEM0_API_KEY\"] = \"YOUR-API-KEY\"\n\nagent = Agent(\n    role=\"You are a helpful assistant\",\n    goal=\"Plan a vacation for the user\",\n    backstory=\"You are a helpful assistant that can plan a vacation for the user\",\n    verbose=True,\n)\ntask = Task(\n    description=\"Give things related to the user's vacation\",\n    expected_output=\"A plan for the vacation\",\n    agent=agent,\n)\n\ncrew = Crew(\n    agents=[agent],\n    tasks=[task],\n    verbose=True,\n    process=Process.sequential,\n    external_memory=ExternalMemory(\n        embedder_config={\"provider\": \"mem0\", \"config\": {\"user_id\": \"U-123\"}} # you can provide an entire Mem0 configuration\n    ),\n)\n\ncrew.kickoff(\n    inputs={\"question\": \"which destination is better for a beach vacation?\"}\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "You can also create custom storage implementations for External Memory. Here’s an example of how to create a custom storage:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Using External Memory with Custom Storage",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Agent\\n,\\n Crew\\n,\\n Process\\n,\\n Task\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nexternal\\n.\\nexternal_memory \\nimport\\n ExternalMemory\\n\n\\nfrom\\n crewai\\n.\\nmemory\\n.\\nstorage\\n.\\ninterface \\nimport\\n Storage\\n\n\n\n\\nclass\\n \\nCustomStorage\\n(\\nStorage\\n)\\n:\\n\n\\n    \\ndef\\n \\n__init__\\n(\\nself\\n)\\n:\\n\n\\n        self\\n.\\nmemories \\n=\\n \\n[\\n]\\n\n\n\\n    \\ndef\\n \\nsave\\n(\\nself\\n,\\n value\\n,\\n metadata\\n=\\nNone\\n,\\n agent\\n=\\nNone\\n)\\n:\\n\n\\n        self\\n.\\nmemories\\n.\\nappend\\n(\\n{\\n\"value\"\\n:\\n value\\n,\\n \\n\"metadata\"\\n:\\n metadata\\n,\\n \\n\"agent\"\\n:\\n agent\\n}\\n)\\n\n\n\\n    \\ndef\\n \\nsearch\\n(\\nself\\n,\\n query\\n,\\n limit\\n=\\n10\\n,\\n score_threshold\\n=\\n0.5\\n)\\n:\\n\n\\n        \\n# Implement your search logic here\\n\n\\n        \\nreturn\\n \\n[\\n]\\n\n\n\\n    \\ndef\\n \\nreset\\n(\\nself\\n)\\n:\\n\n\\n        self\\n.\\nmemories \\n=\\n \\n[\\n]\\n\n\n\n\\n# Create external memory with custom storage\\n\n\\nexternal_memory \\n=\\n ExternalMemory\\n(\\n\n\\n    storage\\n=\\nCustomStorage\\n(\\n)\\n,\\n\n\\n    embedder_config\\n=\\n{\\n\"provider\"\\n:\\n \\n\"mem0\"\\n,\\n \\n\"config\"\\n:\\n \\n{\\n\"user_id\"\\n:\\n \\n\"U-123\"\\n}\\n}\\n,\\n\n\\n)\\n\n\n\\nagent \\n=\\n Agent\\n(\\n\n\\n    role\\n=\\n\"You are a helpful assistant\"\\n,\\n\n\\n    goal\\n=\\n\"Plan a vacation for the user\"\\n,\\n\n\\n    backstory\\n=\\n\"You are a helpful assistant that can plan a vacation for the user\"\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n)\\n\n\\ntask \\n=\\n Task\\n(\\n\n\\n    description\\n=\\n\"Give things related to the user's vacation\"\\n,\\n\n\\n    expected_output\\n=\\n\"A plan for the vacation\"\\n,\\n\n\\n    agent\\n=\\nagent\\n,\\n\n\\n)\\n\n\n\\ncrew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\nagent\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\ntask\\n]\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    external_memory\\n=\\nexternal_memory\\n,\\n\n\\n)\\n\n\n\\ncrew\\n.\\nkickoff\\n(\\n\n\\n    inputs\\n=\\n{\\n\"question\"\\n:\\n \\n\"which destination is better for a beach vacation?\"\\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Agent, Crew, Process, Task\nfrom crewai.memory.external.external_memory import ExternalMemory\nfrom crewai.memory.storage.interface import Storage\n\n\nclass CustomStorage(Storage):\n    def __init__(self):\n        self.memories = []\n\n    def save(self, value, metadata=None, agent=None):\n        self.memories.append({\"value\": value, \"metadata\": metadata, \"agent\": agent})\n\n    def search(self, query, limit=10, score_threshold=0.5):\n        # Implement your search logic here\n        return []\n\n    def reset(self):\n        self.memories = []\n\n\n# Create external memory with custom storage\nexternal_memory = ExternalMemory(\n    storage=CustomStorage(),\n    embedder_config={\"provider\": \"mem0\", \"config\": {\"user_id\": \"U-123\"}},\n)\n\nagent = Agent(\n    role=\"You are a helpful assistant\",\n    goal=\"Plan a vacation for the user\",\n    backstory=\"You are a helpful assistant that can plan a vacation for the user\",\n    verbose=True,\n)\ntask = Task(\n    description=\"Give things related to the user's vacation\",\n    expected_output=\"A plan for the vacation\",\n    agent=agent,\n)\n\ncrew = Crew(\n    agents=[agent],\n    tasks=[task],\n    verbose=True,\n    process=Process.sequential,\n    external_memory=external_memory,\n)\n\ncrew.kickoff(\n    inputs={\"question\": \"which destination is better for a beach vacation?\"}\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n'text-embedding-3-small'\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": 'text-embedding-3-small'\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Alternatively, you can directly pass the OpenAIEmbeddingFunction to the embedder parameter.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Using OpenAI embeddings (already default)",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\\nfrom\\n chromadb\\n.\\nutils\\n.\\nembedding_functions \\nimport\\n OpenAIEmbeddingFunction\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n'text-embedding-3-small'\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\nfrom chromadb.utils.embedding_functions import OpenAIEmbeddingFunction\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"openai\",\n        \"config\": {\n            \"model\": 'text-embedding-3-small'\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"ollama\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n\"mxbai-embed-large\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"ollama\",\n        \"config\": {\n            \"model\": \"mxbai-embed-large\"\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Before using Google AI embeddings, ensure you have:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Prerequisites",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "You will need to update your pyproject.toml dependencies:",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Prerequisites",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "dependencies = \\n[\\n\n\\n    \"google\\n-\\ngenerativeai\\n>\\n=0.8.4\"\\n,\\n \\n#main version in January/2025 - crewai v.0.100.0 and crewai-tools 0.33.0\\n\n\\n    \"crewai\\n[\\ntools\\n]\\n>\\n=0.100.0\\n,\\n<1.0.0\"\\n\n\\n]\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "dependencies = [\n    \"google-generativeai>=0.8.4\", #main version in January/2025 - crewai v.0.100.0 and crewai-tools 0.33.0\n    \"crewai[tools]>=0.100.0,<1.0.0\"\n]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"google\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"<YOUR_API_KEY>\"\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"<model_name>\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"google\",\n        \"config\": {\n            \"api_key\": \"<YOUR_API_KEY>\",\n            \"model\": \"<model_name>\"\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n chromadb\\n.\\nutils\\n.\\nembedding_functions \\nimport\\n OpenAIEmbeddingFunction\\n\n\\nfrom\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"openai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"YOUR_API_KEY\"\\n,\\n\n\\n            \\n\"api_base\"\\n:\\n \\n\"YOUR_API_BASE_PATH\"\\n,\\n\n\\n            \\n\"api_version\"\\n:\\n \\n\"YOUR_API_VERSION\"\\n,\\n\n\\n            \\n\"model_name\"\\n:\\n \\n'text-embedding-3-small'\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from chromadb.utils.embedding_functions import OpenAIEmbeddingFunction\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"openai\",\n        \"config\": {\n            \"api_key\": \"YOUR_API_KEY\",\n            \"api_base\": \"YOUR_API_BASE_PATH\",\n            \"api_version\": \"YOUR_API_VERSION\",\n            \"model_name\": 'text-embedding-3-small'\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n chromadb\\n.\\nutils\\n.\\nembedding_functions \\nimport\\n GoogleVertexEmbeddingFunction\\n\n\\nfrom\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"vertexai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"project_id\"\\n=\\n\"YOUR_PROJECT_ID\"\\n,\\n\n\\n            \\n\"region\"\\n=\\n\"YOUR_REGION\"\\n,\\n\n\\n            \\n\"api_key\"\\n=\\n\"YOUR_API_KEY\"\\n,\\n\n\\n            \\n\"model_name\"\\n=\\n\"textembedding-gecko\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from chromadb.utils.embedding_functions import GoogleVertexEmbeddingFunction\nfrom crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"vertexai\",\n        \"config\": {\n            \"project_id\"=\"YOUR_PROJECT_ID\",\n            \"region\"=\"YOUR_REGION\",\n            \"api_key\"=\"YOUR_API_KEY\",\n            \"model_name\"=\"textembedding-gecko\"\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"cohere\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"YOUR_API_KEY\"\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"<model_name>\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"cohere\",\n        \"config\": {\n            \"api_key\": \"YOUR_API_KEY\",\n            \"model\": \"<model_name>\"\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"voyageai\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"YOUR_API_KEY\"\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"<model_name>\"\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"voyageai\",\n        \"config\": {\n            \"api_key\": \"YOUR_API_KEY\",\n            \"model\": \"<model_name>\"\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"huggingface\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"api_url\"\\n:\\n \\n\"<api_url>\"\\n,\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"huggingface\",\n        \"config\": {\n            \"api_url\": \"<api_url>\",\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\n# Note: Ensure you have installed and imported `ibm_watsonx_ai` for Watson embeddings to work.\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"watson\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"model\"\\n:\\n \\n\"<model_name>\"\\n,\\n\n\\n            \\n\"api_url\"\\n:\\n \\n\"<api_url>\"\\n,\\n\n\\n            \\n\"api_key\"\\n:\\n \\n\"<YOUR_API_KEY>\"\\n,\\n\n\\n            \\n\"project_id\"\\n:\\n \\n\"<YOUR_PROJECT_ID>\"\\n,\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\n\n# Note: Ensure you have installed and imported `ibm_watsonx_ai` for Watson embeddings to work.\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"watson\",\n        \"config\": {\n            \"model\": \"<model_name>\",\n            \"api_url\": \"<api_url>\",\n            \"api_key\": \"<YOUR_API_KEY>\",\n            \"project_id\": \"<YOUR_PROJECT_ID>\",\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "# Note: Ensure you have installed `boto3` for Bedrock embeddings to work.\\n\n\n\\nimport\\n os\\n\n\\nimport\\n boto3\\n\n\\nfrom\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\n\\nboto3_session \\n=\\n boto3\\n.\\nSession\\n(\\n\n\\n    region_name\\n=\\nos\\n.\\nenviron\\n.\\nget\\n(\\n\"AWS_REGION_NAME\"\\n)\\n,\\n\n\\n    aws_access_key_id\\n=\\nos\\n.\\nenviron\\n.\\nget\\n(\\n\"AWS_ACCESS_KEY_ID\"\\n)\\n,\\n\n\\n    aws_secret_access_key\\n=\\nos\\n.\\nenviron\\n.\\nget\\n(\\n\"AWS_SECRET_ACCESS_KEY\"\\n)\\n\n\\n)\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n    \\n\"provider\"\\n:\\n \\n\"bedrock\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n{\\n\n\\n            \\n\"session\"\\n:\\n boto3_session\\n,\\n\n\\n            \\n\"model\"\\n:\\n \\n\"amazon.titan-embed-text-v2:0\"\\n,\\n\n\\n            \\n\"vector_dimension\"\\n:\\n \\n1024\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n    verbose\\n=\\nTrue\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "# Note: Ensure you have installed `boto3` for Bedrock embeddings to work.\n\nimport os\nimport boto3\nfrom crewai import Crew, Agent, Task, Process\n\nboto3_session = boto3.Session(\n    region_name=os.environ.get(\"AWS_REGION_NAME\"),\n    aws_access_key_id=os.environ.get(\"AWS_ACCESS_KEY_ID\"),\n    aws_secret_access_key=os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\n)\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    embedder={\n    \"provider\": \"bedrock\",\n        \"config\":{\n            \"session\": boto3_session,\n            \"model\": \"amazon.titan-embed-text-v2:0\",\n            \"vector_dimension\": 1024\n        }\n    }\n    verbose=True\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from\\n crewai \\nimport\\n Crew\\n,\\n Agent\\n,\\n Task\\n,\\n Process\\n\n\\nfrom\\n chromadb \\nimport\\n Documents\\n,\\n EmbeddingFunction\\n,\\n Embeddings\\n\n\n\\n# Create a custom embedding function\\n\n\\nclass\\n \\nCustomEmbedder\\n(\\nEmbeddingFunction\\n)\\n:\\n\n\\n    \\ndef\\n \\n__call__\\n(\\nself\\n,\\n \\ninput\\n:\\n Documents\\n)\\n \\n-\\n>\\n Embeddings\\n:\\n\n\\n        \\n# generate embeddings\\n\n\\n        \\nreturn\\n \\n[\\n1\\n,\\n \\n2\\n,\\n \\n3\\n]\\n \\n# this is a dummy embedding\\n\n\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"custom\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"embedder\"\\n:\\n CustomEmbedder\\n(\\n)\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "from crewai import Crew, Agent, Task, Process\nfrom chromadb import Documents, EmbeddingFunction, Embeddings\n\n# Create a custom embedding function\nclass CustomEmbedder(EmbeddingFunction):\n    def __call__(self, input: Documents) -> Embeddings:\n        # generate embeddings\n        return [1, 2, 3] # this is a dummy embedding\n\nmy_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"custom\",\n        \"config\": {\n            \"embedder\": CustomEmbedder()\n        }\n    }\n)",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "crewai reset-memories \\n[\\nOPTIONS\\n]\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "crewai reset-memories [OPTIONS]",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-l",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--long",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-s",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--short",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-e",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--entities",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-k",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--kickoff-outputs",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-kn",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--knowledge",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-akn",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--agent-knowledge",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "-a",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "--all",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Note: To use the cli command you need to have your crew in a file called crew.py in the same directory.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Resetting Memory Options",
            "page_number": 25,
            "type": "paragraph"
        }
    },
    {
        "content": "\n\\nmy_crew \\n=\\n Crew\\n(\\n\n\\n    agents\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    tasks\\n=\\n[\\n.\\n.\\n.\\n]\\n,\\n\n\\n    process\\n=\\nProcess\\n.\\nsequential\\n,\\n\n\\n    memory\\n=\\nTrue\\n,\\n\n\\n    verbose\\n=\\nTrue\\n,\\n\n\\n    embedder\\n=\\n{\\n\n\\n        \\n\"provider\"\\n:\\n \\n\"custom\"\\n,\\n\n\\n        \\n\"config\"\\n:\\n \\n{\\n\n\\n            \\n\"embedder\"\\n:\\n CustomEmbedder\\n(\\n)\\n\n\\n        \\n}\\n\n\\n    \\n}\\n\n\\n)\\n\n\n\\nmy_crew\\n.\\nreset_memories\\n(\\ncommand_type \\n=\\n \\n'all'\\n)\\n \\n# Resets all the memory\\n\n",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "my_crew = Crew(\n    agents=[...],\n    tasks=[...],\n    process=Process.sequential,\n    memory=True,\n    verbose=True,\n    embedder={\n        \"provider\": \"custom\",\n        \"config\": {\n            \"embedder\": CustomEmbedder()\n        }\n    }\n)\n\nmy_crew.reset_memories(command_type = 'all') # Resets all the memory",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "long",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "short",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "entities",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "kickoff_outputs",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "knowledge",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "agent_knowledge",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "all",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Introduction to Memory Systems in CrewAI",
            "page_number": 25,
            "type": "code_block"
        }
    },
    {
        "content": "Integrating CrewAI’s memory system into your projects is straightforward. By leveraging the provided memory components and configurations,\nyou can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.",
        "meta_data": {
            "web_site_name": "docs.crewai.com",
            "web_page_url": "https://docs.crewai.com/concepts/memory",
            "topic": "​Conclusion",
            "page_number": 25,
            "type": "paragraph"
        }
    }
]